# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-22 08:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy, no-wrap
msgid "When Quarkus meets Virtual Threads"
msgstr "Cuando Quarkus se encuentra con Hilos Virtuales"

#. type: YAML Front Matter: synopsis
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy, no-wrap
msgid "What do virtual threads change when building concurrent applications with Quarkus."
msgstr "Qué cambian los hilos virtuales al crear aplicaciones concurrentes con Quarkus."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Java 21 offers a new feature that will reshape the development of concurrent applications in Java.\n"
"For over two years, the Quarkus team explored integrating this new feature to ease the development of distributed applications, including microservices and event-driven applications."
msgstr "Java 21 ofrece una nueva característica que remodelará el desarrollo de aplicaciones concurrentes en Java. Durante más de dos años, el equipo de Quarkus exploró la integración de esta nueva característica para facilitar el desarrollo de aplicaciones distribuidas, incluidos los microservicios y las aplicaciones basadas en eventos."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This blog post is the first part of a series of posts and videos demonstrating how to use virtual threads in Quarkus applications.\n"
"The series covers REST, messaging, containers, native compilation, and our plans for the future.\n"
"But first, let's look at virtual threads, what they change, and what you should know about them."
msgstr "Esta entrada de blog es la primera parte de una serie de entradas y vídeos que demuestran cómo utilizar hilos virtuales en las aplicaciones Quarkus. La serie cubre REST, mensajería, contenedores, compilación nativa, y nuestros planes para el futuro. Pero primero, echemos un vistazo a los hilos virtuales, lo que cambian, y lo que usted debe saber acerca de ellos."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "The Java world before Java 21"
msgstr "El mundo Java antes de Java 21"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"At the beginning of the Java time, Java had _green threads_.\n"
"Green threads were user-level threads scheduled by the Java virtual machine (JVM) instead of natively by the underlying operating system (OS).\n"
"They emulated multithreaded environments without relying on native OS abilities.\n"
"They were managed in user space instead of kernel space, enabling them to work in environments that do not have native thread support.\n"
"Green threads were briefly available in Java between 1997 and 2000.\n"
"I used green threads; they did not leave me with a fantastic memory."
msgstr "Al principio de la época de Java, Java tenía hilos _verdes_ . Los hilos verdes eran hilos a nivel de usuario programados por la máquina virtual Java (JVM) en lugar de hacerlo de forma nativa por el sistema operativo (SO) subyacente. Emulaban entornos multihilo sin depender de las capacidades nativas del SO. Se gestionaban en el espacio de usuario en lugar de en el espacio del núcleo, lo que les permitía funcionar en entornos que no disponían de soporte nativo para hilos. Los hilos verdes estuvieron brevemente disponibles en Java entre 1997 y 2000. Yo utilicé hilos verdes; no me dejaron un recuerdo fantástico."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"In Java 1.3, released in 2000, Java made a big step forward and started integrating OS threads.\n"
"So, the threads are managed by the operating system.\n"
"It is still the model we are using today.\n"
"Each time a Java application creates a thread, a platform thread is created, which wraps an OS thread.\n"
"So, creating a platform thread creates an OS thread, and **blocking a platform thread blocks an OS thread**."
msgstr "En Java 1.3, publicado en 2000, Java dio un gran paso adelante y empezó a integrar los hilos del sistema operativo. Así, los hilos son gestionados por el sistema operativo. Éste sigue siendo el modelo que utilizamos hoy en día. Cada vez que una aplicación Java crea un hilo, se crea un hilo de plataforma, que envuelve a un hilo del SO. Así, al crear un hilo de plataforma se crea un hilo del SO, y al *bloquear un hilo de plataforma se bloquea un hilo del SO* ."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"When you use a Java application framework, you rarely create threads yourself.\n"
"It is done for you by the framework.\n"
"For example, when your application receives an HTTP request, the framework creates or reuses a platform thread (and so an OS thread) and executes the processing on that thread.\n"
"The whole processing runs on this thread, and the thread cannot be reused until the processing completes (so the response is sent back).\n"
"When the processing executes a blocking I/O operation, like calling another service, writing to the file system, or interacting with a database, the thread is blocked, waiting for the response.\n"
"As mentioned above, the OS thread is also blocked while waiting.\n"
"When this response is received, the processing continues:"
msgstr "Cuando utiliza un marco de aplicaciones Java, rara vez crea usted mismo los hilos. El marco de trabajo lo hace por usted. Por ejemplo, cuando su aplicación recibe una solicitud HTTP, el marco de trabajo crea o reutiliza un hilo de la plataforma (y por tanto un hilo del SO) y ejecuta el procesamiento en ese hilo. Todo el procesamiento se ejecuta en este hilo, y el hilo no se puede reutilizar hasta que el procesamiento finalice (por lo que se devuelve la respuesta). Cuando el procesamiento ejecuta una operación de E/S bloqueante, como llamar a otro servicio, escribir en el sistema de archivos o interactuar con una base de datos, el hilo se bloquea, esperando la respuesta. Como se ha mencionado anteriormente, el hilo del sistema operativo también se bloquea mientras espera. Cuando se recibe esta respuesta, el procesamiento continúa:"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This model has the advantage of being simple to program with.\n"
"The code follows an imperative model.\n"
"The code is executed sequentially.\n"
"It's simple to write, simple to reason about.\n"
"For example, the following snippet shows how you receive an HTTP request, call another HTTP service, and return a response with Quarkus.\n"
"It follows the sequence diagram from above."
msgstr "Este modelo tiene la ventaja de ser sencillo de programar. El código sigue un modelo imperativo. El código se ejecuta secuencialmente. Es sencillo de escribir y de razonar. Por ejemplo, el siguiente fragmento muestra cómo se recibe una solicitud HTTP, se llama a otro servicio HTTP y se devuelve una respuesta con Quarkus. Sigue el diagrama secuencial de arriba."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But there is a limit to that imperative model.\n"
"You can only handle _n_ requests concurrently, with _n_ the number of threads the framework can create.\n"
"OS threads are expensive.\n"
"They consume memory (around 1 Mb per thread), are expensive to create, use CPU to schedule them…\n"
"Frameworks use thread pools to allow reusing idle threads, but when the concurrency level exceeds your number of threads, you start pilling up requests, increasing the response time, and, in the worst case, even rejecting requests.\n"
"Increasing the thread pool size and, consequently, swelling the memory usage can blow up your Cloud bill and deployment density.\n"
"Futhermore, adding more threads may not even improve the concurrency as explained by the https://youtu.be/07V08SB1l8c?t=142[Little Law]."
msgstr "Pero ese modelo imperativo tiene un límite. Sólo puede manejar _n_ peticiones concurrentemente, siendo _n_ el número de hilos que el framework puede crear. Los hilos del SO son caros. Consumen memoria (alrededor de 1 Mb por hilo), son caros de crear, utilizan CPU para programarlos... Los frameworks utilizan pools de hilos para permitir la reutilización de hilos ociosos, pero cuando el nivel de concurrencia supera su número de hilos, se empiezan a acumular peticiones, aumentando el tiempo de respuesta y, en el peor de los casos, incluso rechazando peticiones. Aumentar el tamaño del pool de hilos y, en consecuencia, engrosar el uso de memoria puede disparar su factura en la nube y la densidad de despliegue. Además, añadir más hilos puede incluso no mejorar la concurrencia, como explica la link:https://youtu.be/07V08SB1l8c?t=142[Ley de Little] ."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"The reactive movement proposed an alternative model to work around that issue.\n"
"It promotes the usage of non-blocking I/O and asynchronous development models to use resources (CPU and memory) more efficiently.\n"
"With the reactive model, **a single thread can handle multiple concurrent requests**.\n"
"So, instead of having a large pool of threads, you have a minimum number of threads (generally equal to the number of CPU cores).\n"
"This small amount of threads, often named event loops, handles all your requests.\n"
"When a request is received, it calls the processing code on one of these threads.\n"
"When the processing needs to execute an I/O operation, instead of using blocking I/O, it schedules the operations and passes a **continuation**.\n"
"This continuation is the code to be invoked when the I/O completes, so basically, the rest of the processing:"
msgstr "El movimiento reactivo propuso un modelo alternativo para solucionar ese problema. Promueve el uso de E/S no bloqueantes y modelos de desarrollo asíncronos para utilizar los recursos (CPU y memoria) de forma más eficiente. Con el modelo reactivo, *un único hilo puede gestionar múltiples peticiones concurrentes* . Así, en lugar de tener un gran conjunto de hilos, se dispone de un número mínimo de hilos (generalmente igual al número de núcleos de la CPU). Este pequeño número de hilos, a menudo denominados bucles de eventos, gestiona todas sus peticiones. Cuando se recibe una solicitud, se llama al código de procesamiento en uno de estos hilos. Cuando el procesamiento necesita ejecutar una operación de E/S, en lugar de utilizar E/S de bloqueo, programa las operaciones y pasa una *continuación* . Esta continuación es el código que se invocará cuando finalice la E/S, es decir, básicamente, el resto del procesamiento:"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"The reactive model is highly efficient, but there is a catch.\n"
"As mentioned, you need to write your code as a chain of continuations.\n"
"While there are multiple approaches, such as callbacks, futures, reactive programming, or co-routines, it makes the code harder to reason about.\n"
"The code must be structured in a way that may not be natural for every developer.\n"
"That limits the adoption of this solution.\n"
"Also, the code can not only block during I/O operation; it must not execute lengthy processing (what we call monopolization).\n"
"The model's efficiency comes from the ability to process many requests concurrently.\n"
"If the thread is used for a long time, it does not allow the other requests to be processed, and, as for the imperative model, you start piling up requests."
msgstr "El modelo reactivo es muy eficiente, pero tiene truco. Como ya se ha mencionado, tiene que escribir su código como una cadena de continuaciones. Aunque existen múltiples enfoques, como las devoluciones de llamada, los futuros, la programación reactiva o las co-rutinas, esto hace que el código sea más difícil de razonar. El código debe estructurarse de un modo que puede no ser natural para todos los desarrolladores. Eso limita la adopción de esta solución. Además, el código no sólo puede bloquearse durante las operaciones de E/S, sino que no debe ejecutar procesamientos largos (lo que llamamos monopolización). La eficacia del modelo proviene de la capacidad de procesar muchas solicitudes de forma concurrente. Si el hilo se utiliza durante mucho tiempo, no permite que se procesen las demás peticiones y, al igual que en el modelo imperativo, se empiezan a acumular peticiones."

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "To illustrate the difference between the imperative and reactive model, the following snippet is equivalent to the previous one: it receives an HTTP request, calls another HTTP service, and returns a response. But this time, it uses the Quarkus reactive model."
msgstr "Para ilustrar la diferencia entre el modelo imperativo y el reactivo, el siguiente fragmento es equivalente al anterior: recibe una petición HTTP, llama a otro servicio HTTP y devuelve una respuesta. Pero esta vez, utiliza el modelo reactivo de Quarkus."

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "An application with this code handles more concurrent requests and uses less memory than the imperative one, but, the development model is different."
msgstr "Una aplicación con este código maneja más peticiones concurrentes y utiliza menos memoria que la imperativa, pero, el modelo de desarrollo es diferente."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Most of the time, the reactive and imperative models are opposed.\n"
"This does not need to be the case.\n"
"Quarkus uses a reactive core and lets you decide if you want to use the reactive or imperative model.\n"
"Check the https://quarkus.io/blog/resteasy-reactive-smart-dispatch/['to block or not to block' article] for more details about this ability."
msgstr "La mayoría de las veces, los modelos reactivo e imperativo son opuestos. Esto no tiene por qué ser así. Quarkus utiliza un núcleo reactivo y le permite decidir si desea utilizar el modelo reactivo o el imperativo. Consulte el link:https://quarkus.io/blog/resteasy-reactive-smart-dispatch/[artículo \"bloquear o no bloquear\"] para obtener más detalles sobre esta capacidad."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "What do virtual threads change?"
msgstr "¿Qué cambian los hilos virtuales?"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Java 19 introduced a new type of thread: virtual threads.\n"
"In Java 21, this API became generally available."
msgstr "Java 19 introdujo un nuevo tipo de hilo: los hilos virtuales. En Java 21, esta API pasó a estar disponible de forma general."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But what are these virtual threads?\n"
"Virtual threads reuse the idea of the reactive paradigm but allow an imperative development model.\n"
"You get the benefits from the reactive and imperative models without the drawbacks!"
msgstr "Pero, ¿qué son estos hilos virtuales? Los hilos virtuales reutilizan la idea del paradigma reactivo pero permiten un modelo de desarrollo imperativo. Usted obtiene los beneficios de los modelos reactivo e imperativo ¡sin los inconvenientes!"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Like with green threads, virtual threads are managed by the JVM.\n"
"Virtual threads occupy less space than platform threads in memory.\n"
"Hence, using more virtual threads than platform threads simultaneously becomes possible without blowing up the memory.\n"
"Virtual threads are supposed to be disposable entities that we create when we need them; pooling or reusing them for different tasks is discouraged."
msgstr "Al igual que los hilos verdes, los hilos virtuales son gestionados por la JVM. Los hilos virtuales ocupan menos espacio que los hilos de plataforma en la memoria. Por lo tanto, utilizar más hilos virtuales que hilos de plataforma simultáneamente es posible sin reventar la memoria. Se supone que los hilos virtuales son entidades desechables que creamos cuando los necesitamos; se desaconseja agruparlos o reutilizarlos para diferentes tareas."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But what does it change?\n"
"Blocking a virtual thread is, in general, very cheap!\n"
"There is a pinch of magic that makes virtual thread very appealing.\n"
"When your code running on a virtual thread needs to execute an I/O operation, it uses a blocking API.\n"
"So, the code waits for the result, as with the imperative model.\n"
"However, since the JVM manages virtual threads, no underlying OS thread is blocked when they perform this blocking operation.\n"
"The state of the virtual thread is stored in the heap, and another virtual thread can be executed on the same Java platform (carrier) thread, exactly as in the reactive model.\n"
"When the I/O operation completes, the virtual thread becomes executable again, and when a carrier thread is available, the state of the virtual thread is restored, and the execution continues.\n"
"For the developer, this magic is invisible!\n"
"You just write synchronous code, and it's executed like proper reactive code without blocking the OS thread."
msgstr "Pero, ¿qué cambia? Bloquear un hilo virtual es, en general, ¡muy barato! Hay una pizca de magia que hace que los hilos virtuales sean muy atractivos. Cuando su código ejecutándose en un hilo virtual necesita ejecutar una operación de E/S, utiliza una API de bloqueo. Así, el código espera el resultado, como con el modelo imperativo. Sin embargo, como la JVM gestiona los hilos virtuales, ningún hilo subyacente del SO se bloquea cuando realiza esta operación de bloqueo. El estado del hilo virtual se almacena en el montón, y otro hilo virtual puede ejecutarse en el mismo hilo (portador) de la plataforma Java, exactamente igual que en el modelo reactivo. Cuando la operación de E/S finaliza, el hilo virtual vuelve a ser ejecutable, y cuando un hilo portador está disponible, el estado del hilo virtual se restaura, y la ejecución continúa. Para el desarrollador, ¡esta magia es invisible! Sólo tiene que escribir código síncrono, y se ejecuta como un código reactivo adecuado sin bloquear el hilo del SO."

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Your code runs on top of virtual threads, but under the hood, only a few carrier threads execute them."
msgstr "Tu código se ejecuta sobre hilos virtuales, pero bajo el capó, sólo unos pocos hilos portadores los ejecutan."

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "To summarize, virtual threads are:"
msgstr "En resumen, los hilos virtuales son:"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Lightweight - you can have a LOT of them"
msgstr "Ligeros: se pueden tener MUCHOS"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Cheap to create - no need to pool them anymore"
msgstr "Baratas de crear: ya no es necesario ponerlas en común"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Cheap to block when using blocking operations - blocking a virtual thread does not block the underlying OS thread when executing I/O operations"
msgstr "El bloqueo de un subproceso virtual no bloquea el subproceso subyacente del sistema operativo cuando se ejecutan operaciones de E/S."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "How can you use virtual threads in Quarkus?"
msgstr "¿Cómo puede utilizar hilos virtuales en Quarkus?"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Using virtual threads in Quarkus is straightforward.\n"
"You only need to use the `@RunOnVirtualThread` annotation.\n"
"It indicates to Quarkus to invoke the annotated method on a virtual thread instead of a regular platform thread."
msgstr "Utilizar hilos virtuales en Quarkus es sencillo. Sólo tiene que utilizar la anotación `@RunOnVirtualThread` . Indica a Quarkus que invoque el método anotado en un hilo virtual en lugar de en un hilo normal de la plataforma."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This new strategy extends the _smart dispatch_ explained in the https://quarkus.io/blog/resteasy-reactive-smart-dispatch/['to block or not to block' article]. In addition to the signature, Quarkus now looks for this specific annotation.\n"
"If your JVM does not provide virtual thread support, it does fall back to platform threads."
msgstr "Esta nueva estrategia amplía el _despacho inteligente_ explicado en el link:https://quarkus.io/blog/resteasy-reactive-smart-dispatch/[artículo \"bloquear o no bloquear\"] . Además de la firma, Quarkus busca ahora esta anotación específica. Si su JVM no proporciona soporte para hilos virtuales, recurre a los hilos de la plataforma."

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Let's rewrite the same example using a virtual thread (the full code is available in https://github.com/quarkusio/virtual-threads-demos/tree/main/rest-example[this repository]):"
msgstr "Reescribamos el mismo ejemplo utilizando un hilo virtual (el código completo está disponible en  link:https://github.com/quarkusio/virtual-threads-demos/tree/main/rest-example[este repositorio]):"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "It's the code from the first snippet (the imperative one), but its execution model is closer to the reactive one:"
msgstr "Es el código del primer fragmento (el imperativo), pero su modelo de ejecución se acerca más al reactivo:"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"For every request, a virtual thread is created.\n"
"When a carrier thread is idle, the virtual thread is mounted on that carrier thread and executed.\n"
"When the virtual thread needs to execute the I/O (the call to the remote service), it only blocks the virtual thread.\n"
"The carrier thread is released, and can mount another virtual thread (like the one handling the second request while the I/O from the first one is pending).\n"
"When the I/O completes, a carrier thread (not necessarily the same one) restores the blocked virtual thread and continues its execution until the response is ready to be sent back to the client.\n"
"The code snippet works as described because the Quarkus REST client is virtual-thread-friendly; we will see exceptions in the next section."
msgstr "Para cada solicitud, se crea un hilo virtual. Cuando un hilo portador está inactivo, el hilo virtual se monta en ese hilo portador y se ejecuta. Cuando el hilo virtual necesita ejecutar la E/S (la llamada al servicio remoto), sólo bloquea el hilo virtual. El hilo portador se libera, y puede montar otro hilo virtual (como el que gestiona la segunda solicitud mientras la E/S del primero está pendiente). Cuando la E/S finaliza, un hilo portador (no necesariamente el mismo) restaura el hilo virtual bloqueado y continúa su ejecución hasta que la respuesta esté lista para ser enviada de vuelta al cliente. El fragmento de código funciona como se describe porque el cliente REST de Quarkus es compatible con los hilos virtuales; veremos las excepciones en la siguiente sección."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Virtual threads in Quarkus are not limited to HTTP endpoints.\n"
"The following snippet shows how you can process Kafka/Pulsar/AMQP messages on virtual threads:"
msgstr "Los hilos virtuales en Quarkus no se limitan a los puntos finales HTTP. El siguiente fragmento muestra cómo puede procesar mensajes Kafka/Pulsar/AMQP en hilos virtuales:"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Attentive readers may have seen that the virtual thread integration relies on _reactive_ extensions.\n"
"These extensions provide more flexibility (such as the control on which thread the processing is executed) to integrate virtual threads properly and efficiently.\n"
"It's important to understand that for the developer, it's invisible (except the `@RunOnVirtualThread` annotation)."
msgstr "Los lectores atentos habrán visto que la integración de hilos virtuales se basa en extensiones _reactivas_ . Estas extensiones proporcionan más flexibilidad (como el control sobre qué hilo se ejecuta el procesamiento) para integrar los hilos virtuales de forma adecuada y eficiente. Es importante entender que para el desarrollador son invisibles (excepto la anotación `@RunOnVirtualThread` )."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Five things you need to know before using virtual threads for everything"
msgstr "Cinco cosas que debe saber antes de utilizar hilos virtuales para todo"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Well, you probably see this coming.\n"
"There is no free lunch.\n"
"You need to know a few things before utilizing virtual threads for everything.\n"
"These are the reasons why, currently, there is no global switch to run exclusively on virtual threads in Quarkus."
msgstr "Probablemente lo vea venir. No hay almuerzo gratis. Necesita saber algunas cosas antes de utilizar hilos virtuales para todo. Estas son las razones por las que, actualmente, no existe un interruptor global para ejecutar exclusivamente en hilos virtuales en Quarkus."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "1. Pinning"
msgstr ""
"\n"
" Pinning"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"As described above, when a virtual thread executes a blocking operation, it gets unmounted from the carrier thread, preventing the carrier thread from being blocked.\n"
"However, sometimes, the virtual thread cannot be unmounted because its state cannot be stored in the heap.\n"
"It happens when the thread holds a monitor lock or has a native call in the stack:"
msgstr "Como se ha descrito anteriormente, cuando un hilo virtual ejecuta una operación de bloqueo, se desmonta del hilo portador, evitando que éste se bloquee. Sin embargo, a veces, el hilo virtual no puede desmontarse porque su estado no puede almacenarse en el montón. Esto ocurre cuando el hilo mantiene un bloqueo de monitor o tiene una llamada nativa en la pila:"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "In this case, the carrier thread is blocked, so the OS thread is blocked:"
msgstr "En este caso, el hilo portador está bloqueado, por lo que el hilo OS está bloqueado:"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Unfortunately, as of today, lots of Java libraries are pinning the carrier thread.\n"
"The Quarkus team and Red Hat, in general, have patched many libraries (such as Narayana (the transaction manager of Quarkus) or Hibernate ORM) to avoid pinning.\n"
"However, when you use a library, be careful.\n"
"It will take time until all the code gets reworked in a more virtual-thread-friendly way."
msgstr "Desafortunadamente, a día de hoy, muchas librerías Java están pinneando el hilo portador. El equipo de Quarkus y Red Hat, en general, han parcheado muchas bibliotecas (como Narayana (el gestor de transacciones de Quarkus) o Hibernate ORM) para evitar el pinning. Sin embargo, cuando utilice una biblioteca, tenga cuidado. Llevará tiempo hasta que todo el código se reelabore de una forma más respetuosa con los hilos virtuales."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "2. Monopolization"
msgstr ""
"\n"
" Monopolización"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"As for the reactive model, if the virtual thread executes intensive and long computation, it monopolizes that carrier.\n"
"The virtual thread scheduler is not preemptive.\n"
"So it cannot interrupt a running thread.\n"
"It needs to wait for an I/O or the completion of the computation.\n"
"Until then, this carrier thread cannot execute other virtual threads:"
msgstr "En cuanto al modelo reactivo, si el hilo virtual ejecuta un cálculo intensivo y largo, monopoliza ese portador. El programador del hilo virtual no es preventivo. Por tanto, no puede interrumpir un hilo en ejecución. Necesita esperar una E/S o la finalización del cómputo. Hasta entonces, este hilo portador no puede ejecutar otros hilos virtuales:"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Using a dedicated platform thread pool might be wiser when executing long computations."
msgstr "El uso de un grupo de hilos de plataforma dedicado puede ser más prudente cuando se ejecutan cálculos largos."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "3. Carrier thread pool elasticity"
msgstr ""
"\n"
" Elasticidad de la piscina de hilo portador"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "When there is pinning or monopolization, the JVM may create new carrier threads (as illustrated on the previous picture) to avoid having too many unscheduled virtual threads."
msgstr "Cuando hay pinning o monopolización, la JVM puede crear nuevos hilos portadores (como se ilustra en la imagen anterior) para evitar tener demasiados hilos virtuales no programados."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"These creations are creating platform/OS threads.\n"
"So, it's expensive and uses memory.\n"
"You especially need to pay attention to the second point.\n"
"You may hit the memory limit if you run on low resources and your code is not very virtual-thread-friendly, meaning that you should always check for pinning, monopolization, and memory usage.\n"
"If you don't, in a container with memory constraints, the application can be killed."
msgstr "Estas creaciones están creando hilos de plataforma/OS. Por lo tanto, es costoso y consume memoria. Debe prestar especial atención al segundo punto. Puede llegar al límite de memoria si ejecuta con pocos recursos y su código no es muy amigable con los hilos virtuales, lo que significa que siempre debe comprobar el anclaje, la monopolización y el uso de memoria. Si no lo hace, en un contenedor con restricciones de memoria, la aplicación puede morir."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "4. Object pooling"
msgstr ""
"\n"
" Puesta en común de objetos"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"For years, threads were scarce resources.\n"
"It was recommended to pool them and reuse them.\n"
"This good practice has encouraged the use of thread locals as an object-pooling mechanism.\n"
"Like https://github.com/FasterXML/jackson-core/issues/919[Jackson] or Netty, many libraries store expensive objects in thread locals.\n"
"These objects can only be accessed by the code running on the thread in which the objects are stored.\n"
"Because the number of threads was limited, it capped the number of creation.\n"
"Also, because threads were reused, the objects were cached and reused.\n"
"Unfortunately, these two assumptions are not valid with virtual threads:\n"
"You can have a lot of them, they are not reused.\n"
"It's even discouraged to pool them.\n"
"Thus, libraries utilizing these pooling patterns may underperform when using virtual threads.\n"
"You will see many allocations of large objects, as every virtual thread will get its own instance of the object."
msgstr "Durante años, los hilos fueron recursos escasos. Se recomendaba agruparlos y reutilizarlos. Esta buena práctica ha fomentado el uso de thread locals como mecanismo de agrupación de objetos. Como link:https://github.com/FasterXML/jackson-core/issues/919[Jackson] o Netty, muchas bibliotecas almacenan objetos caros en thread locals. A estos objetos sólo puede acceder el código que se ejecuta en el hilo en el que se almacenan los objetos. Como el número de hilos era limitado, se limitaba el número de creaciones. Además, como los hilos se reutilizaban, los objetos se almacenaban en caché y se reutilizaban. Desgraciadamente, estos dos supuestos no son válidos con los hilos virtuales: Se pueden tener muchos, pero no se reutilizan. Incluso se desaconseja agruparlos. Por lo tanto, las bibliotecas que utilizan estos patrones de agrupación pueden tener un rendimiento inferior al utilizar hilos virtuales. Verá muchas asignaciones de objetos grandes, ya que cada hilo virtual obtendrá su propia instancia del objeto."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Replacing this pattern is not an easy task.\n"
"As an example, this https://github.com/FasterXML/jackson-core/pull/1064[PR] from Mario Fusco proposes an SPI for Jackson.\n"
"Quarkus will implement the SPI to provide a virtual-thread-friendly pool mechanism."
msgstr "Sustituir este patrón no es tarea fácil. Como ejemplo, este link:https://github.com/FasterXML/jackson-core/pull/1064[PR] de Mario Fusco propone un SPI para Jackson. Quarkus implementará el SPI para proporcionar un mecanismo de pool amigable con los hilos virtuales."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "5. Stressing thread safety"
msgstr ""
"\n"
" Hacer hincapié en la seguridad del hilo"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Virtual threads provide a new way to build concurrent applications in Java.\n"
"You are not limited by the number of threads in the pool.\n"
"You do not have to use asynchronous development models."
msgstr "Los hilos virtuales proporcionan una nueva forma de crear aplicaciones concurrentes en Java. No está limitado por el número de hilos del pool. No tiene que utilizar modelos de desarrollo asíncronos."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But, before rewriting your application to leverage this new mechanism, ensure the code is thread-safe.\n"
"Many libraries and frameworks do not allow concurrent access to some objects.\n"
"For example, database connections should not be accessed concurrently.\n"
"You must be cautious when you have many virtual threads, especially when using the structured concurrency API (still in preview in Java 21)."
msgstr "Pero, antes de reescribir su aplicación para aprovechar este nuevo mecanismo, asegúrese de que el código es seguro para los hilos. Muchas bibliotecas y marcos de trabajo no permiten el acceso concurrente a algunos objetos. Por ejemplo, no se debe acceder de forma concurrente a las conexiones de bases de datos. Debe tener cuidado cuando tenga muchos hilos virtuales, especialmente cuando utilice la API de concurrencia estructurada (aún en fase de vista previa en Java 21)."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"When using structured concurrency, it becomes easy to run tasks in _parallel_.\n"
"However, you must be absolutely sure that these tasks to not access a shared state which do not support concurrent access:"
msgstr "Cuando se utiliza la concurrencia estructurada, resulta fácil ejecutar tareas en _paralelo_ . Sin embargo, debe estar absolutamente seguro de que estas tareas no accedan a un estado compartido que no admita el acceso concurrente:"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Summary and what's next"
msgstr "Resumen y próximos pasos"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This post described the new kind of thread available in Java 21 and how to use them in Quarkus.\n"
"Virtual threads are not a silver bullet, and while they can improve the concurrency, there are a few limitations you need to be aware of:"
msgstr "En este post se describen los nuevos tipos de hilos disponibles en Java 21 y cómo utilizarlos en Quarkus. Los hilos virtuales no son una bala de plata, y aunque pueden mejorar la concurrencia, existen algunas limitaciones que debe conocer:"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Many libraries are pinning the carrier thread; it will take time until the Java world becomes virtual-thread-friendly."
msgstr "Muchas bibliotecas están fijando el hilo portador; pasará tiempo hasta que el mundo Java se convierta en amigable para los hilos virtuales."

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Lengthy computations must be analyzed cautiously to avoid monopolization issues."
msgstr "Los cálculos largos deben analizarse con cautela para evitar problemas de monopolización."

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "The carrier thread pool elasticity may result in high memory usage."
msgstr "La elasticidad del pool de hilos portadores puede dar lugar a un uso elevado de memoria."

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "The thread-local object polling pattern can have terrible consequences on the allocations and memory usage."
msgstr "El patrón de sondeo de objetos a nivel local puede tener consecuencias terribles en las asignaciones y el uso de memoria."

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Virtual threads do not prevent thread safety issues."
msgstr "Los hilos virtuales no evitan los problemas de seguridad de los hilos."

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"It is the first part (and the most boring, hopefully) post of a multiple-post series.\n"
"Next, we will cover:"
msgstr "Es la primera parte (y la más aburrida, esperemos) de una serie de varios posts. A continuación, trataremos:"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-2/[How to write a crud application using virtual threads]"
msgstr "link:https://quarkus.io/blog/virtual-threads-2/[Cómo escribir una aplicación con hilos virtuales]"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-3/[How to test virtual threads applications]"
msgstr "link:https://quarkus.io/blog/virtual-threads-3/[Cómo probar aplicaciones de hilos virtuales]"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-4/[How to process Kafka messages using virtual threads]"
msgstr "link:https://quarkus.io/blog/virtual-threads-4/[Cómo procesar mensajes Kafka utilizando hilos virtuales]"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-5/[How to build a native executable when using virtual threads]"
msgstr "link:https://quarkus.io/blog/virtual-threads-2/[Cómo escribir una aplicación con hilos virtuales]"

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "https://quarkus.io/blog/virtual-threads-6/[How to containerize an application using virtual threads]"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "What are we exploring to improve the virtual thread support in Quarkus (_to be published_)"
msgstr "Qué estamos explorando para mejorar el soporte de hilos virtuales en Quarkus _(por publicar_)"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "To know more about the virtual thread support in Quarkus, check the https://quarkus.io/guides/virtual-threads[Virtual thread reference guide]."
msgstr "Para saber más sobre el soporte de hilos virtuales en Quarkus, consulta la  link:https://quarkus.io/guides/virtual-threads[Guía de referencia de hilos vir]tuales."
