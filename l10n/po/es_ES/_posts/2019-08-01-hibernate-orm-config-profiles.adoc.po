# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-02 07:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy, no-wrap
msgid "Tips to use Hibernate ORM with Quarkus profiles and live coding mode"
msgstr "Consejos para utilizar Hibernate ORM con los perfiles de Quarkus y el modo de codificación en vivo"

#. type: YAML Front Matter: synopsis
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy, no-wrap
msgid "Hibernate ORM lets you generate or update the database schema. Let's explore when to use such option in combination with live coding."
msgstr "Hibernate ORM permite generar o actualizar el esquema de la base de datos. Exploremos cuándo utilizar esta opción en combinación con la codificación en vivo."

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"Quarkus live coding (aka dev mode) is really useful for applications that mix front end or services and database access.\n"
"There are a few common approaches to make the best of it."
msgstr "Quarkus live coding (también conocido como modo dev) es realmente útil para aplicaciones que mezclan front-end o servicios y acceso a bases de datos. Existen algunos enfoques comunes para sacarle el máximo partido."

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`.\n"
"That way for every change to your app and in particular to your entities, the database schema will be properly recreated\n"
"and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.\n"
"This is best to perfectly control your environment and works magic with Quarkus live coding mode:\n"
"your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr "La primera opción es utilizar `quarkus.hibernate-orm.database.generation=drop-and-create` junto con `import.sql` . De ese modo, para cada cambio en su aplicación y, en particular, en sus entidades, el esquema de la base de datos se recreará correctamente y su fijación de datos (almacenada en `import.sql` ) se utilizará para repoblarla desde cero. Esto es lo mejor para controlar perfectamente su entorno y funciona de maravilla con el modo de codificación en vivo de Quarkus: ¡los cambios en sus entidades o cualquier cambio en su `import.sql` se recogen inmediatamente y el esquema se actualiza sin reiniciar la aplicación!"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"By default, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).\n"
"You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr "Por defecto, Hibernate ORM, al arrancar, leerá y ejecutará las sentencias SQL en el archivo `/import.sql` (si está presente). Puede cambiar el nombre del archivo modificando la propiedad `quarkus.hibernate-orm.sql-load-script` en `application.properties` ."

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"The second approach is to use `quarkus.hibernate-orm.database.generation=update`.\n"
"This approach is best when you do many entity changes but\n"
"still need to work on a copy of the production data\n"
"or if you want to reproduce a bug that is based on specific database entries.\n"
"`update` is a best effort from Hibernate ORM and will fail in specific situations\n"
"including altering your database structure which could lead to data loss.\n"
"For example if you change structures related to the foreign key, Hibernate ORM might have to bail out.\n"
"But for development, these limitations are acceptable."
msgstr "El segundo enfoque consiste en utilizar `quarkus.hibernate-orm.database.generation=update` . Este enfoque es el mejor cuando realiza muchos cambios en las entidades pero aún necesita trabajar con una copia de los datos de producción o si desea reproducir un error que se basa en entradas específicas de la base de datos. `update` es el mejor esfuerzo de Hibernate ORM y fallará en situaciones específicas que incluyen la alteración de la estructura de su base de datos, lo que podría provocar la pérdida de datos. Por ejemplo, si cambia las estructuras relacionadas con la clave foránea, es posible que Hibernate ORM tenga que abandonar. Pero para el desarrollo, estas limitaciones son aceptables."

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"The third approach is to use `quarkus.hibernate-orm.database.generation=none`.\n"
"This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.\n"
"Or if you use a database schema migration tool like https://quarkus.io/guides/flyway[Flyway].\n"
"When you make a change to an entity, make sure to adapt the database schema accordingly."
msgstr "El tercer enfoque consiste en utilizar `quarkus.hibernate-orm.database.generation=none` . Este enfoque es el mejor cuando se trabaja sobre una copia de los datos de producción pero se desea controlar totalmente la evolución del esquema. O si utiliza una herramienta de migración de esquemas de bases de datos como link:https://quarkus.io/guides/flyway[Flyway] . Cuando realice un cambio en una entidad, asegúrese de adaptar el esquema de la base de datos en consecuencia."

#. type: Plain text
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment. You have been warned :)"
msgstr "No utilice `quarkus.hibernate-orm.database.generation` `drop-and-create` y `update` en su entorno de producción. Está advertido :)"

#. type: Title ==
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy, no-wrap
msgid "Now with Quarkus profiles"
msgstr "Ahora con los perfiles de Quarkus"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"It becomes really powerful when combined with Quarkus configuration profiles.\n"
"You can define different https://quarkus.io/guides/config#configuration-profiles[configuration profiles]\n"
"to select different behaviors depending on your environment.\n"
"This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr "Se vuelve realmente potente cuando se combina con los perfiles de configuración de Quarkus. Puede definir diferentes perfiles de link:https://quarkus.io/guides/config#configuration-profiles[configuración] para seleccionar diferentes comportamientos en función de su entorno. Esto es estupendo porque puede definir diferentes combinaciones de propiedades ORM de Hibernate que se ajusten al estilo de desarrollo que necesite en cada momento."

#. type: Block title
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy, no-wrap
msgid "application.properties"
msgstr "aplicación.propiedades"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"I hope you have found this tip useful.\n"
"Hibernate ORM schema update, data fixture, Quarkus dev mode and its configuration profiles are a powerful combination!"
msgstr "Espero que este consejo le haya resultado útil. La actualización de esquemas de Hibernate ORM, la fijación de datos, el modo dev de Quarkus y sus perfiles de configuración ¡son una potente combinación!"
