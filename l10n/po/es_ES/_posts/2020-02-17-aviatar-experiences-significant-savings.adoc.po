# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-02 07:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy, no-wrap
msgid "Lufthansa Technik AVIATAR experiences significant cloud resources savings by moving to Kubernetes-native Quarkus"
msgstr "Lufthansa Technik AVIATAR experimenta un importante ahorro de recursos en la nube al pasar a Quarkus, nativo de Kubernetes"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Lufthansa Technik, the world’s largest independent provider of airline maintenance, repair, and overhaul (MRO) services, runs a SaaS digital platform, called AVIATAR, for the aviation industry. This platform helps airlines avoid delays and cancellations by using data to better organize and schedule maintenance. The company built and operated AVIATAR using a hybrid cloud infrastructure based on enterprise open source software from Red Hat."
msgstr "Lufthansa Technik, el mayor proveedor independiente del mundo de servicios de mantenimiento, reparación y revisión (MRO) para aerolíneas, gestiona una plataforma digital SaaS, llamada AVIATAR, para el sector de la aviación. Esta plataforma ayuda a las aerolíneas a evitar retrasos y cancelaciones utilizando datos para organizar y programar mejor el mantenimiento. La empresa construyó y operó AVIATAR utilizando una infraestructura de nube híbrida basada en software empresarial de código abierto de Red Hat."

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "In the last 3 years, AVIATAR business has been growing fast and they needed to accommodate the growing demand from their customers. To this end, they had to grow their development force from 5 developers when they first started to over 100 at present. As they grew, they realized that one single large team was not the most productive and efficient way to organize their software development efforts because many developers had to spend time waiting for each other’s work to be finished due to the many interdependencies in the overall system. To address this situation, they decided to split development from one team to several cross-functional teams. At the same time, they also started working on ways to make the newly created smaller development teams more independent by giving each team autonomy to run their own services. This resulted in their evolution into a microservices architecture, where most of their microservices were based on Spring Boot and Java EE. They have gone from 10 services in the beginning to over 100 as of this writing."
msgstr "En los últimos 3 años, el negocio de AVIATAR ha crecido rápidamente y necesitaban acomodar la creciente demanda de sus clientes. Para ello, han tenido que ampliar su equipo de desarrollo de 5 desarrolladores cuando empezaron a más de 100 en la actualidad. A medida que crecían, se dieron cuenta de que un solo equipo grande no era la forma más productiva y eficiente de organizar sus esfuerzos de desarrollo de software porque muchos desarrolladores tenían que pasar tiempo esperando a que el trabajo de los demás estuviera terminado debido a las muchas interdependencias en el sistema general. Para hacer frente a esta situación, decidieron dividir el desarrollo de un equipo en varios equipos interfuncionales. Al mismo tiempo, también empezaron a trabajar en formas de hacer que los equipos de desarrollo más pequeños recién creados fueran más independientes, dando a cada equipo autonomía para ejecutar sus propios servicios. Esto dio lugar a su evolución hacia una arquitectura de microservicios, donde la mayoría de sus microservicios se basaban en Spring Boot y Java EE. Han pasado de 10 servicios al principio a más de 100 en el momento de escribir este artículo."

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "The small and autonomous development teams have been able to take responsibility for their own services from development all the way to production to achieve more agility and respond faster to the business."
msgstr "Los equipos de desarrollo pequeños y autónomos han podido responsabilizarse de sus propios servicios, desde el desarrollo hasta la producción, para conseguir más agilidad y responder más rápidamente al negocio."

#. type: Title ==
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy, no-wrap
msgid "High consumption of cloud resources for existing services"
msgstr "Alto consumo de recursos en la nube para los servicios existentes"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Lufthansa Technik run their microservices on OpenShift on Azure and, as they were looking at different ways to scale their development efforts, they were also looking at ways to save cloud resource consumption. As they were migrating to microservices, they noticed microservices were consuming high memory and compute cloud resources. For high-availability and emergency procedure purposes, they run at least 3 instances of each microservice on the cloud which means that for each of these microservices, there’s a 3x cloud resource consumption rate. For example, one of their microservices was consuming ½ core plus 1 GB of RAM per instance, which required 1.5 cores and 3 GB of RAM when running it in HA on the cloud (3 instances)."
msgstr "Lufthansa Technik ejecuta sus microservicios en OpenShift sobre Azure y, mientras buscaban diferentes formas de escalar sus esfuerzos de desarrollo, también buscaban formas de ahorrar el consumo de recursos en la nube. A medida que migraban a los microservicios, se dieron cuenta de que los microservicios consumían muchos recursos de la nube de memoria y de computación. Por motivos de alta disponibilidad y procedimientos de emergencia, ejecutan al menos 3 instancias de cada microservicio en la nube, lo que significa que para cada uno de estos microservicios hay un consumo de recursos en la nube de 3 veces. Por ejemplo, uno de sus microservicios consumía ½ núcleo más 1 GB de RAM por instancia, lo que requería 1,5 núcleos y 3 GB de RAM al ejecutarlo en HA en la nube (3 instancias)."

#. type: Title ==
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy, no-wrap
msgid "Optimizing cloud resource consumption with Quarkus"
msgstr "Optimización del consumo de recursos en la nube con Quarkus"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Thorsten Pohl, Product Owner Automation & Platform Architect at Digital Product Division AVIATAR, first heard about Quarkus and its benefits in April 2019 at Red Hat Summit. Among its many benefits, the ones that piqued his interest were its low memory consumption and fast times to first response, both in JVM and native modes. He took this information back to AVIATAR and they decided to try it out. There were two initial microservices that their Technology Council recommended for a Quarkus tryout. The first one would be a brand new microservice called the _“Customer Configuration”_ service, and the second one would be the _“Service Discovery”_ service which would be a migration from a service running in an application server to Quarkus."
msgstr "Thorsten Pohl, Product Owner Automation &amp; Platform Architect en la división de productos digitales AVIATAR, escuchó por primera vez sobre Quarkus y sus beneficios en abril de 2019 en Red Hat Summit. Entre sus muchas ventajas, las que despertaron su interés fueron su bajo consumo de memoria y sus rápidos tiempos de primera respuesta, tanto en modo JVM como nativo. Llevó esta información a AVIATAR y decidieron probarlo. Había dos microservicios iniciales que su Consejo Tecnológico recomendó para probar Quarkus. El primero sería un microservicio completamente nuevo llamado servicio de _\"Configuración de clientes_ \", y el segundo sería el servicio de _\"Descubrimiento de servicios_ \", que sería una migración de un servicio que se ejecutaba en un servidor de aplicaciones a Quarkus."

#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
msgid "The Customer Configuration service"
msgstr ""

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "This service is for a customer to set up their own settings, e.g. desired level of prediction. This service is targeted for their managed customers and it was selected to be developed in Quarkus because it was low risk. From their perspective, if this service went down, there would be no major impact to customers. It was developed by 2 developers using Quarkus 0.20 in a single sprint (approximately 3 weeks) and they are planning to upgrade it to Quarkus v1.x. This service is currently running in native mode in production."
msgstr "Este servicio sirve para que el cliente establezca sus propios ajustes, por ejemplo, el nivel de predicción deseado. Este servicio está dirigido a sus clientes gestionados y fue seleccionado para ser desarrollado en Quarkus porque era de bajo riesgo. Desde su punto de vista, si este servicio se cayera, no habría un impacto importante para los clientes. Fue desarrollado por 2 desarrolladores utilizando Quarkus 0.20 en un solo sprint (aproximadamente 3 semanas) y están planeando actualizarlo a Quarkus v1.x. Este servicio está actualmente funcionando en modo nativo en producción."

#. type: Title ===
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy, no-wrap
msgid "The Service Discovery service"
msgstr "El servicio de descubrimiento de servicios"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "The Service Discovery service is used to allow automatic discovery between the microservices AVIATAR consist of. It is considered high risk because if it breaks down, it would have a major impact on customers. Also, the original version of this service ran in production as a highly available service in an application server, consuming a lot of cloud resources. The Quarkus version of this service has been running in native mode in Development for about 3 months with no problems and on January 18, 2020, it was deployed to production to replace the instance running on the application server. It should also be mentioned that this Quarkus service started in JVM mode because it was using MongoDB and there was no MongoDB client Quarkus extension when its development started. But as soon as the MongoDB client Quarkus extension became available, they were able to switch the entire service to native mode. This speaks to the fast innovation and new contributions that are part of the Quarkus open source community project."
msgstr "El servicio Service Discovery se utiliza para permitir el descubrimiento automático entre los microservicios de los que se compone AVIATAR. Se considera de alto riesgo porque si se rompe, tendría un gran impacto en los clientes. Además, la versión original de este servicio se ejecutaba en producción como un servicio de alta disponibilidad en un servidor de aplicaciones, consumiendo muchos recursos de la nube. La versión de Quarkus de este servicio ha estado funcionando en modo nativo en Desarrollo durante unos 3 meses sin problemas y el 18 de enero de 2020 se desplegó en producción para sustituir la instancia que se ejecutaba en el servidor de aplicaciones. También hay que mencionar que este servicio de Quarkus comenzó en modo JVM porque utilizaba MongoDB y no había ninguna extensión de Quarkus cliente de MongoDB cuando se inició su desarrollo. Pero tan pronto como la extensión Quarkus cliente MongoDB estuvo disponible, fueron capaces de cambiar todo el servicio a modo nativo. Esto habla de la rápida innovación y las nuevas contribuciones que forman parte del proyecto de la comunidad de código abierto Quarkus."

#. type: Title ==
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy, no-wrap
msgid "Why not Spring Boot?"
msgstr "¿Por qué no Spring Boot?"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Lufthansa Technik sees Quarkus as a great fit in their journey to running their services in a serverless mode. They have many services that aren’t invoked that often but they still need to have 3 instances of each up and running all the time for high-availability requirements leading to high cloud resource consumption costs. They plan to turn these seldom accessed services to Function-as-a-service calls so that they can be invoked on demand leading to a reduction of cloud. If they were using Spring Boot, it would take too long to boot up, making it prohibitive to use in a serverless mode."
msgstr "Lufthansa Technik ve a Quarkus como un gran ajuste en su viaje para ejecutar sus servicios en un modo sin servidor. Tienen muchos servicios que no se invocan tan a menudo, pero todavía necesitan tener 3 instancias de cada uno en funcionamiento todo el tiempo para los requisitos de alta disponibilidad que conducen a altos costos de consumo de recursos de la nube. Planean convertir estos servicios a los que se accede con poca frecuencia en llamadas de función como servicio para que puedan ser invocados bajo demanda, lo que lleva a una reducción de la nube. Si utilizaran Spring Boot, tardaría demasiado en arrancar, lo que haría prohibitivo su uso en modo serverless."

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Likewise, they have experienced lower memory and compute cloud resource consumption when using Quarkus - plus its use of GraalVM - and according to Thorsten, _“with Quarkus, they could run 3 times denser deployments without sacrificing availability and response times of services”_, as the denser deployments come from the combination of the two technologies."
msgstr "Asimismo, han experimentado un menor consumo de recursos de memoria y computación en la nube al utilizar Quarkus -además de su uso de GraalVM- y, según Thorsten, _\"con Quarkus, podían ejecutar despliegues 3 veces más densos sin sacrificar la disponibilidad y los tiempos de respuesta de los servicios\",_ ya que los despliegues más densos provienen de la combinación de las dos tecnologías."

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Their developers are Spring Boot developers with Java EE experience as well, so the learning curve for Quarkus was very small since its syntax and approach was _“close to what our developers are already doing and it’s familiar to them. This is a big benefit”_, Thorsten affirmed."
msgstr "Sus desarrolladores son desarrolladores de Spring Boot con experiencia en Java EE también, por lo que la curva de aprendizaje para Quarkus fue muy pequeña ya que su sintaxis y enfoque era _\"cercano a lo que nuestros desarrolladores ya están haciendo y les resulta familiar\". Esto es una gran ventaja\",_ afirmó Thorsten."

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "With respect to the recently introduced Spring API compatibility feature in Quarkus, Thorsten said that _“they may use the Spring API compatibility in Quarkus when migrating their current Spring Boot microservices to Quarkus. However, for developing new microservices, they plan to use just the Quarkus APIs directly because it would be awkward to use another API within Quarkus.”_"
msgstr "Con respecto a la función de compatibilidad con la API de Spring introducida recientemente en Quarkus, Thorsten dijo que _\"es posible que utilicen la compatibilidad con la API de Spring en Quarkus cuando migren sus actuales microservicios de Spring Boot a Quarkus. Sin embargo, para el desarrollo de nuevos microservicios, planean utilizar sólo las API de Quarkus directamente porque sería incómodo utilizar otra API dentro de Quarkus.\"_"

#. type: Title ==
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy, no-wrap
msgid "The Quarkus Benefits"
msgstr "Las ventajas de Quarkus"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Among the many benefits that Quarkus provides to Lufthansa Technik, Thorsten mentioned that _“they could cut cloud resource costs threefold.\"_ And the same goes with OpenShift because of the higher density you can achieve on each core using Quarkus. For example, they had a microservice that was consuming ½ core plus 1 GB of RAM per instance, which required 1.5 cores and 3 GB of RAM when running it in HA on the cloud (3 instances). When using the Quarkus version of the same microservice, its consumption was of 200 millicores plus 200-400 MB of RAM per instance. This translates to 0.6 cores plus 600 MB – 1.2 GB of RAM for an HA deployment of 3 instances of the microservice _“. They could run 3 times denser deployments without sacrificing availability and response times of services”_, Thornsten reiterated. These are the types of optimizations that can only be achieved by the symbiotic combination of Quarkus and GraalVM."
msgstr "Entre los muchos beneficios que Quarkus proporciona a Lufthansa Technik, Thorsten mencionó que _\"podrían reducir los costes de recursos en la nube tres veces\"._ Y lo mismo ocurre con OpenShift debido a la mayor densidad que se puede lograr en cada núcleo utilizando Quarkus. Por ejemplo, tenían un microservicio que consumía ½ núcleo más 1 GB de RAM por instancia, que requería 1,5 núcleos y 3 GB de RAM al ejecutarlo en HA en la nube (3 instancias). Al utilizar la versión de Quarkus del mismo microservicio, su consumo era de 200 milicores más 200-400 MB de RAM por instancia. Esto se traduce en 0,6 núcleos más 600 MB - 1,2 GB de RAM para un despliegue en HA de 3 instancias del microservicio _\". Podrían ejecutar despliegues 3 veces más densos sin sacrificar la disponibilidad y los tiempos de respuesta de los servicios\",_ reiteró Thornsten. Estos son los tipos de optimizaciones que sólo pueden lograrse mediante la combinación simbiótica de Quarkus y GraalVM."

#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
msgid ""
"Thorsten also described Quarkus live coding capabilities as a _“really good thing”_. Many of their applications have web-based user interfaces and _“making changes and reloading pages instantaneously is a great feature”_, Thorsten affirmed.\n"
"Another benefit, already mentioned earlier, was the small Quarkus learning curve experienced by their developers, who are Spring Boot developers with Java EE experience. What makes this possible is the stack of technologies included in Quarkus, composed of best-of-breed and familiar technologies for Kubernetes-native microservices. Some of the Quarkus extensions used by the AVIATAR developers are: Java Web Token (JWT), JAX-RS, MongoDB client, MicroProfile Rest Client, Keycloak (security), Hibernate ORM (for relational databases), MicroProfile Metrics, and MicroProfile Health Check."
msgstr ""

#. type: Title ==
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy, no-wrap
msgid "Looking into the future"
msgstr "Mirando al futuro"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "They plan to use Quarkus for the development of new services per the guidance of their Technology Council. In general, for new services they’d like to first work on the ones that are low or no risk to customers. They also plan to upgrade their Service Discovery service to Quarkus v1.x and deploy it to production, which actually took place on January 18, 2020. Lastly, they will use the Quarkus APIs directly and for migrating Spring Boot services to Quarkus, they may leverage the Quarkus Spring API compatibility feature."
msgstr "Tienen previsto utilizar Quarkus para el desarrollo de nuevos servicios siguiendo las orientaciones de su Consejo de Tecnología. En general, para los nuevos servicios les gustaría trabajar primero en los que tienen poco o ningún riesgo para los clientes. También tienen previsto actualizar su servicio de Service Discovery a Quarkus v1.x y desplegarlo en producción, lo que realmente tuvo lugar el 18 de enero de 2020. Por último, utilizarán las API de Quarkus directamente y para migrar los servicios de Spring Boot a Quarkus, podrían aprovechar la función de compatibilidad con las API de Spring de Quarkus."

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "They look forward to continuing to optimize their cloud resource consumption by using the Quarkus stack in their services."
msgstr "Esperan seguir optimizando su consumo de recursos en la nube utilizando la pila de Quarkus en sus servicios."

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "For more information on Quarkus:"
msgstr "Para más información sobre Quarkus:"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Quarkus website: http://quarkus.io"
msgstr "Página web de Quarkus:  http://quarkus.io"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr "Proyecto GitHub de Quarkus:  https://github.com/quarkusio/quarkus"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr "Twitter de Quarkus:  https://twitter.com/QuarkusIO"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr "Chat de Quarkus:  https://quarkusio.zulipchat.com/"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr "Lista de correo de Quarkus:  https://groups.google.com/forum/#!forum/quarkus-dev"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "https://youtube.com/quarkusio[Quarkus YouTube Channel]"
msgstr "link:https://youtube.com/quarkusio[Canal de YouTube de Quarkus]"

#. type: Plain text
#: _posts/2020-02-17-aviatar-experiences-significant-savings.adoc
#, fuzzy
msgid "https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr "link:https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Cuatro razones para usar Quarkus]"
