# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-02 07:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Quarkus Dependency Injection"
msgstr "Inyección de dependencia de Quarkus"

#. type: YAML Front Matter: synopsis
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Quarkus ArC is a build-time oriented dependency injection based on CDI 2.0. But what does it actually mean and what benefits does a build-time processing DI bring?"
msgstr "layout: post date: 2019-07-25 00:00 +0100 author: mkouba tags: extension arc development-tips synopsis: Quarkus ArC es una inyección de dependencias orientada al tiempo de compilación basada en CDI 2.0. Pero, ¿qué significa realmente y qué beneficios aporta una DI de procesamiento en tiempo de compilación? ---"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"Quarkus ArC is a build-time oriented dependency injection based on http://cdi-spec.org/[CDI 2.0].\n"
"In this blogpost, we're going to explain the relationship to the specification and describe some of the benefits and drawbacks of the build-time processing design."
msgstr "Quarkus ArC es una inyección de dependencias orientada al tiempo de compilación basada en link:http://cdi-spec.org/[CDI 2.0] . En este blogpost, vamos a explicar la relación con la especificación y describir algunos de los beneficios y desventajas del diseño de procesamiento en tiempo de compilación."

#. type: Title ==
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, no-wrap
msgid "Compatibility"
msgstr "Compatibilidad"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"It does not make sense to reinvent the wheel, especially when it comes to dependency injection.\n"
"There are many frameworks that try to solve similar problems.\n"
"A year ago, we made a design decision to build Quarkus DI on top of CDI.\n"
"We had some very good reasons to choose CDI:"
msgstr "No tiene sentido reinventar la rueda, especialmente cuando se trata de la inyección de dependencias. Hay muchos frameworks que intentan resolver problemas similares. Hace un año, tomamos la decisión de diseño de construir Quarkus DI sobre CDI. Teníamos muy buenas razones para elegir CDI:"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "CDI is a mature and proven component model"
msgstr "El CDI es un modelo de componentes maduro y probado"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "We at Red Hat have almost ten years of experience with developing http://weld.cdi-spec.org/[Weld - the CDI Reference Implementation]"
msgstr "En Red Hat tenemos casi diez años de experiencia en el desarrollo de  link:http://weld.cdi-spec.org/[Weld: la implementación de referencia de CDI]"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "The CDI API is built on top of `javax.inject` so that it should be easy to migrate from any DI framework compatible with `@Inject`"
msgstr "La API de CDI está construida sobre `javax.inject`, por lo que debería ser fácil migrar desde cualquier marco de trabajo de DI compatible con `@Inject`"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"Our primary goal was to implement a supersonic build-time oriented DI solution compatible with CDI.\n"
"This would allow users to continue using CDI in their applications but also leverage Quarkus build-time optimizations.\n"
"However, ArC is not a full CDI implementation verified by the TCK - see also the list of https://quarkus.io/guides/cdi-reference#supported_features[supported features] and the list of https://quarkus.io/guides/cdi-reference#limitations[limitations]."
msgstr "Nuestro objetivo principal era implementar una solución DI supersónica orientada al tiempo de compilación compatible con CDI. Esto permitiría a los usuarios seguir utilizando CDI en sus aplicaciones pero también aprovechar las optimizaciones de tiempo de compilación de Quarkus. Sin embargo, ArC no es una implementación completa de CDI verificada por el TCK - véase también la lista de link:https://quarkus.io/guides/cdi-reference#supported_features[características compatibles] y la lista de link:https://quarkus.io/guides/cdi-reference#limitations[limitaciones] ."

#. type: Title ==
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Build-time Processing Benefits and Drawbacks"
msgstr "Ventajas e inconvenientes del procesamiento en tiempo de construcción"

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Fail Fast"
msgstr "Fallar rápido"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "Beans and dependencies are validated during the build so that your application can never fail in production with common problems such as `AmbiguousResolutionException` or `UnsatisfiedResolutionException`."
msgstr "Los beans y las dependencias se validan durante la compilación para que su aplicación nunca pueda fallar en producción con problemas comunes como `AmbiguousResolutionException` o `UnsatisfiedResolutionException`."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Instant Startup"
msgstr "Inicio instantáneo"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"When the app starts ArC just loads all the metadata and initializes some internal structures.\n"
"There is no need to analyze the application classes again.\n"
"This means negligible startup overhead."
msgstr "Cuando la aplicación se inicia, ArC sólo carga todos los metadatos e inicializa algunas estructuras internas. No es necesario analizar de nuevo las clases de la aplicación. Esto significa una sobrecarga de arranque insignificante."

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "This applies to both the GraalVM and OpenJDK HotSpot runtimes."
msgstr "Esto se aplica tanto a los tiempos de ejecución de GraalVM como de OpenJDK HotSpot."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Minimized Runtime"
msgstr "Tiempo de ejecución minimizado"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"In Quarkus 0.19, ArC plus integration runtime consist of 72 classes and occupies ~ 140 KB in jars.\n"
"http://weld.cdi-spec.org/[Weld 3.1.1] (CDI Reference Implementation) core is roughly 1200 classes and approx. 2 MB jar.\n"
"In other words, ArC runtime takes approx. 7% of the Weld runtime in terms of number of classes and jar footprint."
msgstr "En Quarkus 0.19, ArC más el tiempo de ejecución de integración constan de 72 clases y ocupan ~ 140 KB en jars. El núcleo de Weld link:http://weld.cdi-spec.org/[3.1.1] (implementación de referencia de CDI) consta de unas 1200 clases y ocupa aprox. 2 MB en jar. En otras palabras, el tiempo de ejecución de ArC ocupa aprox. el 7% del tiempo de ejecución de Weld en cuanto a número de clases y huella en jar."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Optimized Code Paths and Metadata Structures"
msgstr "Rutas de código y estructuras de metadatos optimizadas"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"When generating the metadata classes ArC can sometimes produce leaner and smarter logic because it has the whole application analyzed already.\n"
"This is one of the areas where we would like to develop and improve ArC."
msgstr "Al generar las clases de metadatos, ArC puede producir a veces una lógica más ágil e inteligente porque ya tiene toda la aplicación analizada. Esta es una de las áreas en las que nos gustaría desarrollar y mejorar ArC."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Extension Points"
msgstr "Puntos de extensión"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"Unfortunately, CDI portable extensions are inherently runtime constructs and therefore cannot be fully supported in Quarkus.\n"
"In fact, all CDI extensions are ignored at the moment.\n"
"Nevertheless, most of the functionality can be achieved using https://quarkus.io/guides/cdi-reference#build-time-extension-points[Quarkus extensions].\n"
"The CDI extensions are encouraged to generalize the code, and if possible provide a Quarkus extension to make full use of build-time metadata processing."
msgstr "Lamentablemente, las extensiones portátiles CDI son construcciones inherentes al tiempo de ejecución y, por lo tanto, no pueden ser totalmente compatibles con Quarkus. De hecho, todas las extensiones CDI se ignoran por el momento. No obstante, la mayor parte de la funcionalidad puede conseguirse utilizando las extensiones de link:https://quarkus.io/guides/cdi-reference#build-time-extension-points[Quarkus] . Se anima a las extensiones CDI a generalizar el código y, si es posible, a proporcionar una extensión de Quarkus para hacer pleno uso del procesamiento de metadatos en tiempo de compilación."

#. type: Title ==
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, no-wrap
msgid "Non-standard Features"
msgstr "Características no estándar"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"ArC is not limited to standards and we're constantly looking for ways to go beyond and extend the possibilities.\n"
"Following are some examples of non-standard features provided by Quarkus DI."
msgstr "ArC no se limita a los estándares y buscamos constantemente formas de ir más allá y ampliar las posibilidades. A continuación se muestran algunos ejemplos de características no estándar proporcionadas por Quarkus DI."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Qualified Injected Fields"
msgstr "Campos inyectados cualificados"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "Normally, if you declare an injected field you'll always need to use `@Inject` and optionally required qualifiers:"
msgstr "Normalmente, si declaras un campo inyectado siempre tendrás que utilizar `@Inject` y los calificadores opcionales requeridos:"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "In Quarkus, you can skip the `@Inject` annotation completely if an injected field declares at least one qualifier:"
msgstr "En Quarkus, se puede omitir completamente la anotación `@Inject` si un campo inyectado declara al menos un calificador:"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "`@Inject` is still required for constructor and method injection."
msgstr "`@Inject` sigue siendo necesario para la inyección de constructores y métodos."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Simplified Constructor Injection"
msgstr "Inyección de constructores simplificada"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"In CDI, a normal scoped bean must always declare a no-args constructor (this constructor is normally generated by the compiler unless you declare any other constructor).\n"
"However, this requirement complicates constructor injection - you would need to provide a dummy no-args constructor to make things work in CDI."
msgstr "En CDI, un frijol de ámbito normal debe declarar siempre un constructor no-args (este constructor es generado normalmente por el compilador a menos que usted declare cualquier otro constructor). Sin embargo, este requisito complica la inyección de constructores - tendría que proporcionar un constructor no-args ficticio para que las cosas funcionen en CDI."

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"There is no need to declare dummy constructors for normal scoped bean in Quarkus - they are generated automatically.\n"
"Also if there's only one constructor there is no need for `@Inject`."
msgstr "No hay necesidad de declarar constructores ficticios para un frijol de ámbito normal en Quarkus - se generan automáticamente. También si sólo hay un constructor no hay necesidad de `@Inject` ."

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "We don't generate a no-args constructor automatically if a bean class extends another class that does not declare a no-args constructor."
msgstr "No generamos un constructor no-args automáticamente si una clase bean extiende otra clase que no declara un constructor no-args."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Default Beans"
msgstr "Frijoles por defecto"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"CDI has a feature called https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[alternatives].\n"
"Simply said a bean annotated with `@Alternative` and `@Priority` takes precedence over the non-alternative beans during type-safe resolution."
msgstr "CDI tiene una característica llamada link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[alternativas] . En pocas palabras, un frijol anotado con `@Alternative` y `@Priority` tiene prioridad sobre los frijoles no alternativos durante la resolución a prueba de tipos."

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"So, what if a user wants to override a bean defined by a library/extension?\n"
"The bean would have to be marked as a CDI `@Alternative` that is enabled using the `@Priority` annotation.\n"
"Is there a simpler approach?\n"
"Yes, there is.\n"
"You can use a non-standard feature called \"default beans\".\n"
"In this case, a bean that can be overridden should be annotated with `@io.quarkus.arc.DefaultBean`.\n"
"And that's it."
msgstr "Entonces, ¿qué ocurre si un usuario quiere anular un bean definido por una biblioteca/extensión? El bean tendría que marcarse como un CDI `@Alternative` que se habilita mediante la anotación `@Priority` . ¿Existe un enfoque más sencillo? Sí, lo hay. Puede utilizar una característica no estándar denominada \"beans por defecto\". En este caso, un frijol que puede ser anulado debe ser anotado con `@io.quarkus.arc.DefaultBean` . Y eso es todo."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Removing Unused Beans"
msgstr "Eliminación de los granos no utilizados"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"GraalVM native image does a pretty good job when removing all classes that are not reachable from your application.\n"
"However, sometimes checking reachability is not enough.\n"
"Sometimes the framework itself must decide whether a component is needed or not.\n"
"In standard CDI, all beans are retained by the container no matter whether they're needed or not."
msgstr "La imagen nativa de GraalVM hace un trabajo bastante bueno a la hora de eliminar todas las clases que no son alcanzables desde su aplicación. Sin embargo, a veces comprobar la alcanzabilidad no es suficiente. A veces el propio framework debe decidir si un componente es necesario o no. En CDI estándar, todos los beans son retenidos por el contenedor sin importar si son necesarios o no."

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"Let's suppose we have a bean class `org.acme.Foo`.\n"
"This bean class imports and uses a lot of various classes.\n"
"It's annotated with `@ApplicationScoped` and so Quarkus needs to generate a bean metadata class and a client proxy and register this metadata when the application starts.\n"
"But what if nobody ever uses this bean?\n"
"We would still hold a reference on the generated metadata, and the bean class itself, and its dependencies.\n"
"In other words, all these classes would be reachable."
msgstr "Supongamos que tenemos una clase bean `org.acme.Foo` . Esta clase bean importa y utiliza un montón de clases diversas. Está anotada con `@ApplicationScoped` y, por tanto, Quarkus necesita generar una clase de metadatos bean y un proxy cliente y registrar estos metadatos cuando se inicia la aplicación. Pero, ¿y si nadie utiliza nunca este bean? Seguiríamos manteniendo una referencia sobre los metadatos generados, y sobre la propia clase bean y sus dependencias. En otras palabras, todas estas clases serían accesibles."

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"Quarkus attempts to remove all *unused beans* during build by default.\n"
"This helps to reduce the number of generated classes and also the amount of memory needed at runtime.\n"
"But how do we actually detect an unused bean?\n"
"The rules are described in the https://quarkus.io/guides/cdi-reference#remove_unused_beans[reference guide] but simply said: if a bean is not injected anywhere and cannot be reached in any other standard way (e.g. observer notification) it is removed.\n"
"Moreover, users can instruct the container to not remove a bean by annotating the bean class with `@io.quarkus.arc.Unremovable`.\n"
"Finally, this optimization can be disabled and fine tuned by using the `quarkus.arc.remove-unused-beans` property."
msgstr "Quarkus intenta eliminar por defecto todos los *beans no utilizados* durante la compilación. Esto ayuda a reducir el número de clases generadas y también la cantidad de memoria necesaria en tiempo de ejecución. Pero, ¿cómo detectamos realmente un bean no utilizado? Las reglas se describen en la link:https://quarkus.io/guides/cdi-reference#remove_unused_beans[guía de referencia] , pero en pocas palabras: si un bean no se inyecta en ninguna parte y no se puede acceder a él de ninguna otra forma estándar (por ejemplo, mediante una notificación de observador), se elimina. Además, los usuarios pueden ordenar al contenedor que no elimine un bean anotando la clase bean con `@io.quarkus.arc.Unremovable` . Por último, esta optimización puede desactivarse y ajustarse mediante la propiedad `quarkus.arc.remove-unused-beans` ."

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "This feature applies to the JVM mode as well."
msgstr "Esta característica se aplica también al modo JVM."
