# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-02 07:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Mutiny and the Reactiverse"
msgstr "El motín y el Reactiverse"

#. type: YAML Front Matter: synopsis
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Discover the Mutiny variant of the Vert.x API"
msgstr "Descubra la variante Mutiny de la API Vert.x"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"I had the question multiple times: how do I use Eclipse Vert.x in Quarkus?\n"
"Indeed, you can use Vert.x in Quarkus.\n"
"You can deploy _verticles_, communicate with the event bus, or use anything from the Vert.x ecosystem.\n"
"But, you can also use the Mutiny variant of Vert.x in Quarkus, and get a seamless experience with the other reactive APIs offered by Quarkus.\n"
"Several posts have already mentioned this, but it deserves a specific blog post.\n"
"So, here we are."
msgstr "Me han preguntado varias veces: ¿cómo puedo utilizar Eclipse Vert.x en Quarkus? Efectivamente, puede utilizar Vert.x en Quarkus. Puede desplegar _verticales_ , comunicarse con el bus de eventos o utilizar cualquier cosa del ecosistema Vert.x. Pero, también puede utilizar la variante Mutiny de Vert.x en Quarkus, y obtener una experiencia sin fisuras con las demás API reactivas que ofrece Quarkus. En varias entradas ya se ha mencionado esto, pero merece una entrada específica en el blog. Así que, aquí estamos."

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Eclipse Vert.x"
msgstr "Eclipse Vert.x"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"https://vertx.io[Vert.x] is a toolkit to build reactive applications.\n"
"The Vert.x ecosystem is enormous.\n"
"From HTTP and data access abilities to messaging clients via microservice and security facilities, the Vert.x ecosystem is remarkably diverse and versatile.\n"
"To understand that variety, just check the https://vertx.io/docs/[Vert.x documentation].\n"
"That makes Vert.x popular in many areas such as web applications, IoT gateways, banking applications and so on."
msgstr "Vert. link:https://vertx.io[x] es un conjunto de herramientas para construir aplicaciones reactivas. El ecosistema Vert.x es enorme. Desde HTTP y capacidades de acceso a datos hasta clientes de mensajería pasando por microservicios y facilidades de seguridad, el ecosistema Vert.x es notablemente diverso y versátil. Para comprender esa variedad, basta con consultar la link:https://vertx.io/docs/[documentación] de Vert.x. Eso hace que Vert.x sea popular en muchas áreas, como aplicaciones web, pasarelas IoT, aplicaciones bancarias, etc."

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"As you may know, Quarkus is based on Vert.x.\n"
"Under the hood, there is a managed Vert.x instance that powers the rest of Quarkus."
msgstr "Como ya sabrá, Quarkus se basa en Vert.x. Bajo el capó, hay una instancia gestionada de Vert.x que alimenta el resto de Quarkus."

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/architecture.png[width=50%]"
msgstr "image:/assets/images/posts/mutiny-vertx/architecture.png[alt=architecture]"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"When Quarkus serves a HTTP endpoint, under the hood, there is a Vert.x HTTP server handling the request and response.\n"
"That's also true for messaging, gRPC and almost any I/O."
msgstr "Cuando Quarkus sirve un punto final HTTP, bajo el capó, hay un servidor HTTP Vert.x manejando la solicitud y la respuesta. Eso también es cierto para la mensajería, gRPC y casi cualquier E/S."

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "The Vert.x \"bare\" API and friends"
msgstr "La API \"desnuda\" de Vert.x y sus amigos"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Vert.x provides multiple APIs.\n"
"Let's focus on the \"bare\" one for now."
msgstr "Vert.x proporciona múltiples API. Centrémonos por ahora en la \"desnuda\"."

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Following the reactive nature of Vert.x, the API contains mostly asynchronous methods.\n"
"These methods are following a syntax convention:"
msgstr "Siguiendo la naturaleza reactiva de Vert.x, la API contiene principalmente métodos asíncronos. Estos métodos siguen una convención sintáctica:"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"The interesting part is the last parameter.\n"
"It's a function, a callback to be more precise, that gets called when the operation completes or fails.\n"
"Indeed, the asynchronous nature of Vert.x does not allow using `try/catch` blocks.\n"
"So you need to pass a continuation callback, invoked with the outcome."
msgstr "La parte interesante es el último parámetro. Es una función, una llamada de retorno para ser más precisos, que se llama cuando la operación se completa o falla. De hecho, la naturaleza asíncrona de Vert.x no permite utilizar bloques `try/catch` . Así que tiene que pasar una llamada de retorno de continuación, invocada con el resultado."

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"`AsyncResult` is a structure capturing this outcome.\n"
"It contains the result (of type `<T>`) produced by the operation, or the failure if it failed."
msgstr "`AsyncResult` es una estructura que captura este resultado. Contiene el resultado (de tipo `<T>` ) producido por la operación, o el fallo si ha fallado."

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "Let's take an example:"
msgstr "Pongamos un ejemplo:"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"This code reads a file, and as it's an asynchronous operation, invokes the callback when the file is read.\n"
"The `readFile` method reads the complete content of the file and accumulates it in a _buffer_.\n"
"The callback receives the asynchronous result containing either the file's content (`ar.result()`) or a failure.\n"
"Vert.x invokes this callback when the operation has either completed or failed."
msgstr "Este código lee un archivo y, como se trata de una operación asíncrona, invoca la llamada de retorno cuando se lee el archivo. El método `readFile` lee el contenido completo del archivo y lo acumula en un _búfer_ . La llamada de retorno recibe el resultado asíncrono que contiene el contenido del archivo ( `ar.result()` ) o un fallo. Vert.x invoca esta llamada de retorno cuando la operación se ha completado o ha fallado."

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Vert.x also supports streams thanks to the `ReadStream` and `WriteStream` classes.\n"
"A `ReadStream` represents a stream of data you can read.\n"
"So you can attach a callback invoked on every item traversing the stream.\n"
"A `WriteStream` is a data source.\n"
"You can push items to a `WriteStream.`\n"
"These items will be consumed by a `ReadStream`:"
msgstr "Vert.x también admite flujos de datos gracias a las clases `ReadStream` y `WriteStream` . Un `ReadStream` representa un flujo de datos que puede leer. Así que puede adjuntar una llamada de retorno invocada en cada elemento que atraviesa el flujo. Un `WriteStream` es una fuente de datos. Puede enviar elementos a un `WriteStream.` . Estos elementos serán consumidos por un `ReadStream` :"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Vert.x streams do not implement Reactive Streams.\n"
"Vert.x provides a different back-pressure protocol."
msgstr "Los flujos Vert.x no implementan flujos reactivos. Vert.x proporciona un protocolo de contrapresión diferente."

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Why are these API shaping rules important?\n"
"Vert.x does not provide a single API.\n"
"The \"bare\" API presented above is just one of the proposed API.\n"
"It also provides API in Kotlin, API for RX Java, and so on."
msgstr "¿Por qué son importantes estas reglas de configuración de la API? Vert.x no proporciona una única API. La API \"desnuda\" presentada anteriormente es sólo una de las API propuestas. También proporciona API en Kotlin, API para RX Java, etc."

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"These APIs are **generated**.\n"
"Vert.x provides a code generator that _ translates_ the Vert.x \"bare\" API into the other APIs.\n"
"Because all methods are well-formed, the generator understands how they should be adapted."
msgstr "Estas API se *generan* . Vert.x proporciona un generador de código que _traduce_ la API \"desnuda\" de Vert.x a las otras API. Como todos los métodos están bien formados, el generador entiende cómo deben adaptarse."

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/generation.png[]"
msgstr "image:/assets/images/posts/mutiny-vertx/generation.png[alt=generation]"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"The generated code exposes a different API; each method delegating to the \"bare\" API.\n"
"Asynchronous methods and streams can follow different transformations, so the resulting API uses the right idioms."
msgstr "El código generado expone una API diferente; cada método delega en la API \"desnuda\". Los métodos asíncronos y los flujos pueden seguir diferentes transformaciones, por lo que la API resultante utiliza los modismos adecuados."

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "The Vert.x Mutiny API"
msgstr "La API de Vert.x Mutiny"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Mutiny is an event-driven reactive programming library.\n"
"It's not related to Vert.x.\n"
"However, we have written a code generator that generates the Mutiny variant for the Vert.x API:"
msgstr "Mutiny es una biblioteca de programación reactiva basada en eventos. No está relacionada con Vert.x. Sin embargo, hemos escrito un generador de código que genera la variante Mutiny para la API de Vert.x:"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/mutiny.png[]"
msgstr "image:/assets/images/posts/mutiny-vertx/mutiny.png[alt=mutiny]"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "The transformations are straightforward:"
msgstr "Las transformaciones son sencillas:"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`io.vertx` package => `io.vertx.mutiny` package"
msgstr "`io.vertx` paquete ⇒ `io.vertx.mutiny` paquete"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "Asynchronous methods => method returning a `Uni<T>`"
msgstr "Métodos asíncronos ⇒ método que devuelve un `Uni&amp;lt;T&amp;gt;`"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`ReadStreams<T>` => can be consumed as `Multi<T>`"
msgstr "`ReadStreams&amp;lt;T&amp;gt;` ⇒ se puede consumir como `Multi&amp;lt;T&amp;gt;`"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`WriteStreams<T>` => can be consumed as Reactive Streams `Subscriber<T>`"
msgstr "`WriteStreams&amp;lt;T&amp;gt;` ⇒ pueden ser consumidos como flujos reactivos `Subscriber&amp;lt;T&amp;gt;`"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "It also adapts the Vert.x back pressure protocol to Reactive Streams, as Mutiny implements Reactive Streams."
msgstr "También adapta el protocolo de contrapresión de Vert.x a Reactive Streams, ya que Mutiny implementa Reactive Streams."

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "For example, the first example from above becomes:"
msgstr "Por ejemplo, el primer ejemplo de arriba se convierte en:"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"One difference between the two APIs is related to laziness. The Vert.x \"bare\" API triggers the operation as soon as the method is called.\n"
"The Mutiny variant expects a subscription to trigger the operation."
msgstr "Una diferencia entre las dos API está relacionada con la pereza. La API \"desnuda\" de Vert.x desencadena la operación en cuanto se llama al método. La variante Mutiny espera una suscripción para desencadenar la operación."

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "The stream example from above becomes:"
msgstr "El ejemplo de la corriente de arriba se convierte en:"

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "A bit more than this"
msgstr "Un poco más que esto"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"The Mutiny variant does not only apply the rules exposed in the previous section.\n"
"For asynchronous methods, it also provides:"
msgstr "La variante Mutiny no sólo aplica las reglas expuestas en la sección anterior. Para los métodos asíncronos, también proporciona:"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`xAndAwait()` methods - blocks the caller thread until the outcome is received. In the case of a failure, throws a `RuntimeException`"
msgstr "`xAndAwait()` bloquea el hilo de la llamada hasta que se reciba el resultado. En caso de fallo, lanza un `RuntimeException`"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`xAndForget()` methods - triggers the operation, discard the outcome"
msgstr "`xAndForget()` métodos - desencadena la operación, descarta el resultado"

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Where can we find this API?"
msgstr "¿Dónde podemos encontrar esta API?"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"At the moment of writing, we only provide Vert.x core and Vert.x clients (MongoDB, Redis, Web client, Mqtt, and so on).\n"
"We are extending the support to cover the full Vert.x stack."
msgstr "En el momento de escribir estas líneas, sólo proporcionamos el núcleo Vert.x y los clientes Vert.x (MongoDB, Redis, cliente Web, Mqtt, etc.). Estamos ampliando el soporte para cubrir toda la pila Vert.x."

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"To use the Mutiny clients, you need to add the right dependency to your project.\n"
"Browse https://search.maven.org/search?q=a:smallrye-mutiny-vertx*[the list of dependency] to pick the one you need."
msgstr "Para utilizar los clientes Mutiny, necesita añadir la dependencia adecuada a su proyecto. Navegue por link:https://search.maven.org/search?q=a:smallrye-mutiny-vertx*[la lista de depend] encias para elegir la que necesite."

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "For example, to you use the Mutiny variant of the Vert.x Web client, add the following dependency:"
msgstr "Por ejemplo, si utiliza la variante Mutiny del cliente web Vert.x, añada la siguiente dependencia:"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "Once you have the dependency, just create the web client instance:"
msgstr "Una vez que tengas la dependencia, sólo tienes que crear la instancia del cliente web:"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "Something missing? Open an issue on https://github.com/smallrye/smallrye-reactive-utils/issues[SmallRye Reactive Utils]."
msgstr "¿Falta algo? Abre una incidencia en  link:https://github.com/smallrye/smallrye-reactive-utils/issues[SmallRye Reactive Utils]."

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "The Javadoc is available http://smallrye.io/smallrye-reactive-utils/apidocs/[here]."
msgstr "El Javadoc está disponible  link:http://smallrye.io/smallrye-reactive-utils/apidocs/[aquí]."

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "The road ahead: Vert.x 4!"
msgstr "El camino por delante: ¡Vert.x 4!"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Vert.x 4 is coming soon!\n"
"We are already working in Quarkus and the different satellite projects to migrate.\n"
"With Vert.x 4, a new generator has been implemented (following the same code generation approach), paving the road to a smooth upgrade."
msgstr "¡Vert.x 4 está al caer! Ya estamos trabajando en Quarkus y en los diferentes proyectos satélite para migrar. Con Vert.x 4, se ha implementado un nuevo generador (siguiendo el mismo enfoque de generación de código), allanando el camino para una actualización sin problemas."
