msgid ""
msgstr ""
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Movie similarity search using vector databases"
msgstr "Búsqueda de similitudes entre películas mediante bases de datos vectoriales"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Shows how to create a movie similarity search system using a vector database and Quarkus LangChain4j"
msgstr "Muestra cómo crear un sistema de búsqueda de similitudes de películas utilizando una base de datos vectorial y Quarkus LangChain4j"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
msgid "Introduction"
msgstr "Introducción"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"With LLMs becoming increasingly popular we often see them being used even for tasks that are not directly related to text generation.\n"
"Such case is using LLMs for recommendation systems. In this post we'll see how you can build such a system using https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j]\n"
"but without using LLMs. More specifically we'll create a simple movie similarity search system using a vector database. The role\n"
"of https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] in this story is to abstract the underlying vector database through the `EmbeddingStore` interface."
msgstr "Dado que los LLM son cada vez más populares, a menudo vemos que se utilizan incluso para tareas que no están directamente relacionadas con la generación de textos. Tal es el caso del uso de LLMs para sistemas de recomendación. En este post veremos cómo se puede construir un sistema de este tipo utilizando link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] pero sin usar LLMs. Más concretamente, crearemos un sencillo sistema de búsqueda de similitudes de películas utilizando una base de datos vectorial. El papel de link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus Lang] Chain4j en esta historia es abstraer la base de datos vectorial subyacente a través de la interfaz `EmbeddingStore` ."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "A relevant sample has been recently added to the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/[Quarkus LangChain4j samples]."
msgstr "Recientemente se ha añadido una muestra relevante a las link:https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/[muestras LangChain4j de Quarkus] ."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Embeddings"
msgstr "Incrustaciones"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"An embedding is a way to represent unstructured data (text, images etc.) in a structured way. This is done by mapping the data into a vector.\n"
"As we are able to perform mathematical operations on vectors, such as calculating the distance between them, we can use embeddings to calculate\n"
"how close (or similar) two pieces of data are. In our case, comparing the embeddings of the movie overview can give us a measure of how similar\n"
"the two movies are. This is the premise of this post."
msgstr "Una incrustación es una forma de representar datos no estructurados (texto, imágenes, etc.) de manera estructurada. Esto se hace mapeando los datos en un vector. Como podemos realizar operaciones matemáticas con vectores, como calcular la distancia entre ellos, podemos utilizar las incrustaciones para calcular lo cerca (o parecidos) que están dos datos. En nuestro caso, comparar las incrustaciones del resumen de la película puede darnos una medida de lo parecidas que son las dos películas. Esta es la premisa de este post."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "How are embeddings created?"
msgstr "¿Cómo se crean las incrustaciones?"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "There are multiple ways to create embeddings. https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] provides the following:"
msgstr "Existen múltiples formas de crear incrustaciones. link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] proporciona las siguientes:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[In-process embedding]"
msgstr "link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[Incrustación en proceso]"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "https://docs.quarkiverse.io/quarkus-langchain4j/dev/llms.html[Model provider]"
msgstr "link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/llms.html[Proveedor de modelos]"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"In this post we'll use the former. Did I mention that we won't be using LLMs?\n"
"Instead, we'll be using https://github.com/pgvector/pgvector[pgvector] which is a PostgreSQL extension that provides vector operations and indexing."
msgstr "En este post utilizaremos los primeros. ¿He mencionado que no utilizaremos LLMs? En su lugar, utilizaremos link:https://github.com/pgvector/pgvector[pgvector] que es una extensión de PostgreSQL que proporciona operaciones vectoriales e indexación."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Our project will need the following dependencies, for https://github.com/pgvector/pgvector[pgvector] and https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[in-process embedding]:"
msgstr "Nuestro proyecto necesitará las siguientes dependencias, para link:https://github.com/pgvector/pgvector[pgvector] y link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[la incrustación en proceso] :"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "To be able to use these dependencies without needing to specify versions, the BOM can be imported to the `dependencyManagement` of the project:"
msgstr "Para poder utilizar estas dependencias sin necesidad de especificar versiones, la lista de materiales puede importarse a la dirección `dependencyManagement` del proyecto:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To properly use the in-process embedding model we need to configure it in the `application.properties` file.\n"
"We also need to configure the pgvector dimension and ensure it's aligned with the dimension of the embedding model.\n"
"In our case, it's 384 (the https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] documentation provides the size used by each model)."
msgstr "Para utilizar correctamente el modelo de incrustación en proceso necesitamos configurarlo en el archivo `application.properties` . También necesitamos configurar la dimensión del pgvector y asegurarnos de que está alineada con la dimensión del modelo de incrustación. En nuestro caso, es 384 (la documentación link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[de Quarkus LangChain4j] proporciona la dimensión utilizada por cada modelo)."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "So, the `application.properties` file should look like this:"
msgstr "Así, el archivo `application.properties` debería tener este aspecto:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"*Note*: We can use any other document store supported by https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j], in fact that's one of the key benefits of using it, the abstraction\n"
"of embeddings stores."
msgstr "*Nota* : Podemos utilizar cualquier otro almacén de documentos soportado por link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] , de hecho esa es una de las principales ventajas de utilizarlo, la abstracción de almacenes incrustados."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Storing the embedding"
msgstr "Almacenamiento de la incrustación"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To store the embedding we'll need an `EmbeddingStoreIngestor` The ingestor is created using the `EmbeddingModel` and the `EmbeddingStore`, both provided\n"
"as beans and can be easily injected. Alternatively, the user can specify a document splitter, for splitting large documents into smaller chunks, but we won't be needing that\n"
"in this post, as the movie overview are relatively small."
msgstr "Para almacenar la incrustación necesitaremos un `EmbeddingStoreIngestor` . El ingestor se crea utilizando el `EmbeddingModel` y el `EmbeddingStore` , ambos proporcionados como beans y que pueden inyectarse fácilmente. Alternativamente, el usuario puede especificar un divisor de documentos, para dividir documentos grandes en trozos más pequeños, pero no lo necesitaremos en este post, ya que el resumen de la película es relativamente pequeño."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"Before passing the unstructured text to the ingestor we need to wrap it in a `Document` object. The `Document` also contains a `Metadata` object which holds key-value pairs.\n"
"The `Metadata` is really handy as we can add there information needed for correlating the `Document` with other data. In our case we'll use the `Metadata` to store the id of the movie.\n"
"That id will help us correlate the movie overview with the actual movie."
msgstr "Antes de pasar el texto no estructurado al ingestor necesitamos envolverlo en un objeto `Document` . El `Document` también contiene un objeto `Metadata` que contiene pares clave-valor. El `Metadata` es realmente práctico ya que en él podemos añadir la información necesaria para correlacionar el `Document` con otros datos. En nuestro caso utilizaremos el `Metadata` para almacenar el id de la película. Ese id nos ayudará a correlacionar el resumen de la película con la película real."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "The simplified code below shows, how the actual ingestor is created and how the embedding is stored."
msgstr "El código simplificado que figura a continuación muestra cómo se crea el ingestor real y cómo se almacena la incrustación."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"So, how exactly do we use the movie id ? This depends really on how we store the rest of the movie data. In our case, we'll store the movie data in a PostgreSQL database.\n"
"This means that the movie id, corresponds to the id of the Movie in the database."
msgstr "Entonces, ¿cómo utilizamos exactamente el id de la película? Esto depende realmente de cómo almacenemos el resto de los datos de la película. En nuestro caso, almacenaremos los datos de la película en una base de datos PostgreSQL. Esto significa que el id de la película, corresponde al id de la Película en la base de datos."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Querying the embedding"
msgstr "Consulta de la incrustación"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To query the embedding we'll use the `EmbeddingStore` and the `EmbeddingModel` in order to execute `EmbeddingSearchRequest`.\n"
"The code is pretty straight forward. We use the movie overview to create a search request. The `EmbeddingSearchRequest` builder\n"
"also allows us to specify the maximum number of results and also the minimum similarity threshold. The later allows us to filter\n"
"out embeddings that are not similar enough to the query embedding. In other words, it tells the store that if there are not enough similar results\n"
"to avoid adding irrelevant results to the response."
msgstr "Para consultar la incrustación utilizaremos el `EmbeddingStore` y el `EmbeddingModel` con el fin de ejecutar `EmbeddingSearchRequest` . El código es bastante sencillo. Utilizamos el resumen de la película para crear una solicitud de búsqueda. El constructor `EmbeddingSearchRequest` también nos permite especificar el número máximo de resultados y también el umbral mínimo de similitud. Este último nos permite filtrar las incrustaciones que no son lo suficientemente similares a la incrustación de la consulta. En otras palabras, indica al almacén que si no hay suficientes resultados similares evite añadir resultados irrelevantes a la respuesta."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Loading the movies"
msgstr "Cargando las películas"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To populate the movies in the database, we'll use a CSV file containing the top 1000 movies from IMDB.\n"
"The important columns for us are:"
msgstr "Para rellenar las películas de la base de datos, utilizaremos un archivo CSV que contiene las 1000 mejores películas de IMDB. Las columnas importantes para nosotros son"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "`title` the movie title"
msgstr "`title` el título de la película"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "`overview` the movie overview"
msgstr "`overview` visión general de la película"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "`link` the link to the image poster"
msgstr "`link` el enlace al cartel de la imagen"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To easily map CSV entries to `Movie` objects we'll use `Jackson`. Specifically, we will use the `@JsonProperty`\n"
"annotation to map the CSV columns to the `Movie` fields. Also, we'll use `@JsonIgnoreProperties(ignoreUnknown = true)`\n"
"to ignore unknown fields."
msgstr "Para mapear fácilmente entradas CSV a objetos `Movie` utilizaremos `Jackson` . En concreto, utilizaremos la anotación `@JsonProperty` para mapear las columnas CSV a los campos `Movie` . Además, utilizaremos `@JsonIgnoreProperties(ignoreUnknown = true)` para ignorar los campos desconocidos."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "So, a simplified version of our Movie entity object looks like:"
msgstr "Así, una versión simplificada de nuestro objeto de entidad Película tiene el siguiente aspecto:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "So, now we are ready to load our movies from the CSV to our relational and vector databases."
msgstr "Así pues, ahora estamos listos para cargar nuestras películas desde el CSV a nuestras bases de datos relacionales y vectoriales."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Key points:"
msgstr "Puntos clave:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Observing the `StartupEvent` allows us to load the movies when the application starts"
msgstr "Observar la `StartupEvent` nos permite cargar las películas cuando se inicia la aplicación"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "CSVMapper is used to map the CSV entries to `Movie` objects"
msgstr "CSVMapper se utiliza para mapear las entradas CSV a objetos `Movie` "

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "We save each movie using a @Transaction method because we need that `id` that's often generated by the database"
msgstr "Guardamos cada película utilizando un método @Transaction porque necesitamos ese `id` que suele generar la base de datos"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "We ingest the documents in a batch. This can make a huge difference especially, if we move from in-process to remote embedding models."
msgstr "Ingerimos los documentos por lotes. Esto puede suponer una gran diferencia, especialmente si pasamos de modelos de incrustación en proceso a modelos de incrustación a distancia."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "To use the CSV mapper, we'll need to Jackson's CSV dataformat dependency:"
msgstr "Para utilizar el mapeador CSV, necesitaremos la dependencia del formato de datos CSV de Jackson:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "The path of the movies file is specified in the `application.properties` file."
msgstr "La ruta del archivo de películas se especifica en el archivo `application.properties` ."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Bringing it all together"
msgstr "Reunirlo todo"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"The only thing that's left is to create a REST endpoint that allows us to search for similar movies. We could also use a simple UI.\n"
"Let's start with the REST endpoint. It's pretty straightforward. We need two methods, one for searching movies and one for searching similar movies.\n"
"For the former we just use the `Movie` entity, for the latter we inject and use the `MovieRecommendationService` we created earlier."
msgstr "Lo único que nos queda es crear un punto final REST que nos permita buscar películas similares. También podríamos utilizar una interfaz de usuario sencilla. Empecemos por el endpoint REST. Es bastante sencillo. Necesitamos dos métodos, uno para buscar películas y otro para buscar películas similares. Para el primero simplemente utilizamos la entidad `Movie` , para el segundo inyectamos y utilizamos el `MovieRecommendationService` que creamos anteriormente."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "For the UI, let's just use a simple HTML page that uses the REST endpoint to search for similar movies."
msgstr "Para la interfaz de usuario, vamos a utilizar una simple página HTML que utiliza el punto final REST para buscar películas similares."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "The key elements of that page are:"
msgstr "Los elementos clave de esa página son:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "movie-box: a text field for entering the movie title"
msgstr "movie-box: un campo de texto para introducir el título de la película"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "search-results: an unordered list for displaying the search results"
msgstr "search-results: una lista desordenada para mostrar los resultados de la búsqueda"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "movie-overview: div for displaying the overview of the selected movie"
msgstr "movie-overview: div para mostrar la visión general de la película seleccionada"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "movie-poster: an image for displaying the movie poster"
msgstr "cartel de cine: una imagen para mostrar el cartel de cine"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "similar-results: an additional unordered list for displaying the similar movies"
msgstr "similar-results: una lista desordenada adicional para mostrar las películas similares"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"It's important to remember that the `Movie` entity is using Jackson to map the CSV columns to the entity fields.\n"
"This means that when a `Movie` is serialized to JSON, it will use the CSV column names as the field names and not\n"
"the entity field names. The HTML code below needs to take that into consideration."
msgstr "Es importante recordar que la entidad `Movie` utiliza Jackson para asignar las columnas del CSV a los campos de la entidad. Esto significa que cuando un `Movie` se serializa a JSON, utilizará los nombres de las columnas del CSV como nombres de los campos y no los nombres de los campos de la entidad. El código HTML que se muestra a continuación debe tener esto en cuenta."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"I won't go into much detail about the HTML code as it's outside the scope of this post.\n"
"The final results should look like this:"
msgstr "No entraré en muchos detalles sobre el código HTML ya que está fuera del alcance de este post. Los resultados finales deberían tener este aspecto:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Conclusion"
msgstr "Conclusión"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"The quality of the recommendations depends on the accuracy of the movie overview and also on the quality of the embeddings.\n"
"This means that better embedding models can lead to better recommendations. The vector database used could possibly also\n"
"affect the quality of the recommendations, but that's a topic for another post."
msgstr "La calidad de las recomendaciones depende de la precisión de la visión general de la película y también de la calidad de las incrustaciones. Esto significa que unos mejores modelos de incrustación pueden dar lugar a mejores recomendaciones. Es posible que la base de datos vectorial utilizada también afecte a la calidad de las recomendaciones, pero ese es un tema para otro post."
