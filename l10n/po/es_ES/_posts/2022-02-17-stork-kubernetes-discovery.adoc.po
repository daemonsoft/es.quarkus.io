# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-04 20:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "Kubernetes Service Discovery and Selection with Stork"
msgstr "Descubrimiento de servicios Kubernetes y equilibrio de carga"

#. type: YAML Front Matter: synopsis
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "How to configure Smallrye Stork in a client-side microservice for using Kubernetes Service Discovery strategy"
msgstr "Cómo configurar Smallrye Stork en un microservicio del lado del cliente para utilizar la estrategia Kubernetes Service Discovery"

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "As we already described in the https://quarkus.io/blog/smallrye-stork-intro/[previous post], SmallRye Stork is a service discovery and client-side load-balancing framework that brings out-of-the-box integration with Kubernetes, among others. This post will explain this integration, how to configure Stork in a client-side microservice, and how it differs from the classic Kubernetes service discovery and load-balancing."
msgstr "Como ya describimos en el  link:https://quarkus.io/blog/smallrye-stork-intro/[post] anterior, SmallRye Stork es un framework de descubrimiento de servicios y balanceo de carga del lado del cliente que trae integración out-of-the-box con Kubernetes, entre otros. Este post explicará esta integración, cómo configurar Stork en un microservicio del lado del cliente y en qué se diferencia del clásico descubrimiento de servicios y balanceo de carga de Kubernetes."

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "This post has been updated to use the `quarkus.` prefix when configuring stork properties. This prefix is required since Quarkus 2.8."
msgstr "Este post ha sido actualizado para utilizar el prefijo `quarkus.` al configurar las propiedades de la cigüeña. Este prefijo es necesario desde Quarkus 2.8."

#. type: Title ==
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "Kubernetes service discovery and load balancing"
msgstr "Descubrimiento de servicios Kubernetes y equilibrio de carga"

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "Kubernetes has built-in service discovery and load balancing."
msgstr "Kubernetes tiene incorporado el descubrimiento de servicios y el equilibrio de carga."

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "Let's imagine you have an application deployed in Kubernetes and exposing an HTTP API. You declare a Kubernetes service that delegates the calls to your application. This service acts as a proxy in front of a set of pods (often application replicas). When another application calls our HTTP API, it uses DNS to locate the Kubernetes service and uses the resolved address. It's important to understand that it does not locate and call the application instance but the Kubernetes service. This service then delegates the call to the actual application and implements a round-robin when there are multiple replicas."
msgstr "Imaginemos que tienes una aplicación desplegada en Kubernetes y que expone una API HTTP. Usted declara un servicio de Kubernetes que delega las llamadas a su aplicación. Este servicio actúa como un proxy frente a un conjunto de pods (a menudo réplicas de la aplicación). Cuando otra aplicación llama a nuestra API HTTP, utiliza el DNS para localizar el servicio de Kubernetes y utiliza la dirección resuelta. Es importante entender que no localiza y llama a la instancia de la aplicación, sino al servicio de Kubernetes. Este servicio delega entonces la llamada a la aplicación real e implementa un round-robin cuando hay múltiples réplicas."

#. type: Title ==
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "What does Stork bring for Kubernetes?"
msgstr "¿Qué aporta Stork a Kubernetes?"

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "Even though Kubernetes has built-in support for service discovery, sometimes we need more flexibility in the service instance selection. As we have seen, the Kubernetes service implements a round-robin.  With Stork, you can customize the selection."
msgstr "Aunque Kubernetes tiene soporte incorporado para el descubrimiento de servicios, a veces necesitamos más flexibilidad en la selección de instancias de servicio. Como hemos visto, el servicio de Kubernetes implementa un round-robin. Con Stork, puedes personalizar la selección."

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "Unlike in the previous example, Stork does not use DNS to locate the Kubernetes service. It uses the Kubernetes API to retrieve the set of pods behind a Kubernetes service. Then, you can apply any Stork service selection or even implement your own."
msgstr "A diferencia del ejemplo anterior, Stork no utiliza el DNS para localizar el servicio Kubernetes. Utiliza la API de Kubernetes para recuperar el conjunto de pods detrás de un servicio Kubernetes. A continuación, puede aplicar cualquier selección de servicio de Stork o incluso implementar la suya propia."

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "The following figure depicts the architecture and how Stork locates and selects the service instance."
msgstr "La siguiente figura muestra la arquitectura y cómo Stork localiza y selecciona la instancia de servicio."

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "As shown in the architecture above, the Kubernetes rest-service is backed by two pods.  While classic Kubernetes service discovery would ensure that requests to the rest-service are load-balanced across these two pods, Stork retrieves the pods' addresses directly. Thus it can handle the service selection (using a round-robin for now)."
msgstr "Como se muestra en la arquitectura anterior, el servicio de descanso de Kubernetes está respaldado por dos pods. Mientras que el descubrimiento clásico de servicios de Kubernetes garantizaría que las solicitudes al servicio de descanso se equilibren entre estos dos pods, Stork recupera las direcciones de los pods directamente. Por lo tanto, puede manejar la selección del servicio (utilizando un round-robin por ahora)."

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "Note that while applications using Stork do not use the Kubernetes service delegation, they still require a Kubernetes service to discover the backed pods. So, it does not change your Kubernetes deployment."
msgstr "Tenga en cuenta que aunque las aplicaciones que utilizan Stork no utilizan la delegación de servicios de Kubernetes, siguen necesitando un servicio de Kubernetes para descubrir los pods respaldados. Por lo tanto, no cambia su implementación de Kubernetes."

#. type: Title ==
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "Configuring and Using Stork Kubernetes Service Discovery"
msgstr "Configuración y uso de Stork Kubernetes Service Discovery"

#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "On the client-side, our Quarkus application uses the REST Client Reactive to interact with the REST API exposed by the `rest-service`. The  Client app uses Stork to discover the rest-service instances. The easiest way to enable Stork is to add the corresponding Jar to the classpath of your project:"
msgstr "En el lado del cliente, nuestra aplicación Quarkus utiliza el Cliente Reactivo REST para interactuar con la API REST expuesta por el `rest-service` . La aplicación Cliente utiliza Stork para descubrir las instancias de rest-service. La forma más sencilla de habilitar Stork es añadir el jar correspondiente al classpath de su proyecto:"

#. type: Block title
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "With Stork and the Stork Kubernetes Service Discovery on the classpath, we need to tell Stork how to locate and select the service. To achieve this, we just add `stork.[service-name].[kebab-cased-property-name]` into the Quarkus application configuration. In our case, to configure the rest-service and indicate to Stork that it should use Kubernetes, we add:"
msgstr "Con Stork y el Stork Kubernetes Service Discovery en el classpath, necesitamos decirle a Stork cómo localizar y seleccionar el servicio. Para lograr esto, sólo tenemos que añadir `stork.[service-name].[kebab-cased-property-name]` en la configuración de la aplicación Quarkus. En nuestro caso, para configurar el rest-service e indicar a Stork que debe utilizar Kubernetes, añadimos:"

#. type: Block title
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "application.properties"
msgstr "aplicación.propiedades"

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "Note that you can also configure them via annotations, check the `@ServiceDiscoveryType` and `@ServiceDiscoveryAttribute` annotations."
msgstr "Tenga en cuenta que también puede configurarlos mediante anotaciones, consulte las anotaciones de `@ServiceDiscoveryType` y `@ServiceDiscoveryAttribute`."

#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "We also can  limit the service lookup to our namespace. We can also use the `all` value to look for services in all namespaces."
msgstr "También podemos limitar la búsqueda de servicios a nuestro espacio de nombres. También podemos utilizar el valor `all` para buscar servicios en todos los espacios de nombres."

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "There are a few more properties that we can configure to tune the service discovery:"
msgstr "Hay algunas propiedades más que podemos configurar para afinar el descubrimiento de servicios:"

#. type: Table
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "Property"
msgstr "Propiedad"

#. type: Table
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "Description"
msgstr "Descripción"

#. type: Table
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "quarkus.stork.service-name.service-discovery.k8s-host"
msgstr "stork.service-name.service-discovery.k8s-host"

#. type: Table
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "The Kubernetes API url"
msgstr "La url de la API de Kubernetes"

#. type: Table
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "quarkus.stork.service-name.service-discovery.application"
msgstr "stork.service-name.service-discovery.application"

#. type: Table
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "The name of the target application"
msgstr "El nombre de la aplicación de destino"

#. type: Table
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "quarkus.stork.service-name.service-discovery.refresh-period"
msgstr "stork.service-name.service-discovery.refresh-period"

#. type: Table
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "Service discovery cache refresh period"
msgstr "Periodo de actualización de la caché de descubrimiento de servicios"

#. type: Table
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "quarkus.stork.service-name.service-discovery.secure"
msgstr "stork.service-name.service-discovery.secure"

#. type: Table
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "Use a secure connection (e.g. HTTPS)"
msgstr "Utilice una conexión segura (por ejemplo, HTTPS)"

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "That's how easy it is to have Stork Kubernetes service discovery."
msgstr "Así de fácil es el descubrimiento de servicios Kubernetes de Stork."

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "Once Stork is configured, we need to configure the REST Client to use it. It can be done in the `@RegisterRestClient` annotated interface by adding the `baseUri` attribute with the `stork://` scheme:"
msgstr "Una vez que Stork está configurado, tenemos que configurar el cliente REST para que lo utilice. Se puede hacer en la interfaz anotada `@RegisterRestClient` añadiendo el atributo `baseUri` con el esquema `stork://`:"

#. type: Title ==
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "Customizing the service selection"
msgstr "Personalización de la selección de servicios"

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "Now that the service is located, we need to select the _best_ instance. For example, you can use the least-response-time load-balancer implementation. This selection strategy monitors the interactions and selects the fastest instance to improve the response time."
msgstr "Ahora que el servicio está localizado, necesitamos seleccionar la _mejor_ instancia. Por ejemplo, se puede utilizar la implementación del equilibrador de carga de menor tiempo de respuesta. Esta estrategia de selección monitoriza las interacciones y selecciona la instancia más rápida para mejorar el tiempo de respuesta."

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "To achieve this, you need to add the load-balancer implementation on your classpath:"
msgstr "Para lograrlo, debe añadir la implementación del equilibrador de carga en su classpath:"

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "Then, in the application configuration, add:"
msgstr "A continuación, en la configuración de la aplicación, añada:"

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "Obviously, you can pick any load-balancing strategy or even implement your own one!"
msgstr "Obviamente, puedes elegir cualquier estrategia de equilibrio de carga o incluso implementar la tuya propia."

#. type: Title ==
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumen"

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "This post shows how you can use Stork in a Kubernetes environment to customize the service selection. While Kubernetes offers built-in service discovery and load-balancing, Stork adds another level of flexibility."
msgstr "Este post muestra cómo se puede utilizar Stork en un entorno Kubernetes para personalizar la selección de servicios. Mientras que Kubernetes ofrece un descubrimiento de servicios y un equilibrio de carga integrados, Stork añade otro nivel de flexibilidad."

#. type: Plain text
#: _posts/2022-02-17-stork-kubernetes-discovery.adoc
#, fuzzy
msgid "You can check the code of the example in https://github.com/michalszynkiewicz/rest-client-reactive-stork/tree/kubernetes[this repo] for the client-side, and https://github.com/michalszynkiewicz/configurable-rest-service/tree/kubernetes[this one] for the HTTP service."
msgstr "Puedes consultar el código del ejemplo en  link:https://github.com/michalszynkiewicz/rest-client-reactive-stork/tree/kubernetes[este repo] para el lado del cliente, y  link:https://github.com/michalszynkiewicz/configurable-rest-service/tree/kubernetes[este otro] para el servicio HTTP."
