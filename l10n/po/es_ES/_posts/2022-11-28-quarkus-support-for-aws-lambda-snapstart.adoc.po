# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-29 06:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ==
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Quarkus support for AWS Lambda SnapStart"
msgstr "Soporte de Quarkus para AWS Lambda SnapStart"

#. type: YAML Front Matter: synopsis
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Amazon Web Services (AWS)  announced the SnapStart feature for AWS Lambda. SnapStart reduces startup latency for Java-based functions running on AWS Lambda, and Quarkus supports it from day one!"
msgstr "Amazon Web Services (AWS) ha anunciado la función SnapStart para AWS Lambda. SnapStart reduce la latencia de inicio de las funciones basadas en Java que se ejecutan en AWS Lambda, ¡y Quarkus lo soporta desde el primer día!"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Amazon Web Services (AWS)  http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[announced] the SnapStart feature for AWS Lambda. SnapStart for Java reduces startup latency for Java-based functions running on AWS Lambda, and Quarkus supports it from day one!"
msgstr "Amazon Web Services (AWS)  link:http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[ha anunciado] la función SnapStart para AWS Lambda. SnapStart para Java reduce la latencia de inicio de las funciones basadas en Java que se ejecutan en AWS Lambda, y Quarkus lo admite desde el primer día."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Quarkus is supersonic subatomic Java with a focus on cloud-native applications. The idea behind Quarkus has always been to do at build-time what traditional frameworks do at runtime. Quarkus is optimized for low memory usage and fast startup times. Quarkus brings back _developer joy_ to Java and enables every Java developer out there to use their skills to develop cloud-native apps, including AWS Lambda workloads."
msgstr "Quarkus es un Java subatómico supersónico centrado en las aplicaciones nativas de la nube. La idea detrás de Quarkus siempre ha sido hacer en tiempo de construcción lo que los frameworks tradicionales hacen en tiempo de ejecución. Quarkus está optimizado para un bajo uso de memoria y tiempos de inicio rápidos. Quarkus devuelve la _alegría a los desarrolladores_ de Java y permite a todos los desarrolladores de Java utilizar sus habilidades para desarrollar aplicaciones nativas de la nube, incluidas las cargas de trabajo de AWS Lambda."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Quarkus uses the ‘quarkus-amazon-lambda’ extension to build and deploy functions to AWS Lambda. The extension allows developers to use the Quarkus development model like live coding, continuous testing, etc., and the ability to use CDI Injections and additional quarkus extensions. Developers can deploy functions to AWS Lambda using native or Java mode. With today's http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[announcement], the SnapStart feature is now an additional option to build and deploy functions written with Quarkus to AWS Lambda."
msgstr "Quarkus utiliza la extensión 'quarkus-amazon-lambda' para construir e implementar funciones en AWS Lambda. La extensión permite a los desarrolladores utilizar el modelo de desarrollo de Quarkus, como la codificación en vivo, las pruebas continuas, etc., y la capacidad de utilizar inyecciones CDI y extensiones adicionales de Quarkus. Los desarrolladores pueden desplegar funciones en AWS Lambda utilizando el modo nativo o Java. Con el  link:http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[anuncio] de hoy, la función SnapStart es ahora una opción adicional para crear e implementar funciones escritas con Quarkus en AWS Lambda."

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "What is SnapStart?"
msgstr "¿Qué es SnapStart?"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Typically AWS Lambda creates a new execution environment when invoking a new function for the first time or when it is scaled up to handle the traffic. SnapStart takes a different approach by taking a snapshot of the execution environment(memory and application state)  of the initialized function execution environment. Furthermore, it persists the snapshot and caches it for low-latency access. When invoking the function, it does not need to spend time initializing code, dependencies, or framework. Instead, Lambda resumes the new execution environment from the persisted snapshot."
msgstr "Normalmente, AWS Lambda crea un nuevo entorno de ejecución cuando se invoca una nueva función por primera vez o cuando se escala para gestionar el tráfico. SnapStart adopta un enfoque diferente al tomar una instantánea del entorno de ejecución (memoria y estado de la aplicación) del entorno de ejecución de la función inicializada. Además, persiste la instantánea y la almacena en caché para un acceso de baja latencia. Cuando se invoca la función, no es necesario invertir tiempo en inicializar el código, las dependencias o el marco de trabajo. En su lugar, Lambda reanuda el nuevo entorno de ejecución a partir de la instantánea persistida."

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "SnapStart considerations"
msgstr "Consideraciones sobre SnapStart"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Because of how SnapStart works with snapshots and resumes the execution environment with low latency, this benefits functions written with Quarkus. Quarkus can leverage the snapshotting and warm-up code paths for the libraries Quarkus supports."
msgstr "Debido a cómo SnapStart trabaja con las instantáneas y reanuda el entorno de ejecución con baja latencia, esto beneficia a las funciones escritas con Quarkus. Quarkus puede aprovechar las rutas de código de instantáneas y calentamiento para las bibliotecas que soporta Quarkus."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "For the Developer's code and libraries, they need to consider particular cases when utilizing SnapStart:"
msgstr "El código y las bibliotecas de los desarrolladores deben tener en cuenta casos particulares al utilizar SnapStart:"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid ""
"*Resource connections over the network***:** Snapshots do not guarantee connections back to remote hosts when a function is resumed. Developers will need to ensure and validate the state of connections.  +\n"
"*Pulling in-memory data from sources*: Often, one needs to pull data from a different source into memory. This can also lead to inconsistency if the data at the source has changed or even expired. Ensure and verify the state of such data. +\n"
"*Randomness*: Lambda SnapStart speeds up applications by re-using a single initialized snapshot many times over to resume execution environments. As a result, unique content which was included in the snapshot during initialization may be reused across execution environments and so may no longer remain unique. Ensure that unique content is generated after initialization, and avoid caching unique content during initialization. Refer to the feature documentation to understand these considerations around uniqueness and interfaces available to customers to restore uniqueness."
msgstr ""

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Quarkus fast startup times and integration with SnapStart"
msgstr "Rápidos tiempos de arranque de Quarkus e integración con SnapStart"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "A typical Java application uses JIT (Just in time) compilation. When an application starts up, it needs time for specific warm-up code paths to perform better, which means additional CPU cycles for warm-up times. Cloud-native applications demand a faster startup time. Ahead-of-time (AOT) compilation enables that by doing most of the optimizations at build time. A good example here is Quarkus. As a result, we have full speed from startup and no CPU overhead for compilations at startup time. Quarkus application initialization has two phases: static initialization and runtime initialization. This distinction follows the principles of the GraalVM native compilation, inlining the static initialization in the resulting executable, while the runtime initialization happens during the regular execution. We compared multiple functions to understand the benefits of each feature we added:"
msgstr "Una aplicación Java típica utiliza la compilación JIT (Just in time). Cuando una aplicación se inicia, necesita tiempo para que las rutas de código de calentamiento específicas tengan un mejor rendimiento, lo que significa ciclos de CPU adicionales para los tiempos de calentamiento. Las aplicaciones nativas de la nube exigen un tiempo de arranque más rápido. La compilación anticipada (AOT) lo permite al realizar la mayoría de las optimizaciones en el momento de la compilación. Un buen ejemplo es Quarkus. Como resultado, tenemos toda la velocidad desde el inicio y ninguna sobrecarga de la CPU para las compilaciones en el momento del inicio. La inicialización de la aplicación Quarkus tiene dos fases: inicialización estática e inicialización en tiempo de ejecución. Esta distinción sigue los principios de la compilación nativa de GraalVM, inluyendo la inicialización estática en el ejecutable resultante, mientras que la inicialización en tiempo de ejecución ocurre durante la ejecución regular. Comparamos varias funciones para entender los beneficios de cada característica que añadimos:"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The Hello function is a simple function returning “Hello” and using the Quarkus AWS Lambda extension"
msgstr "La función Hello es una simple función que devuelve \"Hello\" y que utiliza la extensión AWS Lambda de Quarkus"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The Heroes function implements a CRUD interface on top of DynamoDB. It uses the Quarkus AWS Lamdba HTTP and RESTEasy Reactive. Invocations go through an AWS API Gateway."
msgstr "La función Heroes implementa una interfaz CRUD sobre DynamoDB. Utiliza el HTTP de AWS Lamdba de Quarkus y RESTEasy Reactive. Las invocaciones pasan por un AWS API Gateway."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "For each function, we compare:"
msgstr "Para cada función, comparamos:"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The invocation duration, memory, and billed duration without SnapStart"
msgstr "La duración de la invocación, la memoria y la duración facturada sin SnapStart"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The invocation duration, memory, and billed duration with a full startup during the warmup phase and the preloading of the classes."
msgstr "La duración de la invocación, la memoria y la duración facturada con un arranque completo durante la fase de calentamiento y la precarga de las clases."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The class preloading loads and initializes all the classes used by the application."
msgstr "La precarga de clases carga e inicializa todas las clases utilizadas por la aplicación."

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Results"
msgstr "Resultados"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "*Hello Function*"
msgstr ""

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "*Without SnapStart*"
msgstr ""

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "*With SnapStart*"
msgstr ""

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "*Native*"
msgstr ""

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Total duration"
msgstr "Duración total"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "2230 ms"
msgstr ""

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "202 ms"
msgstr ""

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-90.93%"
msgstr "-90.93%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "356 ms"
msgstr ""

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-84.05%"
msgstr "-84.05%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Billed duration"
msgstr "Duración de la factura"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "131 ms"
msgstr ""

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "109 ms"
msgstr ""

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-16.79%"
msgstr "-16.79%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "171.76%"
msgstr "171.76%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Memory"
msgstr "Memoria"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "115 MB"
msgstr "115 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "104 MB"
msgstr "104 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-9.57%"
msgstr "-9.57%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "59 MB"
msgstr "59 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-48.70%"
msgstr "-48.70%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "*Heroes Function*"
msgstr ""

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "15728 ms"
msgstr ""

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "965 ms"
msgstr ""

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-93.87%"
msgstr "-93.87%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "1112 ms"
msgstr ""

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-92.93%"
msgstr "-92.93%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "12550 ms"
msgstr ""

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "885 ms"
msgstr ""

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-92.95%"
msgstr "-92.95%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
msgid "1113 ms"
msgstr ""

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-91.13%"
msgstr "-91.13%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "222 MB"
msgstr "222 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "173 MB"
msgstr "173 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-22.07%"
msgstr "-22.07%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "96 MB"
msgstr "96 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-56.76%"
msgstr "-56.76%"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Quarkus together with AWS Lambda SnapStart functions enables further runtime optimizations close to the native performance and much faster than the regular Java ones. For some functions, SnapStart is faster than a cold start of a native executable in AWS Lambda. For others, memory usage is better with the native image."
msgstr "Quarkus, junto con las funciones de AWS Lambda SnapStart, permite otras optimizaciones en tiempo de ejecución cercanas al desempeño nativo y mucho más rápidas que las habituales de Java. Para algunas funciones, SnapStart es más rápido que un inicio en frío de un ejecutable nativo en AWS Lambda. Para otras, el uso de la memoria es mejor con la imagen nativa."

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "Conclusión"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Developers now have three options to build and deploy functions to AWS Lambda; JVM mode, Native mode, and the latest inclusion of the SnapStart feature. All three have different use cases. It is important to note that SnapStart is an AWS Lambda feature only."
msgstr "Los desarrolladores tienen ahora tres opciones para crear e implementar funciones en AWS Lambda: el modo JVM, el modo nativo y la última inclusión de la función SnapStart. Los tres tienen diferentes casos de uso. Es importante tener en cuenta que SnapStart es una función de AWS Lambda únicamente."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "With the SnapStart feature, it is possible to run Quarkus in JVM mode with similar and, in some cases, faster startup times than the native image in the AWS Lambda environment. For this to work, developers need to ensure that applications can startup in a safe state, e.g., network connections, resources, etc. Luckily if you are using Quarkus a lot of this is done for you."
msgstr "Con la función SnapStart, es posible ejecutar Quarkus en modo JVM con tiempos de inicio similares y, en algunos casos, más rápidos que la imagen nativa en el entorno de AWS Lambda. Para que esto funcione, los desarrolladores deben asegurarse de que las aplicaciones puedan arrancar en un estado seguro, por ejemplo, conexiones de red, recursos, etc. Por suerte, si usas Quarkus, mucho de esto se hace por ti."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "With https://github.com/quarkusio/quarkus/pull/29108[PR #29108] merged into the Quarkus main branch, Quarkus applications can use the SnapStart features on AWS Lambda. The feature will land in the 2.15 platform release as an experimental feature."
msgstr "Con  link:https://github.com/quarkusio/quarkus/pull/29108[el PR #29108] fusionado en la rama principal de Quarkus, las aplicaciones de Quarkus pueden utilizar las características de SnapStart en AWS Lambda. La característica aterrizará en la versión 2.15 de la plataforma como una característica experimental."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "If you are an AWS Lambda user we encourage you to try out Quarkus with and without AWS Snapstart and compare. Let us know your results and feedback."
msgstr "Si eres usuario de AWS Lambda te animamos a que pruebes Quarkus con y sin AWS Snapstart y compares. Háganos saber sus resultados y comentarios."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "For more technical details, visit the AWS Lambda SnapStart blog http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[here]."
msgstr "Para obtener más detalles técnicos, visite el blog de AWS Lambda SnapStart  link:http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[aquí]."
