# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-19 08:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:1
#, fuzzy, no-wrap
msgid "2023-11-15"
msgstr "2023-11-15"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:1
#, fuzzy, no-wrap
msgid "Learn about the new quarkus-langchain4j extension to integrate LLMs in Quarkus applications."
msgstr "Conozca la nueva extensión quarkus-langchain4j para integrar LLMs en aplicaciones Quarkus."

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:1
#, fuzzy, no-wrap
msgid "AI langchain"
msgstr "Cadena AI"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:1
#, fuzzy, no-wrap
msgid "When Quarkus meets LangChain4j"
msgstr "Cuando Quarkus conoce a LangChain4j"

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:12
#, fuzzy
msgid "Large language models (LLMs) are reshaping the world of software, altering the way we interact with users and develop business logic."
msgstr "Los grandes modelos lingüísticos (LLM) están remodelando el mundo del software, alterando la forma en que interactuamos con los usuarios y desarrollamos la lógica empresarial."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:14
#, fuzzy
msgid "Popularized by https://openai.com/[OpenAI]'s https://chat.openai.com/[ChatGPT], LLMs are now available in many flavors and sizes. The https://huggingface.co/models[Hugging-Face] platform references hundreds of them, and major tech companies like Facebook, Google, Microsoft, Amazon and IBM are also providing their own models."
msgstr "Popularizados por  link:https://chat.openai.com/[ChatGPT] de  link:https://openai.com/[OpenAI], los LLM están disponibles en muchos sabores y tamaños. La plataforma  link:https://huggingface.co/models[Hugging-Face] hace referencia a cientos de ellos, y grandes empresas tecnológicas como Facebook, Google, Microsoft, Amazon e IBM también ofrecen sus propios modelos."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:16
#, fuzzy
msgid "LLMs are not a new concept. They have been around for a while, but they were not as powerful or as accessible they became when OpenAI made ChatGPT API's publically available. Since then the Quarkus team have been thinking about what it would mean to integrate LLMs in the Quarkus ecosystem. The talk https://www.youtube.com/watch?app=desktop&v=BD1MSLbs9KE[Java Meets AI] from Lize Raes at Devoxx 2023 has been a great source of inspiration."
msgstr "Los LLM no son un concepto nuevo. Existen desde hace tiempo, pero no eran tan potentes ni tan accesibles como cuando OpenAI hizo públicas las API de ChatGPT. Desde entonces, el equipo de Quarkus ha estado pensando en lo que significaría integrar los LLM en el ecosistema de Quarkus. La charla  link:https://www.youtube.com/watch?app=desktop&amp;v=BD1MSLbs9KE[Java Meets AI] de Lize Raes en Devoxx 2023 ha sido una gran fuente de inspiración."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:18
#, fuzzy
msgid "Since, the Quarkus team, in collaboration with Dmytro Liubarskyi and the LangChain4j team, has been working on an extension to integrate LLMs in Quarkus applications. This extension is based on the https://github.com/langchain4j[LangChain4j library], which provides a common API to interact with LLMs. The LangChain4j project is a Java re-implementation of the famous https://www.langchain.com/[langchain] library."
msgstr "Desde entonces, el equipo de Quarkus, en colaboración con Dmytro Liubarskyi y el equipo de LangChain4j, ha estado trabajando en una extensión para integrar LLMs en aplicaciones Quarkus. Esta extensión se basa en la  link:https://github.com/langchain4j[biblioteca LangChain4j], que proporciona una API común para interactuar con los LLM. El proyecto LangChain4j es una reimplementación Java de la famosa biblioteca  link:https://www.langchain.com/[langchain]."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:20
#, fuzzy
msgid "In this blog post, we will see how to use the just released https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[quarkus-langchain4j] 0.1 extension to integrate LLMs in Quarkus applications. This extension is an exploration to understand how LLMs can be used in Quarkus applications."
msgstr "En esta entrada del blog, vamos a ver cómo utilizar la extensión  link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[quarkus-langchain4j] 0.1 recién liberada para integrar LLMs en aplicaciones Quarkus. Esta extensión es una exploración para entender cómo LLMs se pueden utilizar en aplicaciones Quarkus."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:22
#, fuzzy
msgid "We recorded a live Fireside chat on this extension. You can watch it here, the blog continues <<overview,below>>."
msgstr "Hemos grabado un Fireside chat en directo sobre esta ampliación. Puede verlo aquí, el blog continúa  link:#overview[más abajo]."

#. type: Title ==
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:25
#, fuzzy, no-wrap
msgid "Overview"
msgstr "Visión general"

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:28
#, fuzzy
msgid "First, let's have a look at the big picture. When integrating an LLM into a Quarkus application, you need to describe what you want the AI to do. Unlike traditional code, you are going to explain the behavior of the AI using natural language. Of course, there are a few techniques to tame the AI, but we will explore that later."
msgstr "En primer lugar, echemos un vistazo al panorama general. Al integrar un LLM en una aplicación Quarkus, necesitas describir lo que quieres que haga la IA. A diferencia del código tradicional, vas a explicar el comportamiento de la IA utilizando lenguaje natural. Por supuesto, hay algunas técnicas para domar la IA, pero lo exploraremos más adelante."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:30
#, fuzzy
msgid "Strictly relying on the LLM's knowledge might not be enough. Thus, the Quarkus LangChain4j extension provides two mechanisms to extend AI knowledge:"
msgstr "Confiar estrictamente en el conocimiento del LLM podría no ser suficiente. Así, la extensión LangChain4j de Quarkus proporciona dos mecanismos para ampliar el conocimiento de la IA:"

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:32
#, fuzzy
msgid "_Tools_ - a tool lets the LLM execute actions in your application. For instance, you can use a tool to send an email, call a REST endpoint, or execute a database query. The LLM decides when to use the tool, the method parameters, and what to do with the result."
msgstr "_Herramientas_ - una herramienta permite al LLM ejecutar acciones en su aplicación. Por ejemplo, puede utilizar una herramienta para enviar un correo electrónico, llamar a un punto final REST o ejecutar una consulta a una base de datos. La LLM decide cuándo utilizar la herramienta, los parámetros del método y qué hacer con el resultado."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:33
#, fuzzy
msgid "_Document stores_ - LLMs are not good at remembering things. In addition, their context has a size limit. Thus, the extension provides a way to store and retrieve information from document stores. Before calling the LLM, the extension can ask for relevant documents in a document store and attach them to the context. The LLM can then use this data to make a decision. For instance, you can load spreadsheet data, reports, or data from a database."
msgstr "_Almacenes de documentos_ - Los LLM no son buenos recordando cosas. Además, su contexto tiene un límite de tamaño. Por lo tanto, la extensión proporciona una forma de almacenar y recuperar información de los almacenes de documentos. Antes de llamar al LLM, la extensión puede solicitar documentos relevantes en un almacén de documentos y adjuntarlos al contexto. A continuación, el LLM puede utilizar estos datos para tomar una decisión. Por ejemplo, puede cargar datos de hojas de cálculo, informes o datos de una base de datos."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:35
#, fuzzy
msgid "The following diagram illustrates the interactions between the LLM, the tools, and the document stores:"
msgstr "El siguiente diagrama ilustra las interacciones entre el LLM, las herramientas y los almacenes de documentos:"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:36
#, fuzzy, no-wrap
msgid "Quarkus LLM integration - the big picture"
msgstr "Integración de Quarkus LLM - Panorama general"

#. type: Target for macro image
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:36
#, no-wrap
msgid "llms-big-picture.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:39
#, fuzzy, no-wrap
msgid "Show me some code!"
msgstr "¡Enséñame algo de código!"

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:42
#, fuzzy
msgid "Alright, enough \"bla bla\", let's see some code! We are going to use Open AI GPT-3.5 (be careful that it's not the state-of-the-art model, but it's good enough for this demo), give it some product reviews, and ask the LLM to classify them between positive and negative reviews. The full code is available in the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/review-triage[quarkus-langchain4j repository]."
msgstr "Muy bien, basta de \"bla bla\", ¡vamos a ver algo de código! Vamos a usar Open AI GPT-3.5 (cuidado que no es el modelo más avanzado, pero es suficientemente bueno para esta demo), le daremos algunas reseñas de productos, y le pediremos al LLM que las clasifique entre reseñas positivas y negativas. El código completo está disponible en el  link:https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/review-triage[repositorio quarkus-langchain4j]."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:44
#, fuzzy
msgid "First, we need the `quarkus-langchain4j-openai` extension:"
msgstr "En primer lugar, necesitamos la extensión `quarkus-langchain4j-openai`:"

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:52
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.langchain4j</groupId>\n"
"    <artifactId>quarkus-langchain4j-openai</artifactId>\n"
"    <version>0.1.0</version> <!-- Update to use the latest version -->\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:55
#, fuzzy
msgid "Once we have the extension, it's time to tell the LLM what we want to do. The Quarkus LangChain4J extension provides a declarative way to describe LLM interactions. The idea is the same as the Quarkus REST client. We model the interaction using an interface annotated with `@RegisterAiService`:"
msgstr "Una vez que tenemos la extensión, es hora de decirle al LLM lo que queremos hacer. La extensión Quarkus LangChain4J proporciona una forma declarativa de describir las interacciones LLM. La idea es la misma que la del cliente REST de Quarkus. Modelamos la interacción utilizando una interfaz anotada con `@RegisterAiService`:"

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:62
#, no-wrap
msgid ""
"@RegisterAiService\n"
"public interface TriageService {\n"
"    // methods.\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:65
#, fuzzy
msgid "The rest of the application would be able to use the LLM by injecting the `TriageService` interface and calling the methods."
msgstr "El resto de la aplicación podría utilizar el LLM inyectando la interfaz `TriageService` y llamando a los métodos."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:67
#, fuzzy
msgid "Speaking about methods, that's where the magic happens. You will describe what you want the LLM to do using natural language. First, you start with `@SystemMessage` to define the role and scope. Then, you can use `@UserMessage` to describe the task."
msgstr "Hablando de métodos, ahí es donde ocurre la magia. Describirás lo que quieres que haga el LLM utilizando lenguaje natural. Primero, empieza con `@SystemMessage` para definir la función y el ámbito. Después, puedes utilizar `@UserMessage` para describir la tarea."

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:82
#, no-wrap
msgid ""
"@RegisterAiService\n"
"public interface TriageService {\n"
"    @SystemMessage(\"\"\"\n"
"        You are working for a bank, processing reviews about \n"
"        financial products. Triage reviews into positive and \n"
"        negative ones, responding with a JSON document.\n"
"        \"\"\"\n"
"    )\n"
"    @UserMessage(\"\"\"\n"
"        Your task is to process the review delimited by ---.\n"
"        Apply sentiment analysis to the review to determine \n"
"        if it is positive or negative, considering various languages.\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:87
#, no-wrap
msgid ""
"        For example:\n"
"        - `I love your bank, you are the best!` is a 'POSITIVE' review\n"
"        - `J'adore votre banque` is a 'POSITIVE' review\n"
"        - `I hate your bank, you are the worst!` is a 'NEGATIVE' review\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:94
#, no-wrap
msgid ""
"        Respond with a JSON document containing:\n"
"        - the 'evaluation' key set to 'POSITIVE' if the review is \n"
"        positive, 'NEGATIVE' otherwise\n"
"        - the 'message' key set to a message thanking or apologizing \n"
"        to the customer. These messages must be polite and match the     \n"
"        review's language.\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:101
#, no-wrap
msgid ""
"        ---\n"
"        {review}\n"
"        ---\n"
"    \"\"\")\n"
"    TriagedReview triage(String review);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:104
#, fuzzy
msgid "Voilà! That's all you need to do to describe the interaction with the LLM. The instructions follow a set of principles to shape the LLM response. Learn more about these techniques in https://docs.quarkiverse.io/quarkus-langchain4j/dev/prompt-engineering.html[the dedicated prompt engineering page]."
msgstr "¡Voilà! Eso es todo lo que tienes que hacer para describir la interacción con el LLM. Las instrucciones siguen una serie de principios para dar forma a la respuesta de la LLM. Obtén más información sobre estas técnicas en  link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/prompt-engineering.html[la página dedicada a la ingeniería] de instrucciones."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:106
#, fuzzy
msgid "Now, to call the LLM from the application code, just inject the `TriageService` and call the `triage` method:"
msgstr "Ahora, para llamar al LLM desde el código de la aplicación, basta con inyectar el `TriageService` y llamar al método `triage`:"

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:111
#, no-wrap
msgid ""
"@Path(\"/review\")\n"
"public class ReviewResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:114
#, no-wrap
msgid ""
"    @Inject\n"
"    TriageService triage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:118
#, no-wrap
msgid ""
"    record Review(String review) {\n"
"      // User text\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:123
#, no-wrap
msgid ""
"    @POST\n"
"    public TriagedReview triage(Review review) {\n"
"        return triage.triage(review.review());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:125
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:154
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:128
#, fuzzy
msgid "That's it! The LLM is now integrated into the application. The `TriageService` interface is used as an ambassador to call the LLM. This declarative approach has many advantages:"
msgstr "Ya está. El LLM está ahora integrado en la aplicación. La interfaz `TriageService` se utiliza como embajadora para llamar al LLM. Este enfoque declarativo tiene muchas ventajas:"

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:130
#, fuzzy
msgid "Testability - you can easily mock the LLM by providing a fake implementation of the interface."
msgstr "Testabilidad: puede simular fácilmente el LLM proporcionando una implementación falsa de la interfaz."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:131
#, fuzzy
msgid "Observability - you can use the Quarkus metrics annotation to monitor the LLM methods."
msgstr "Observabilidad: puede utilizar la anotación de métricas de Quarkus para supervisar los métodos LLM."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:132
#, fuzzy
msgid "Resilience - you can use the Quarkus fault-tolerance annotations to handle failures, timeouts, and other transient issues."
msgstr "Resiliencia: puede utilizar las anotaciones de tolerancia a fallos de Quarkus para gestionar fallos, tiempos de espera y otros problemas transitorios."

#. type: Title ==
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:133
#, fuzzy, no-wrap
msgid "Tools and Document loader"
msgstr "Herramientas y cargador de documentos"

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:136
#, fuzzy
msgid "The previous example is a bit simplistic. In the real world, you will need to extend the LLM knowledge with tools and document stores. The `@RegisterAiService` annotation lets you define the tools and document stores to use."
msgstr "El ejemplo anterior es un poco simplista. En el mundo real, necesitarás ampliar el conocimiento LLM con herramientas y almacenes de documentos. La anotación `@RegisterAiService` le permite definir las herramientas y los almacenes de documentos a utilizar."

#. type: Title ===
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:137
#, fuzzy, no-wrap
msgid "Tools"
msgstr "Herramientas"

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:140
#, fuzzy
msgid "Tools are methods that the LLM can invoke."
msgstr "Las herramientas son métodos que el LLM puede invocar."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:142
#, fuzzy
msgid "To declare a tool, just use the `@Tool` annotation on a _bean_ method:"
msgstr "Para declarar una herramienta, basta con utilizar la anotación `@Tool` en un método _bean_:"

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:147
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomerRepository implements PanacheRepository<Customer> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:152
#, no-wrap
msgid ""
"    @Tool(\"get the customer name for the given customerId\")\n"
"    public String getCustomerName(long id) {\n"
"        return find(\"id\", id).firstResult().name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:157
#, fuzzy
msgid "In this example, we are using the Panache repository pattern to access the database. We have a specific method annotated with `@Tool` to retrieve the customer name. When the LLM needs to get the customer name, it instructs Quarkus to call this method and receives the result."
msgstr "En este ejemplo, estamos utilizando el patrón de repositorio Panache para acceder a la base de datos. Tenemos un método específico anotado con `@Tool` para recuperar el nombre del cliente. Cuando el LLM necesita obtener el nombre del cliente, ordena a Quarkus que llame a este método y recibe el resultado."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:159
#, fuzzy
msgid "Obviously, it's not a good idea to expose every operation to the LLM. So, in addition to `@Tool`, you need to list the set of tools you allow the LLM to invoke in the `@RegisterAiService` annotation:"
msgstr "Obviamente, no es una buena idea exponer todas las operaciones al LLM. Así que, además de `@Tool`, necesitas listar el conjunto de herramientas que permites que el LLM invoque en la anotación `@RegisterAiService`:"

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:169
#, no-wrap
msgid ""
"@RegisterAiService(\n"
"    tools = { TransactionRepository.class, CustomerRepository.class },\n"
"    chatMemoryProviderSupplier = RegisterAiService.BeanChatMemoryProviderSupplier.class\n"
")\n"
"public interface FraudDetectionAi {\n"
"   // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:172
#, fuzzy
msgid "The `chatMemoryProviderSupplier` configuration may raise questions. When using tools, a sequence of messages unfolds behind the scenes. It becomes necessary to configure the AI service's memory to adeptly track these interactions. The `chatMemoryProviderSupplier` allows configuring how the memory is handled. The value `BeanChatMemoryProviderSupplier.class` instructs Quarkus to look for a `ChatMemoryProvider` bean, like the following:"
msgstr "La configuración de `chatMemoryProviderSupplier` puede plantear dudas. Cuando se utilizan herramientas, una secuencia de mensajes se desarrolla entre bastidores. Se hace necesario configurar la memoria del servicio de IA para seguir con destreza estas interacciones. El `chatMemoryProviderSupplier` permite configurar cómo se maneja la memoria. El valor `BeanChatMemoryProviderSupplier.class` indica a Quarkus que busque un frijol `ChatMemoryProvider`, como el siguiente:"

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:177
#, no-wrap
msgid ""
"@RequestScoped\n"
"public class ChatMemoryBean implements ChatMemoryProvider {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:179
#, no-wrap
msgid "    Map<Object, ChatMemory> memories = new ConcurrentHashMap<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:189
#, no-wrap
msgid ""
"    @Override\n"
"    public ChatMemory get(Object memoryId) {\n"
"        return memories.computeIfAbsent(memoryId, \n"
"            id -> MessageWindowChatMemory.builder()\n"
"                    .maxMessages(20)\n"
"                    .id(memoryId)\n"
"                    .build()\n"
"            );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:195
#, no-wrap
msgid ""
"    @PreDestroy\n"
"    public void close() {\n"
"        memories.clear();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:198
#, fuzzy
msgid "At the moment, only the OpenAI models support tools."
msgstr "Por el momento, sólo los modelos de OpenAI admiten herramientas."

#. type: Title ===
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:199
#, fuzzy, no-wrap
msgid "Document stores"
msgstr "Almacenes de documentos"

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:202
#, fuzzy
msgid "Document stores are a way to extend the LLM knowledge with your own data. This approach - called Retrieval Augmented Generation (_RAG_) - requires two processes:"
msgstr "Los almacenes de documentos son una forma de ampliar los conocimientos de LLM con sus propios datos. Este enfoque -denominado Retrieval Augmented Generation _(R_AG)- requiere dos procesos:"

#. type: Labeled list
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:203
#, fuzzy, no-wrap
msgid "The ingestion process"
msgstr "El proceso de ingestión"

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:204
#, fuzzy
msgid "you ingest documents into a document store. The documents are not stored as-is, but an embedding is computed. This embedding is a vector representation of the document."
msgstr "se introducen documentos en un almacén de documentos. Los documentos no se almacenan tal cual, sino que se calcula una incrustación. Esta incrustación es una representación vectorial del documento."

#. type: Labeled list
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:205
#, fuzzy, no-wrap
msgid "The RAG process"
msgstr "El proceso RAG"

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:206
#, fuzzy
msgid "in the Quarkus application, you need to declare the document store and the embedding to use. Thus, before calling the LLM, it retrieves the relevant documents from the store (that's where the vector representation is useful) and attaches them to the LLM context (which essentially means adding the retrieved information from the document to the user message)."
msgstr "en la aplicación Quarkus, necesitas declarar el almacén de documentos y la incrustación a utilizar. Así, antes de llamar al LLM, recupera los documentos relevantes del almacén (ahí es donde la representación vectorial es útil) y los adjunta al contexto LLM (lo que esencialmente significa añadir la información recuperada del documento al mensaje de usuario)."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:208
#, fuzzy
msgid "The Quarkus LangChain4j extension provides facilities for both processes."
msgstr "La extensión LangChain4j de Quarkus proporciona facilidades para ambos procesos."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:210
#, fuzzy
msgid "The following code shows how to ingest a document into a Redis document store:"
msgstr "El siguiente código muestra cómo ingerir un documento en un almacén de documentos Redis:"

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:215
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class IngestorExample {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:222
#, no-wrap
msgid ""
"    /**\n"
"     * The embedding store (the database).\n"
"     * The bean is provided by the quarkus-langchain4j-redis extension.\n"
"     */\n"
"    @Inject\n"
"    RedisEmbeddingStore store;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:229
#, no-wrap
msgid ""
"    /**\n"
"     * The embedding model (how the vector of a document is computed).\n"
"     * The bean is provided by the LLM (like openai) extension.\n"
"     */\n"
"    @Inject\n"
"    EmbeddingModel embeddingModel;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:239
#, no-wrap
msgid ""
"    public void ingest(List<Document> documents) {\n"
"        var ingestor = EmbeddingStoreIngestor.builder()\n"
"                .embeddingStore(store)\n"
"                .embeddingModel(embeddingModel)\n"
"                .documentSplitter(recursive(500, 0))\n"
"                .build();  \n"
"        ingestor.ingest(documents);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:242
#, fuzzy
msgid "Then, generally, in another application, you can use the populated document store to extend the LLM knowledge. First, create a bean implementing the `Retriever<TextSegment>` interface:"
msgstr "Entonces, generalmente, en otra aplicación, puedes utilizar el almacén de documentos poblado para extender el conocimiento LLM. En primer lugar, crea un bean que implemente la interfaz `Retriever&amp;lt;TextSegment&amp;gt;`:"

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:247
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RetrieverExample implements Retriever<TextSegment> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:249
#, no-wrap
msgid "    private final EmbeddingStoreRetriever retriever;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:253
#, no-wrap
msgid ""
"    RetrieverExample(RedisEmbeddingStore store, EmbeddingModel model) {\n"
"        retriever = EmbeddingStoreRetriever.from(store, model, 20);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:259
#, no-wrap
msgid ""
"    @Override\n"
"    public List<TextSegment> findRelevant(String s) {\n"
"        return retriever.findRelevant(s);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:262
#, fuzzy
msgid "Then, add the document store and the retriever to the `@RegisterAiService` annotation:"
msgstr "A continuación, añada el almacén de documentos y el recuperador a la anotación `@RegisterAiService`:"

#. type: delimited block -
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:271
#, no-wrap
msgid ""
"@RegisterAiService(\n"
"    retrieverSupplier = RegisterAiService.BeanRetrieverSupplier.class\n"
")\n"
"public interface MyAiService {\n"
"// ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:274
#, fuzzy
msgid "`RegisterAiService.BeanRetrieverSupplier.class` is a special value looking for the `Retriever` bean in the Quarkus application."
msgstr "`RegisterAiService.BeanRetrieverSupplier.class` es un valor especial que busca el frijol `Retriever` en la aplicación Quarkus."

#. type: Title ==
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:275
#, fuzzy, no-wrap
msgid "Final notes"
msgstr "Notas finales"

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:278
#, fuzzy
msgid "This post presented the Quarkus LangChain4j extension. This is the first version of the extension, and we continue exploring and experimenting with approaches to integrate LLMs into Quarkus applications. We are looking for feedback and ideas to improve these integrations. We are working on removing some rough angles, and exploring other ways to integrate LLMs and to bring developer joy when integrating with LLMs."
msgstr "Este post presentaba la extensión LangChain4j de Quarkus. Esta es la primera versión de la extensión, y seguimos explorando y experimentando con enfoques para integrar LLMs en aplicaciones Quarkus. Estamos buscando comentarios e ideas para mejorar estas integraciones. Estamos trabajando en la eliminación de algunos ángulos ásperos, y explorando otras maneras de integrar LLMs y para traer alegría a los desarrolladores cuando se integran con LLMs."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:280
#, fuzzy
msgid "This extension would not have been possible without the fantastic work from Dmytro Liubarskyi on the LangChain4j library. Our collaboration has allowed us to provide a Quarkus-friendly approach to integrate the library (including native compilation support) and shape a new way to integrate LLMs in Quarkus applications. The current design was tailored to enable Quarkus applications to use LLM easily. You can basically hook up any of your _beans_ as tools or ingest data into a store. In addition, any of your bean can now interact with an LLM."
msgstr "Esta extensión no habría sido posible sin el fantástico trabajo de Dmytro Liubarskyi en la biblioteca LangChain4j. Nuestra colaboración nos ha permitido proporcionar un enfoque amigable con Quarkus para integrar la librería (incluyendo soporte de compilación nativa) y dar forma a una nueva manera de integrar LLMs en aplicaciones Quarkus. El diseño actual se ha adaptado para que las aplicaciones de Quarkus puedan utilizar LLM fácilmente. Básicamente, puedes conectar cualquiera de tus _beans_ como herramientas o ingerir datos en un almacén. Además, ahora cualquiera de tus beans puede interactuar con un LLM."

#. type: Plain text
#: upstream/_posts/2023-11-16-quarkus-meets-langchain4j.adoc:281
#, fuzzy
msgid "We are looking forward to continuing this collaboration and to see what you will build with this extension."
msgstr "Estamos deseando continuar esta colaboración y ver lo que construirá con esta extensión."
