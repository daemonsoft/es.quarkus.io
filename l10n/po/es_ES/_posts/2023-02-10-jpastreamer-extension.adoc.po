# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-03-06 12:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "Express Hibernate Queries as Type-Safe Java Streams"
msgstr "Expresar consultas de Hibernate como flujos Java de tipo seguro"

#. type: YAML Front Matter: synopsis
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "Writing Hibernate queries using the Criteria API can be anything but intuitive and comes at the expense of wordiness. In this article, you will learn how the JPAStreamer Quarkus extension facilitates type-safe Hibernate queries without unnecessary complexity."
msgstr "Escribir consultas Hibernate utilizando la API Criteria puede ser cualquier cosa menos intuitivo y se hace a expensas de la palabrería. En este artículo, aprenderá cómo la extensión JPAStreamer Quarkus facilita las consultas Hibernate de tipo seguro sin complejidad innecesaria."

#: _posts/2023-02-10-jpastreamer-extension.adoc
msgid "Writing Hibernate queries using the Criteria API can be anything but intuitive and comes at the expense of wordiness. In this article, you will learn how the  Quarkus extension facilitates type-safe Hibernate queries without unnecessary complexity."
msgstr ""

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "As much as the JPA Criteria builder is expressive, JPA queries are often equally verbose, and the API itself can be unintuitive to use, especially for newcomers. In the Quarkus ecosystem, Panache is a partial remedy for these problems when using Hibernate ORM. Still, I find myself juggling the Panache’s helper methods, preconfigured Enums and raw Strings when composing anything but the simplest of queries. You could claim I am just inexperienced and impatient or instead acknowledge that the perfect API is frictionless to use for everyone. Thus, the user experience of writing JPA queries can be further improved in that direction."
msgstr "Por mucho que el constructor de JPA Criteria sea expresivo, las consultas JPA son a menudo igualmente verbosas, y la API en sí puede ser poco intuitiva de usar, especialmente para los recién llegados. En el ecosistema Quarkus, Panache es un remedio parcial para estos problemas cuando se utiliza Hibernate ORM. Aún así, me encuentro haciendo malabarismos con los métodos de ayuda de Panache, Enums preconfigurados y Strings sin procesar cuando compongo cualquier cosa que no sea la más simple de las consultas. Se podría decir que no tengo experiencia y que soy impaciente o, por el contrario, reconocer que la API perfecta es fácil de usar para todo el mundo. Por lo tanto, la experiencia del usuario al escribir consultas JPA se puede mejorar aún más en esa dirección."

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "One of the remaining shortcomings is that raw Strings are inherently not type-safe, meaning my IDE rejects me the helping hand of code completion and wish me good luck at best. On the upside, Quarkus facilitates application relaunches in a split second to issue quick verdicts on my code. And nothing beats the heart-felt joy and genuine surprise when I have composed a working query on the fifth, rather than the tenth, attempt..."
msgstr "Uno de los defectos restantes es que las cadenas sin procesar no son intrínsecamente seguras desde el punto de vista tipográfico, lo que significa que mi IDE me rechaza la ayuda de la finalización de código y me desea buena suerte en el mejor de los casos. En el lado positivo, Quarkus facilita el relanzamiento de la aplicación en una fracción de segundo para emitir veredictos rápidos sobre mi código. Y no hay nada mejor que la alegría sincera y la sorpresa genuina cuando he compuesto una consulta que funciona al quinto, en lugar del décimo, intento..."

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "With this in mind, we built the open source library JPAStreamer to make the process of writing Hibernate queries more intuitive and less time-consuming, while leaving your existing codebase intact. It achieves this goal by allowing queries to be expressed as standard Java Streams. Upon execution, JPAStreamer translates the Stream pipeline to a HQL query for efficient execution and thereby avoids materialising anything but the relevant results."
msgstr "Con esto en mente, hemos creado la biblioteca de código abierto JPAStreamer para que el proceso de escribir consultas Hibernate sea más intuitivo y lleve menos tiempo, dejando intacta la base de código existente. Consigue este objetivo permitiendo que las consultas se expresen como Java Streams estándar. Tras la ejecución, JPAStreamer traduce el flujo a una consulta HQL para una ejecución eficiente y, por lo tanto, evita materializar nada más que los resultados relevantes."

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Let me take an example - in some random database exists a table called person represented in a Hibernate application by the following standard `@Entity`:"
msgstr "Pondré un ejemplo: en una base de datos cualquiera existe una tabla llamada persona representada en una aplicación Hibernate por el siguiente estándar `@Entity`:"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "To fetch the `Person` with an `Id` of 1 using JPAStreamer and Hibernate ORM, all you need is the following:"
msgstr "Para obtener el `Person` con un `Id` de 1 utilizando JPAStreamer y Hibernate ORM, todo lo que necesita es lo siguiente:"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Initialize JPAStreamer in one line, the underlying JPA provider handles the DB configuration."
msgstr "Inicializa JPAStreamer en una línea, el proveedor JPA subyacente se encarga de la configuración de la BD."

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "The Stream source is set to be the Person table."
msgstr "El origen del flujo es la tabla Persona."

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "The filter operation is treated as a SQL WHERE clause and the condition is expressed type-safely with JPAStreamer predicates (more on this to follow)."
msgstr "La operación de filtrado se trata como una cláusula SQL WHERE y la condición se expresa de forma segura con predicados JPAStreamer (más sobre esto más adelante)."

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Despite it looking as if JPAStreamer operates on all `Person` objects, the pipeline is optimized to a single query, in this case:"
msgstr "A pesar de que parezca que JPAStreamer opera sobre todos los objetos de `Person`, el pipeline está optimizado para una única consulta, en este caso:"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Thus, only the `Person` matching the search criteria is ever materialized."
msgstr "Así, sólo se materializa la `Person` que coincide con los criterios de búsqueda."

#: _posts/2023-02-10-jpastreamer-extension.adoc
msgid "Next, we can look at a more complex example in which I am searching  for persons with a first name ending with an “A” and a last name that starts with “B”. The matches are sorted primarily by the first name and secondly by last name. I further decide to apply an offset of 5, excluding the first five results, and to limit the total results to 10. Here is the Stream pipeline to achieve this task:"
msgstr ""

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Filters can be combined with the and/or operators"
msgstr "Los filtros pueden combinarse con los operadores y/o"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Easily filter on one or more properties"
msgstr "Filtrar fácilmente una o varias propiedades"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Skip the first 5 Persons"
msgstr "Sáltate las 5 primeras Personas"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Return at most 10 Persons"
msgstr "Devolver como máximo 10 Personas"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "In the context of queries, the Stream operators filter, sort, limit, and skip all have a natural mapping that makes the resulting query expressive and intuitive to read while remaining compact."
msgstr "En el contexto de las consultas, los operadores de flujo filtrar, ordenar, limitar y omitir tienen una correspondencia natural que hace que la consulta resultante sea expresiva e intuitiva de leer sin dejar de ser compacta."

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "The Stream above is translated by JPAStreamer to the following HQL statement:"
msgstr "El Stream anterior es traducido por JPAStreamer a la siguiente sentencia HQL:"

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "How JPAStreamer works"
msgstr "Cómo funciona JPAStreamer"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Okay, it looks simple. But how does it work? JPAstreamer uses an annotation processor to form a meta-model at compile time. It inspects any classes marked with the standard JPA annotation `@Entity`, and for every entity `Foo.class`, a corresponding `Foo$.class` is created. The generated classes represent entity attributes as Fields used to form predicates on the form `User$.firstName.startsWith(\"A\")` that can be interpreted by JPAStreamer's query optimizer."
msgstr "Vale, parece sencillo. Pero, ¿cómo funciona? JPAstreamer utiliza un procesador de anotaciones para formar un meta-modelo en tiempo de compilación. Inspecciona cualquier clase marcada con la anotación estándar de JPA `@Entity`, y para cada entidad `Foo.class`, se crea la correspondiente `Foo$.class`. Las clases generadas representan los atributos de la entidad como campos utilizados para formar predicados de la forma `User$.firstName.startsWith(\"A\")` que pueden ser interpretados por el optimizador de consultas de JPAStreamer."

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "It is worth repeating that JPAStreamer does not alter or disturb the existing codebase but merely extends the API to handle Java Stream queries."
msgstr "Vale la pena repetir que JPAStreamer no altera ni perturba el código base existente, sino que simplemente amplía la API para manejar las consultas Java Stream."

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "Installing the JPAstreamer Extension"
msgstr "Instalación de la extensión JPAstreamer"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "JPAStreamer is installed as any other Quarkus extension, using a Maven dependency:"
msgstr "JPAStreamer se instala como cualquier otra extensión de Quarkus, utilizando una dependencia de Maven:"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "After the dependency is added, rebuild your Quarkus application to trigger JPAStreamer’s annotation processor. The installation is complete once the generated fields reside in `/target/generated-sources`; you’ll recognise them by the trailing $ in the classnames, e.g. `Person$.class`."
msgstr "Una vez añadida la dependencia, reconstruye tu aplicación Quarkus para activar el procesador de anotaciones de JPAStreamer. La instalación se completa una vez que los campos generados residen en `/target/generated-sources`; los reconocerás por el $ final en los nombres de clase, por ejemplo, `Person$.class`."

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "JPAStreamer requires an underlying JPA provider, such as Hibernate ORM. For this reason, JPAStreamer needs no additional configuration as the database integration is taken care of by the JPA provider."
msgstr "JPAStreamer requiere un proveedor JPA subyacente, como Hibernate ORM. Por esta razón, JPAStreamer no necesita ninguna configuración adicional, ya que la integración de la base de datos es realizada por el proveedor de JPA."

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "JPAStreamer and Panache"
msgstr "JPAStreamer y Panache"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Any Panache fan will note that JPAStreamer shares some of its objectives with Panache, in simplifying many common queries. Still, JPAStreamer distinguishes itself by instilling more confidence in the queries with its type-safe Stream interface. Luckily however, no one if forced to take a pick as Panache and JPAStreamer work seamlessly alongside each other."
msgstr "Cualquier fan de Panache notará que JPAStreamer comparte algunos de sus objetivos con Panache, en la simplificación de muchas consultas comunes. Sin embargo, JPAStreamer se distingue por infundir más confianza en las consultas con su interfaz Stream de tipo seguro. Afortunadamente, sin embargo, nadie está obligado a elegir, ya que Panache y JPAStreamer trabajan perfectamente juntos."

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "link:https://github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[Here] is an example Quarkus application that uses both JPAStreamer and Panache."
msgstr "link:https//github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[Aquí] hay un ejemplo de aplicación Quarkus que utiliza tanto JPAStreamer como Panache."

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "At the time of writing, JPAStreamer does not have support for Panache’s Active Record Pattern, as it relies on standard JPA Entities to generate its meta model. This will likely change in the near future."
msgstr "En el momento de escribir esto, JPAStreamer no tiene soporte para el Active Record Pattern de Panache, ya que se basa en entidades JPA estándar para generar su meta modelo. Es probable que esto cambie en un futuro próximo."

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumen"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "JPA in general, and Hibernate ORM in particular, has greatly simplified application database access, but its API sometimes forces unnecessary complexity. With JPAstreamer, you can utilize JPA while keeping your codebase clean and maintainable."
msgstr "JPA en general, e Hibernate ORM en particular, han simplificado enormemente el acceso de las aplicaciones a las bases de datos, pero su API a veces obliga a una complejidad innecesaria. Con JPAstreamer, puede utilizar JPA manteniendo su código limpio y fácil de mantener."

#: _posts/2023-02-10-jpastreamer-extension.adoc
msgid "Resources"
msgstr ""

#: _posts/2023-02-10-jpastreamer-extension.adoc
msgid "**GitHub:** link:https://github.com/quarkiverse/quarkus-jpastreamer[github.com/quarkiverse/quarkus-jpastreamer]"
msgstr ""

#: _posts/2023-02-10-jpastreamer-extension.adoc
msgid "**Homepage:** link:https://jpastreamer.org[jpastreamer.org]"
msgstr ""

#: _posts/2023-02-10-jpastreamer-extension.adoc
msgid "**JPAStreamer Quarkus Demo:** link:https//github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache]"
msgstr ""

#: _posts/2023-02-10-jpastreamer-extension.adoc
msgid "**Documentation:** link:https://speedment.github.io/jpa-streamer[speedment.github.io/jpa-streamer]"
msgstr ""

#: _posts/2023-02-10-jpastreamer-extension.adoc
msgid "**Gitter Support Chat:** link:https://gitter.im/jpa-streamer[gitter.im/jpa-streamer]"
msgstr ""
