# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-08-29 07:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "How to implement Kafka Serializers and Deserializers?"
msgstr "¿Cómo implementar los serializadores y deserializadores de Kafka?"

#. type: YAML Front Matter: synopsis
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "JSON, Avro and Custom Kafka Serializers and Deserializers with Quarkus"
msgstr "Serializadores y deserializadores JSON, Avro y Kafka personalizados con Quarkus"

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"When your application writes a _record_ into a Kafka topic or when it consumes a _record_ from a Kafka topic, a mechanism of serialization and deserialization happens.\n"
"The serialization process transforms the business objects you want to send to Kafka into bytes.\n"
"The deserialization process is the opposite.\n"
"It receives the bytes from Kafka and recreates the business objects."
msgstr ""

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "This blog post explores different approaches for this serialization and deserialization and explains how you can implement a custom serializer and deserializer. It also highlights facilities provided by the Kafka connector from Quarkus."
msgstr "Esta entrada del blog explora diferentes enfoques para esta serialización y deserialización y explica cómo se puede implementar un serializador y deserializador personalizado. También destaca las facilidades proporcionadas por el conector Kafka de Quarkus."

#. type: Title ==
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "Why do I need a custom serializer and deserializer?"
msgstr "¿Por qué necesito un serializador y un deserializador personalizados?"

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"https://javadoc.io/static/org.apache.kafka/kafka-clients/3.2.1/org/apache/kafka/common/serialization/package-summary.html[Kafka] provides a set of serializers and deserializers for the common types: `String`, `Double`, `Integer`, `Bytes`...\n"
"But that's rarely enough for business objects, even for objects are simple as:"
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"Fortunately, Kafka lets us implement our own.\n"
"To achieve this, you need to implement the following interfaces:"
msgstr ""

#. type: Block title
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "The Serializer interface"
msgstr "La interfaz del serializador"

#. type: Block title
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "The Deserializer interface"
msgstr "La interfaz del Deserializador"

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"Once implemented, you need to configure your Kafka producer and consumer's key and value serializer and deserializer.\n"
"If you are using the Kafka connector from Quarkus, it will look like this:"
msgstr ""

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "But, no worries, Quarkus has a few magic tricks for you."
msgstr "Pero, no te preocupes, Quarkus tiene algunos trucos de magia para ti."

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "In the rest of this post, we will use the following application:"
msgstr "En el resto de este post, utilizaremos la siguiente aplicación:"

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"The code can be found on https://github.com/cescoffier/quarkus-kafka-serde-demo.\n"
"We will develop three variants:"
msgstr ""

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The first version uses JSON."
msgstr "La primera versión utiliza JSON."

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The second version uses Avro."
msgstr "La segunda versión utiliza Avro."

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The third version uses custom (and dumb) serializer and deserializer."
msgstr "La tercera versión utiliza un serializador y un deserializador personalizados (y tontos)."

#. type: Title ==
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "Using JSON"
msgstr "Uso de JSON"

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"Using JSON with Kafka is very popular.\n"
"As most web applications use JSON to exchange messages, using it with Kafka sounds like a natural extension."
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"In our case, it means transforming the instances of https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/json-serde/json-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/Hero.java[Hero] to a JSON document and then using the String serializer.\n"
"For the deserialization process, we would do the reverse process.\n"
"To do that with Quarkus, you have *nothing* to do: Quarkus generates the custom JSON serializer and deserializer for you."
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"In the https://github.com/cescoffier/quarkus-kafka-serde-demo/tree/main/json-serde[json-serde directory], you can find a version of the application using JSON to serialize and deserialize the records.\n"
"It does not contain any custom code or configuration.\n"
"Quarkus automatically detects that you need to write and consume Heroes and generates the serializer and deserializer for you.\n"
"It also configures the channels for you.\n"
"Of course, you can override the configuration, but it's what you want most of the time."
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"To run this application, open two terminals.\n"
"In the first one, navigate to `json-serde/json-serde-publisher`, and run `mvn quarkus:dev`.\n"
"In the second terminal, navigate to `json-serde/json-serde-consumer`, and run `mvn quarkus:dev`.\n"
"Then, open a browser to http://localhost:8080.\n"
"Every 5 seconds, a new picture of a hero is displayed."
msgstr ""

#. type: Title ==
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "Using Avro"
msgstr "Uso de Avro"

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"The second approach uses https://avro.apache.org/[Avro].\n"
"Avro has several advantages over (bare) JSON:"
msgstr ""

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "It's a binary and compact protocol. The payloads will be a lot smaller than with JSON."
msgstr "Es un protocolo binario y compacto. Las cargas útiles serán mucho más pequeñas que con JSON."

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The serialization and deserialization processes are a lot faster (avoiding reflection)."
msgstr "Los procesos de serialización y deserialización son mucho más rápidos (evitando la reflexión)."

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The format of the message is defined using a schema stored on a schema registry which enables versioning and enforces the structure."
msgstr "El formato del mensaje se define mediante un esquema almacenado en un registro de esquemas que permite el control de versiones y refuerza la estructura."

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"The last point is essential.\n"
"To use Avro, you need a schema registry.\n"
"In this post, we are using https://www.apicur.io/registry/[Apicurio], but you can use the https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registry] or https://github.com/aiven/karapace[Karapace].\n"
"Quarkus provides a dev service for Apicurio, so you have nothing to do (as soon as you can run containers on your machine)."
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"To use Avro, we need a schema.\n"
"In https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-consumer/src/main/avro/hero.avsc[hero.avsc], you can find the schema representing our heroes:"
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"Avro relies on code generation.\n"
"It processes the schema to generate Java classes with the defined fields and serialization and deserialization methods."
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"While in general, using code generation is an extra step, with Quarkus, it's built-in!\n"
"Once you have a schema in `src/main/avro`, it generates the code for you, and you are ready to use the produced classes."
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"In https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/AvroPublisherApp.java[AvroPublisherApp] and https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-consumer/src/main/java/me/escoffier/quarkus/AvroConsumerResource.java[AvroConsumerResource], we are using the `Hero` class generated from the schema.\n"
"As an example, the consumer application looks like this:"
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"Quarkus automatically finds the serializer and deserializer and configures the channels, so again: *no config*.\n"
"However, you still need to instruct Apicurio to register the schema.\n"
"In general, it's a manual operation, but for development, you can use the following property:"
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"To run this application, open two terminals.\n"
"In the first one, navigate to `avro-serde/avro-serde-publisher`, and run `mvn quarkus:dev`.\n"
"In the second terminal, navigate to `avro-serde/avro-serde-consumer`, and run `mvn quarkus:dev`.\n"
"Then, open a browser to http://localhost:8080.\n"
"As for the JSON variant, every 5 seconds, a new picture of a hero is displayed.\n"
"This time the Kafka records are serialized using Avro"
msgstr ""

#. type: Title ==
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "Writing a custom serializer and deserializer"
msgstr "Escribir un serializador y deserializador personalizado"

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"Of course, you can still write your custom serializer and deserializer.\n"
"As mentioned above, you need to implement the `Serializer` and `Deserializer` interfaces."
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid "For example, the  https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/custom-serde/custom-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/HeroSerializer.java[HeroSerializer class] contains a straightforward (and inefficient) approach to serializing our heroes:"
msgstr ""

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/custom-serde/custom-serde-consumer/src/main/java/me/escoffier/quarkus/HeroDeserializer.java[HeroDeserializer class] contains the deserialization counterpart."
msgstr "La  link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/custom-serde/custom-serde-consumer/src/main/java/me/escoffier/quarkus/HeroDeserializer.java[clase HeroDeserializer] contiene la contraparte de deserialización."

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"As before, Quarkus discovers these implementations and configures the channels for you.\n"
"So you do not have to configure anything."
msgstr ""

#: _posts/2022-08-30-kafka-serde.adoc
msgid ""
"Custom serializers and deserializers can receive configuration attributes.\n"
"They receive the producer/consumer configuration in the `configure` method."
msgstr ""

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "Custom serializers and deserializers cannot be CDI beans. Kafka instantiates them directly using reflection."
msgstr "Los serializadores y deserializadores personalizados no pueden ser beans CDI. Kafka los instanciará directamente utilizando la reflexión."

#. type: Title ==
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "Conclusión"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "This post explores different possibilities to serialize and deserialize your messages with Kafka and how Quarkus reduces the amount of boilerplate and configuration you need to use."
msgstr "Este post explora diferentes posibilidades para serializar y deserializar tus mensajes con Kafka y cómo Quarkus reduce la cantidad de boilerplate y configuración que necesitas utilizar."

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "So, what should you use?"
msgstr "Entonces, ¿qué debe utilizar?"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "JSON is massively used, but the lack of structure verification, by default, can quickly be a problem if the format evolves rapidly."
msgstr "JSON se utiliza masivamente, pero la falta de verificación de la estructura, por defecto, puede ser rápidamente un problema si el formato evoluciona rápidamente."

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "Avro provides better performances and handles validation and evolutions. But it requires a schema registry. If your system exchanges lots of messages with evolving structures, Avro should be preferred. Also, Avro produces smaller payloads."
msgstr "Avro ofrece mejores prestaciones y se encarga de la validación y las evoluciones. Pero requiere un registro de esquemas. Si su sistema intercambia muchos mensajes con estructuras en evolución, es preferible utilizar Avro. Además, Avro produce cargas útiles más pequeñas."

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "If you have stringent requirements not covered by the JSON and Avro approaches, you can develop a custom serializer and deserializer."
msgstr "Si tiene requisitos estrictos no cubiertos por los enfoques JSON y Avro, puede desarrollar un serializador y deserializador personalizado."

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "Note that JSON can be combined with JSON-Schema (with the schema stored on a schema registry). Protobuf is also a possible alternative if you prefer a binary format."
msgstr "Tenga en cuenta que JSON puede combinarse con JSON-Schema (con el esquema almacenado en un registro de esquemas). Protobuf es también una posible alternativa si prefieres un formato binario."
