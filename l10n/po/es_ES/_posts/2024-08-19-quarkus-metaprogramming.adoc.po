msgid ""
msgstr ""
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Leveraging Quarkus build-time metaprogramming capabilities to improve Jackson's serialization performance"
msgstr "Aprovechamiento de las capacidades de metaprogramación en tiempo de compilación de Quarkus para mejorar el rendimiento de serialización de Jackson"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "One of the key architectural decisions taken by Quarkus designers has been moving as much work as possible from the startup time to the build time. This choice implies a clear separation between the deployment (aka. build-time) and runtime parts of each extension, and allows to perform the biggest part of the work once and for all during the build, thus allowing the typical Quarkus application to have a smaller footprint and faster load time."
msgstr "Una de las decisiones arquitectónicas clave tomadas por los diseñadores de Quarkus ha sido trasladar la mayor cantidad de trabajo posible del tiempo de inicio al tiempo de compilación. Esta elección implica una clara separación entre las partes de despliegue (aka. tiempo de compilación) y tiempo de ejecución de cada extensión, y permite realizar la mayor parte del trabajo de una vez por todas durante la compilación, permitiendo así que la aplicación típica de Quarkus tenga una huella más pequeña y un tiempo de carga más rápido."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "A consequence of this architecture is the possibility of extensively leveraging https://en.wikipedia.org/wiki/Metaprogramming[metaprogramming], identifying and analyzing the Java classes implementing the domain model of a given application and generating other code intended to opportunely and efficiently manipulate those classes. In particular the goal of the improvement discussed in this article is replacing the standard Jackson serialization mechanism, based on reflection, with code generated at build time."
msgstr "Una consecuencia de esta arquitectura es la posibilidad de aprovechar ampliamente la link:https://en.wikipedia.org/wiki/Metaprogramming[metaprogramación] , identificando y analizando las clases Java que implementan el modelo de dominio de una aplicación dada y generando otro código destinado a manipular oportuna y eficientemente esas clases. En concreto, el objetivo de la mejora analizada en este artículo es sustituir el mecanismo de serialización estándar de Jackson, basado en la reflexión, por código generado en tiempo de compilación."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Reflection is used (and abused) by many Java frameworks and libraries to support dynamic behavior. If more work is done at build time, this dynamism is no longer needed. Reducing reflection to a bare minimum gives performance improvements. It also makes the application more suitable for compilation to a native binary (the https://docs.oracle.com/en/learn/understanding-reflection-graalvm-native-image/index.html#step-2-the-closed-world-assumption[GraalVM closed world assumption])."
msgstr "Muchos marcos de trabajo y bibliotecas Java utilizan (y abusan) de la reflexión para soportar un comportamiento dinámico. Si se trabaja más en tiempo de compilación, este dinamismo ya no es necesario. Reducir la reflexión al mínimo proporciona mejoras en el rendimiento. También hace que la aplicación sea más adecuada para la compilación a un binario nativo (el link:https://docs.oracle.com/en/learn/understanding-reflection-graalvm-native-image/index.html#step-2-the-closed-world-assumption[supuesto de mundo cerrado de GraalVM] )."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "A similar idea has been already implemented also in the area of object to JSON serialization by https://github.com/quarkusio/qson[Qson], a Quarkus extension that generates through Gizmo the bytecode of deserializer (parser) and serializer (writer) classes. However, this is a full replacement of Jackson and comes with some, quite significant, https://github.com/quarkusio/qson?tab=readme-ov-file#limitations[limitations]."
msgstr "Una idea similar ya ha sido implementada también en el área de la serialización de objetos a JSON por link:https://github.com/quarkusio/qson[Qson] , una extensión de Quarkus que genera a través de Gizmo el bytecode de clases deserializadoras (parser) y serializadoras (writer). Sin embargo, se trata de un reemplazo completo de Jackson y viene con algunas link:https://github.com/quarkusio/qson?tab=readme-ov-file#limitations[limitaciones] , bastante significativas."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "If you decide to remain on the most common choice and keep using Jackson for the JSON serialization of objects returned by the invocation of a REST endpoint, you will still pay the price of the heavily reflection-based implementation offered out of the box by that library. In this article I will illustrate how I filled this gap and, most importantly, what I learned on how to write a Quarkus extension, or in my case improve an existing one, and in particular on how to use tools like Jandex and Gizmo."
msgstr "Si decide quedarse en la opción más común y seguir utilizando Jackson para la serialización JSON de los objetos devueltos por la invocación de un endpoint REST, seguirá pagando el precio de la implementación fuertemente basada en la reflexión que ofrece de fábrica esa biblioteca. En este artículo ilustraré cómo llené este vacío y, lo que es más importante, lo que aprendí sobre cómo escribir una extensión de Quarkus, o en mi caso mejorar una existente, y en particular sobre cómo utilizar herramientas como Jandex y Gizmo."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Out-of-the-box Jackson’s reflection-based serialization"
msgstr "La serialización basada en la reflexión de Jackson out-of-the-box"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Before trying to remove the use of reflection from Jackson's serialization, let’s look at the current situation. To do so I added a https://github.com/franz1981/quarkus-profiling-workshop/blob/b0f1f61e2ed5f8b196d62bd74ad15d658e949d8c/src/main/java/profiling/workshop/json/CustomerLookupResource.java#L18[new REST endpoint] to the https://github.com/franz1981/quarkus-profiling-workshop[benchmark suite] written by https://x.com/forked_franz[Francesco Nigro] and myself that we also used for our https://www.youtube.com/watch?v=Cw4nN5L-2vU[Devoxx Belgium workshop on profiling]. The goal of this benchmark is stressing the JSON serialization, so this endpoint doesn’t do anything else other than returning and then serializing in JSON a fixed object, in essence, writing and returning a JSON like the following:"
msgstr "Antes de intentar eliminar el uso de reflection de la serialización de Jackson, echemos un vistazo a la situación actual. Para ello, he añadido un link:https://github.com/franz1981/quarkus-profiling-workshop/blob/b0f1f61e2ed5f8b196d62bd74ad15d658e949d8c/src/main/java/profiling/workshop/json/CustomerLookupResource.java#L18[nuevo endpoint REST] al link:https://github.com/franz1981/quarkus-profiling-workshop[conjunto de benchmarks] escrito por link:https://x.com/forked_franz[Francesco Nigro] y por mí que también utilizamos en nuestro link:https://www.youtube.com/watch?v=Cw4nN5L-2vU[taller de Devoxx Bélgica sobre la creación de perfiles] . El objetivo de este benchmark es enfatizar la serialización JSON, por lo que este endpoint no hace otra cosa que devolver y luego serializar en JSON un objeto fijo, en esencia, escribir y devolver un JSON como el siguiente:"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Running the benchmark suite against that endpoint I got the following result."
msgstr "Ejecutando el conjunto de pruebas comparativas contra ese punto final obtuve el siguiente resultado."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "or in other words my laptop can process just a bit more than 81K requests per second when serving that endpoint. We will see how getting rid of reflection will bring a 12% improvement of this figure, allowing it to process more than 92K requests per second, and in particular producing the following result."
msgstr "o, en otras palabras, mi portátil puede procesar algo más de 81K peticiones por segundo al servir ese endpoint. Veremos como deshaciéndonos de la reflexión conseguimos una mejora del 12% de esta cifra, permitiéndole procesar más de 92K peticiones por segundo, y en concreto produciendo el siguiente resultado."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Being intended to be used for profiling, our benchmark suite also automatically produces a flamegraph of the benchmark under investigation. Zooming the resulting flamegraph on the https://github.com/quarkusio/quarkus/blob/5f2d29b4500e88ebd6a3c7a8731f6165fb6b64e0/extensions/resteasy-reactive/rest-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/FullyFeaturedServerJacksonMessageBodyWriter.java#L52[method of the rest-jackson extension] triggering the JSON serialization we find the following situation where we can see that the `ObjectWriter::writeValue` Jackson’s method actually converting the object to its JSON representation has been found on the stack of 252 samples during the benchmark execution."
msgstr "Al estar pensada para ser utilizada para la creación de perfiles, nuestra suite de pruebas comparativas también produce automáticamente un flamegráfico de la prueba comparativa investigada. Haciendo zoom en el flamegráfico resultante sobre el link:https://github.com/quarkusio/quarkus/blob/5f2d29b4500e88ebd6a3c7a8731f6165fb6b64e0/extensions/resteasy-reactive/rest-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/FullyFeaturedServerJacksonMessageBodyWriter.java#L52[método de la extensión rest-jackson] que desencadena la serialización JSON encontramos la siguiente situación en la que podemos ver que el método de `ObjectWriter::writeValue` Jackson que realmente convierte el objeto a su representación JSON se ha encontrado en la pila de 252 muestras durante la ejecución del benchmark."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Flamegraph of out of the box Jackson’s serialization"
msgstr "Flamegráfico de la serialización de Jackson fuera de la caja"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Further zooming the flamegraph on the Jackson’s `BeanPropertyWriter::serializeAsField` method and searching for the word “reflect” it is possible to see in how many different places, evidenced in purple in this flamegraph, Jackson needs to use Java reflection in order to read the state of the object to be serialized and write it into a JSON string."
msgstr "Ampliando aún más el flamegráfico sobre el método `BeanPropertyWriter::serializeAsField` de Jackson y buscando la palabra \"reflect\" es posible ver en cuántos lugares diferentes, evidenciados en morado en este flamegráfico, Jackson necesita utilizar Java reflection para leer el estado del objeto a serializar y escribirlo en una cadena JSON."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Use of reflection in out of the box Jackson’s serialization"
msgstr "Uso de la reflexión en la serialización out of the box de Jackson"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "As expected this use case requires a quite heavy use of reflection which is the thing that we want to avoid. We have already found that the JSON serialization is performed by the rest-jackson extension, so let’s see how we can modify it to achieve this goal."
msgstr "Como era de esperar, este caso de uso requiere un uso bastante intensivo de la reflexión, que es lo que queremos evitar. Ya hemos comprobado que la serialización JSON la realiza la extensión rest-jackson, así que veamos cómo podemos modificarla para lograr este objetivo."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Overriding Jackson serialization"
msgstr "Anulación de la serialización de Jackson"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Jackson makes it possible to override its standard reflection-based serialization behavior in a pretty simple way. It is sufficient to implement a class extending its `StdSerializer` thus defining how an instance of a given pojo should be rendered in JSON, something like:"
msgstr "Jackson hace posible anular su comportamiento estándar de serialización basado en la reflexión de una forma bastante sencilla. Basta con implementar una clase que extienda su `StdSerializer` definiendo así cómo debe renderizarse en JSON una instancia de un pojo dado, algo así como:"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "and then to add this serializer to a module and register it on the ObjectMapper used by Jackson to perform the JSON serialization."
msgstr "y luego añadir este serializador a un módulo y registrarlo en el ObjectMapper utilizado por Jackson para realizar la serialización JSON."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "With this setup everytime Jackson will have to convert an instance of the `Person` class into its JSON representation it will do this through this custom serializer instead of accessing the person’s fields via reflection."
msgstr "Con esta configuración cada vez que Jackson tenga que convertir una instancia de la clase `Person` en su representación JSON lo hará a través de este serializador personalizado en lugar de acceder a los campos de la persona mediante reflexión."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "The strategy to implement reflection-free JSON serialization is then quite straightforward, but of course it would be great if the Quarkus extension could generate and register those serializers automatically and effortlessly. The first step to achieve this is discovering at deployment time for which classes we need to generate those serializers. In our case they are the classes returned by all the REST endpoints in our application, but of course the same approach could be extended to a wider scope."
msgstr "La estrategia para implementar la serialización JSON sin reflexión es entonces bastante sencilla, pero por supuesto sería estupendo que la extensión Quarkus pudiera generar y registrar esos serializadores automáticamente y sin esfuerzo. El primer paso para conseguirlo es descubrir en tiempo de despliegue para qué clases necesitamos generar esos serializadores. En nuestro caso son las clases devueltas por todos los puntos finales REST de nuestra aplicación, pero por supuesto el mismo enfoque podría extenderse a un ámbito más amplio."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Discovering and indexing the classes to be serialized with Jandex"
msgstr "Descubrir e indexar las clases a serializar con Jandex"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "In general https://quarkus.io/guides/cdi-reference#bean_discovery[bean discovery] is performed by Quarkus, which indexes all the beans that are part of the CDI process through https://smallrye.io/jandex/[Jandex]. Since it finds all the bean classes having a https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations[bean defining annotation], this already includes all services exposing one or more REST endpoints that must have such an annotation. This means that all endpoints are already discovered by default. Even better, the https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations[quarkus-rest] extension already collects https://github.com/quarkusio/quarkus/blob/4ee036a19d64f537bea7836a25d5362091b0e8fc/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveResourceMethodEntriesBuildItem.java#L30[an Entry for each rest method] in the `ResteasyReactiveResourceMethodEntriesBuildItem`."
msgstr "En general, link:https://quarkus.io/guides/cdi-reference#bean_discovery[el descubrimiento de beans] lo realiza Quarkus, que indexa todos los beans que forman parte del proceso CDI a través de link:https://smallrye.io/jandex/[Jandex] . Dado que encuentra todas las clases de beans que tienen una link:https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations[anotación de definición de beans] , esto ya incluye todos los servicios que exponen uno o más puntos finales REST que deben tener dicha anotación. Esto significa que todos los puntos finales ya están descubiertos por defecto. Aún mejor, la extensión link:https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations[quarkus-rest] ya recoge link:https://github.com/quarkusio/quarkus/blob/4ee036a19d64f537bea7836a25d5362091b0e8fc/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveResourceMethodEntriesBuildItem.java#L30[una anotación para cada método rest] en la página `ResteasyReactiveResourceMethodEntriesBuildItem` ."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Here each of these entries contains an instance of the Jandex `MethodInfo` that carries all the necessary offline reflection information about the signature of a Java method implementing a specific REST endpoint. As anticipated we are interested in the types returned by those methods, because those are the classes of the objects that will require to be converted in JSON as response to the REST endpoints invocation."
msgstr "Aquí, cada una de estas entradas contiene una instancia de Jandex `MethodInfo` que lleva toda la información de reflexión fuera de línea necesaria sobre la firma de un método Java que implementa un punto final REST específico. Como anticipamos, estamos interesados en los tipos devueltos por esos métodos, porque esas son las clases de los objetos que requerirán ser convertidos en JSON como respuesta a la invocación de los puntos finales REST."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Now we have all the building blocks to start developing a https://quarkus.io/guides/writing-extensions#build-step-processors[`BuildStep`] that collects, without duplications, all those return types, represented as Jandex `ClassInfo` s, and pass them to another service that will have the responsibility of generating the bytecode of a Jackson serializer for each of them."
msgstr "Ahora tenemos todos los elementos para empezar a desarrollar un link:https://quarkus.io/guides/writing-extensions#build-step-processors[BuildStep] que recoja, sin duplicaciones, todos esos tipos de retorno, representados como Jandex `ClassInfo` s, y los pase a otro servicio que tendrá la responsabilidad de generar el bytecode de un serializador Jackson para cada uno de ellos."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "where the `JaxRsResourceIndexBuildItem` provides the Jandex `IndexView` that allows access to all reflection information collected and indexed by Jandex. Since we already know that the JSON serialization will be triggered by the rest-jackson extension it is convenient to simply add this new `BuildStep` to the https://github.com/quarkusio/quarkus/blob/main/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java[BuildStepsProcessor already present in that extension]."
msgstr "donde el `JaxRsResourceIndexBuildItem` proporciona el Jandex `IndexView` que permite acceder a toda la información de reflexión recopilada e indexada por Jandex. Dado que ya sabemos que la serialización JSON será activada por la extensión rest-jackson es conveniente añadir simplemente este nuevo `BuildStep` al link:https://github.com/quarkusio/quarkus/blob/main/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java[BuildStepsProcessor ya presente en dicha extensión] ."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Generating the Jackson serializers with Gizmo"
msgstr "Generación de los serializadores Jackson con Gizmo"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "At this point we know the classes for which it will be necessary to automatically generate the bytecode implementing a Jackson serializer, something similar to the one sketched when discussing how to customize Jackson serialization."
msgstr "En este punto conocemos las clases para las que será necesario generar automáticamente el bytecode implementando un serializador Jackson, algo similar a lo esbozado al discutir cómo personalizar la serialización Jackson."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Quarkus makes heavy use of https://github.com/quarkusio/gizmo/blob/main/USAGE.adoc[Gizmo] in all the many cases when it needs to perform some bytecode generation. Generating bytecode is a relatively low level task, so using a library like Gizmo, with a convenient higher level API that abstracts lots of the underlying complexity, is practically mandatory to perform this difficult task with a reasonable level of productivity and to keep the code readable and maintainable."
msgstr "Quarkus hace un uso intensivo de link:https://github.com/quarkusio/gizmo/blob/main/USAGE.adoc[Gizmo] en todos los muchos casos en los que necesita realizar alguna generación de código de bytes. Generar código de bytes es una tarea de nivel relativamente bajo, por lo que utilizar una biblioteca como Gizmo, con una cómoda API de nivel superior que abstrae gran parte de la complejidad subyacente, es prácticamente obligatorio para realizar esta difícil tarea con un nivel razonable de productividad y para mantener el código legible y mantenible."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "We don’t make an exception this time, so for each of the Jandex `ClassInfo` collected during the former step, Gizmo is used to generate the bytecode of a class extending the Jackson’s `StdSerializer` and having a name equal to the one of the bean to be serialized plus the `$quarkusjacksonserializer` suffix."
msgstr "Esta vez no hacemos una excepción, así que para cada uno de los Jandex `ClassInfo` recogidos durante el paso anterior, se utiliza Gizmo para generar el bytecode de una clase que extienda el `StdSerializer` de Jackson y que tenga un nombre igual al del frijol que se va a serializar más el sufijo `$quarkusjacksonserializer` ."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Without going into too many details the core logic of this serializer is contained in the `serialize` method that can be generated as follows"
msgstr "Sin entrar en demasiados detalles, la lógica central de este serializador está contenida en el método `serialize` que puede generarse de la siguiente manera"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Querying the `ClassInfo` it is possible to iterate all the fields to be serialized, together with their accessor methods, in order to generate the code serializing in JSON each of those fields. For instance if valueHandle is the handle to the object to be serialized, which is the first argument of the signature of the `serialize` method, and `getterMethod` is the `MethodInfo` of a getter returning a numeric field, the corresponding code generating the serialization of that field can be something like"
msgstr "Consultando `ClassInfo` es posible iterar todos los campos a serializar, junto con sus métodos de acceso, para generar el código que serialice en JSON cada uno de esos campos. Por ejemplo, si valueHandle es el manejador del objeto a serializar, que es el primer argumento de la firma del método `serialize` , y `getterMethod` es el `MethodInfo` de un getter que devuelve un campo numérico, el código correspondiente que genera la serialización de ese campo puede ser algo como"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Note that, doing so, the logic to decide whether a field should be serialized or not, and how, totally bypasses the one implemented in Jackson and could sometimes differ from it. In particular this behavior can be explicitly modified by users through some specific Jackson annotations. To play safe when the serializers generator https://github.com/quarkusio/quarkus/blob/b3e608507e3bdcbcebe15a3d45de1b6cc6945d10/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java#L312[meets any of those annotations], it simply gives up generating a serializer for the specific class containing it. In this circumstance the serialization of that class will be performed with the normal reflection-based mechanism employed by Jackson."
msgstr "Tenga en cuenta que, al hacerlo, la lógica para decidir si un campo debe serializarse o no, y cómo, pasa totalmente por alto la implementada en Jackson y, en ocasiones, podría diferir de ella. En particular, este comportamiento puede ser modificado explícitamente por los usuarios a través de algunas anotaciones específicas de Jackson. Para ir sobre seguro, cuando el generador de serializadores link:https://github.com/quarkusio/quarkus/blob/b3e608507e3bdcbcebe15a3d45de1b6cc6945d10/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java#L312[se encuentra con alguna de esas anotaciones] , simplemente renuncia a generar un serializador para la clase específica que lo contiene. En esta circunstancia, la serialización de esa clase se realizará con el mecanismo normal basado en la reflexión empleado por Jackson."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Actually I see this as a defect and I tried to figure out if I could reuse Jackson's logic in some way also for this serializers generation. As discussed https://github.com/FasterXML/jackson-modules-base/issues/247[here], the main problem is that a library like Jackson, but also the vast majority of the Java frameworks, doesn’t have a clear separation between deployment and runtime as it happens with Quarkus. This however also demonstrates the clear advantage of this separation as implemented in Quarkus, that allows to develop features and optimizations that are otherwise simply impossible for other tools."
msgstr "En realidad veo esto como un defecto e intenté averiguar si podría reutilizar la lógica de Jackson de alguna manera también para esta generación de serializadores. Como se discute link:https://github.com/FasterXML/jackson-modules-base/issues/247[aquí] , el principal problema es que una librería como Jackson, pero también la gran mayoría de los frameworks Java, no tiene una clara separación entre despliegue y tiempo de ejecución como ocurre con Quarkus. Sin embargo, esto también demuestra la clara ventaja de esta separación tal y como se implementa en Quarkus, que permite desarrollar características y optimizaciones que de otro modo serían sencillamente imposibles para otras herramientas."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Finally, we also need to take into account the fact that during the iteration of the fields of a class, the serializers generator also will very likely encounter other types belonging to the application’s business domain. In our original example the `Customer` has an `Address`, a `List<Person>` who are her children and a `CreditCard[]`. When this happens these new types are added to a queue of `ClassInfo` s for which another serializer has to be generated. The whole bytecode generation process terminates only when this queue is empty."
msgstr "Por último, también tenemos que tener en cuenta el hecho de que durante la iteración de los campos de una clase, es muy probable que el generador de serializadores también se encuentre con otros tipos pertenecientes al dominio de negocio de la aplicación. En nuestro ejemplo original, la `Customer` tiene un `Address` , un `List<Person>` que son sus hijos y un `CreditCard[]` . Cuando esto ocurre, estos nuevos tipos se añaden a una cola de `ClassInfo` s para los que hay que generar otro serializador. Todo el proceso de generación de código de bytes termina sólo cuando esta cola está vacía."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "At the end of this process all the newly created classes are passed back to the `BuildStep` that will record them in the `ResteasyReactiveServerJacksonRecorder` thus making them available also at runtime."
msgstr "Al final de este proceso, todas las clases recién creadas se devuelven a `BuildStep` , que las registrará en `ResteasyReactiveServerJacksonRecorder` para que estén disponibles también en tiempo de ejecución."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "For this reason it is necessary to add the `@Record` annotation to the `BuildStep` in order to indicate that it also outputs https://quarkus.io/guides/writing-extensions#bytecode-recording[recorded bytecode]. This concludes the description of all the steps necessary to the implementation of this new feature, that can be visually summarized as it follows."
msgstr "Por este motivo, es necesario añadir la anotación `@Record` a `BuildStep` para indicar que también emite link:https://quarkus.io/guides/writing-extensions#bytecode-recording[bytecode grabado] . Con esto concluye la descripción de todos los pasos necesarios para la implementación de esta nueva característica, que puede resumirse visualmente como sigue."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Blocks diagram describing the implementation of the generated reflection-free Jackson serializers"
msgstr "Diagrama de bloques que describe la implementación de los serializadores Jackson sin reflexión generados"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Making it optional"
msgstr "Hacerlo opcional"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Since it was not possible to reuse any of the heuristics used by Jackson to decide if and how a specific field should be serialized, and as discussed there could still exist some edge cases when the generated serializers produce a result that differs from what Jackson would do using reflection, we decided for now to disable this feature by default and give the possibility to users to opt-in. Considering that all the code implementing this new feature is self-contained in a single `BuildStep`, that is easily achievable using a https://quarkus.io/guides/writing-extensions#conditional-step-inclusion[conditional step inclusion]."
msgstr "Dado que no era posible reutilizar ninguna de las heurísticas utilizadas por Jackson para decidir si un campo específico debe serializarse y cómo, y que, como ya se ha discutido, aún podrían existir algunos casos extremos en los que los serializadores generados produjeran un resultado que difiriera de lo que haría Jackson utilizando la reflexión, decidimos por ahora desactivar esta característica por defecto y dar la posibilidad a los usuarios de optar por ella. Teniendo en cuenta que todo el código que implementa esta nueva característica está autocontenido en un único `BuildStep` , eso se puede conseguir fácilmente utilizando una link:https://quarkus.io/guides/writing-extensions#conditional-step-inclusion[inclusión condicional de pasos] ."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "For this purpose it is sufficient to https://quarkus.io/guides/config-mappings[map a configuration to an interface] using the `@ConfigMapping` annotation"
msgstr "Para ello basta con link:https://quarkus.io/guides/config-mappings[mapear una configuración a una interfaz] utilizando la anotación `@ConfigMapping` "

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "and also having an implementation of a `BooleanSupplier` reading that configuration"
msgstr "y también tener una implementación de un `BooleanSupplier` leyendo esa configuración"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "so that the `BuildStep` will be enabled only if this supplier returns true."
msgstr "para que el `BuildStep` se habilite sólo si este proveedor devuelve verdadero."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "In this way this optimization is turned off by default (note the `@WithDefault(\"false\")` annotation on the boolean method) and can be enabled by simply adding the flag"
msgstr "De este modo, esta optimización está desactivada por defecto (observe la anotación `@WithDefault(\"false\")` en el método booleano) y puede activarse simplemente añadiendo la bandera"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "to the `application.properties` configuration file. With this last change, the final code of the complete `BuildStep` is available https://github.com/quarkusio/quarkus/blob/39ec43201a690e7895b643e6c328d9042e73ccf0/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java#L374[here]."
msgstr "al archivo de configuración de `application.properties` . Con este último cambio, el código final del `BuildStep` completo está disponible link:https://github.com/quarkusio/quarkus/blob/39ec43201a690e7895b643e6c328d9042e73ccf0/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java#L374[aquí] ."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Putting it at work and measuring the results"
msgstr "Ponerlo en práctica y medir los resultados"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Now that all the development has been done, let’s try to put this at work with the same benchmark from where we started and check if this change comes with a real performance gain as we hoped. First of all it is necessary to enable this feature by setting the above mentioned flag in the Quarkus `application.properties` file. Additionally it will be useful to also set a second flag enabling Quarkus to dump the decompiled bytecode generated at deployment time"
msgstr "Ahora que todo el desarrollo está hecho, vamos a intentar poner esto en funcionamiento con el mismo benchmark del que partimos y comprobar si este cambio conlleva una ganancia real de rendimiento como esperábamos. En primer lugar es necesario habilitar esta característica estableciendo la bandera mencionada en el archivo `application.properties` de Quarkus. Además, será útil establecer también una segunda bandera que permita a Quarkus volcar el bytecode descompilado generado en el momento del despliegue"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "In fact thanks to this second flag, after having recompiled our application, it is possible to find the bytecode of the generated classes under the folder `target/decompiled/generated-bytecode`"
msgstr "De hecho gracias a esta segunda bandera, después de haber recompilado nuestra aplicación, es posible encontrar el bytecode de las clases generadas bajo la carpeta `target/decompiled/generated-bytecode`"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "The Jackson serializers generated at deployment time"
msgstr "Los serializadores Jackson generados en el momento de la implantación"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Here, other than the code already generated by Quarkus to perform the invocation of the REST endpoints without reflection, you can see all the classes, terminating in `$quarkusjacksonserializer`, implementing the reflection-free JSON serialization of all the classes in our domain. For instance for the Customer class it generates a Jackson’s `StdSerializer` implementation like the following."
msgstr "Aquí, aparte del código ya generado por Quarkus para realizar la invocación de los puntos finales REST sin reflexión, puede ver todas las clases, terminadas en `$quarkusjacksonserializer` , que implementan la serialización JSON sin reflexión de todas las clases de nuestro dominio. Por ejemplo para la clase Cliente genera una implementación de Jackson's `StdSerializer` como la siguiente."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "As already anticipated, running again the benchmark with this optimization in place I got the following result"
msgstr "Como ya anticipé, ejecutando de nuevo el benchmark con esta optimización en su lugar obtuve el siguiente resultado"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "This time Quarkus can serve more than 92K requests per second, compared with the 81K we had before doing this work, quite an interesting improvement. Finally also the corresponding flamegraph helps to make sense of this improvement: there isn’t any trace of usage of Java reflection in it and now the `ObjectWriter::writeValue` Jackson’s method is sampled only 193 times instead of the 252 observed before."
msgstr "Esta vez Quarkus puede servir más de 92K peticiones por segundo, frente a las 81K que teníamos antes de realizar este trabajo, una mejora bastante interesante. Por último, también el flamegráfico correspondiente ayuda a dar sentido a esta mejora: no hay ningún rastro de uso de la reflexión Java en él y ahora el método de `ObjectWriter::writeValue` Jackson se muestrea sólo 193 veces en lugar de las 252 observadas antes."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Flamegraph of serialization using the generated Jackson’s serializers demonstrating the absence of any usage of reflection"
msgstr "Flamegraph de serialización utilizando los serializadores generados de Jackson demostrando la ausencia de cualquier uso de la reflexión"

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "In fact in this case all the objects serializations, the one of the `Customer` instance returned by the rest endpoint plus all other objects referenced by it, are now performed by the serializers generated during the deployment phase, the ones with the class names terminating in `$quarkusjacksonserializer` and evidenced in purple in this last flamegraph."
msgstr "De hecho, en este caso todas las serializaciones de objetos, la de la instancia `Customer` devuelta por el endpoint rest más todos los demás objetos referenciados por ella, son realizadas ahora por los serializadores generados durante la fase de despliegue, los que tienen los nombres de clase terminados en `$quarkusjacksonserializer` y evidenciados en morado en este último flamegráfico."

#: _posts/2024-08-19-quarkus-metaprogramming.adoc
#, fuzzy
msgid "Flamegraph of serialization demonstrating how all the necessary generated serializers are invoked"
msgstr "Flamegráfico de serialización que demuestra cómo se invocan todos los serializadores generados necesarios"
