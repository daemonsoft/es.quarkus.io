# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-03 08:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:1
#, fuzzy, no-wrap
msgid "christophd"
msgstr "christophd"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:1
#, fuzzy, no-wrap
msgid "2023-01-12"
msgstr "2023-01-12"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:1
#, fuzzy, no-wrap
msgid "Explore how to verify Quarkus event-driven applications with the Citrus integration test framework."
msgstr "Explore cómo verificar las aplicaciones basadas en eventos de Quarkus con el marco de pruebas de integración de Citrus."

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:1
#, fuzzy, no-wrap
msgid "testing event-driven integration kafka messaging"
msgstr "pruebas de integración basada en eventos mensajería kafka"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:1
#, fuzzy, no-wrap
msgid "Testing Quarkus with Citrus"
msgstr "Probando Quarkus con Citrus"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:11
#, fuzzy, no-wrap
msgid "Citrus & Quarkus"
msgstr "Cítricos y Quarkus"

#. type: Target for macro image
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:11
#, no-wrap
msgid "citrus-quarkus.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:15
#, fuzzy
msgid "This post shows how to combine Quarkus with the https://citrusframework.org[Citrus] test framework in order to write automated tests for event-driven applications.  https://citrusframework.org[Citrus] is an Open Source Java test framework focusing on messaging and integration testing in general."
msgstr "Este post muestra cómo combinar Quarkus con el framework de pruebas  link:https://citrusframework.org[Citrus] para escribir pruebas automatizadas para aplicaciones dirigidas por eventos.  link:https://citrusframework.org[Citrus] es un framework de pruebas Java de código abierto centrado en la mensajería y las pruebas de integración en general."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:18
#, fuzzy
msgid "Developers can easily empower the *@QuarkusTest* with Citrus capabilities in order to produce and consume events during the test.  As a result the test is able to interact with the Quarkus event-driven application by exchanging events and messages with real messaging communication."
msgstr "Los desarrolladores pueden potenciar fácilmente *@QuarkusTest* con capacidades Citrus para producir y consumir eventos durante la prueba. Como resultado, la prueba es capaz de interactuar con la aplicación basada en eventos Quarkus mediante el intercambio de eventos y mensajes con comunicación de mensajería real."

#. type: Title ==
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:19
#, fuzzy, no-wrap
msgid "Introducing the demo application"
msgstr "Presentación de la aplicación de demostración"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:25
#, fuzzy
msgid "In this post we use a Quarkus demo application called `food-market`.  You can find the demo application code and all Citrus tests in https://github.com/citrusframework/citrus-samples/tree/main/demo/sample-quarkus[this GitHub code repository].  The Quarkus application connects to Kafka streams as an event-driven application that produces and consumes various events (e.g. bookings, supplies, shipping events).  The processed events and their individual status are stored in a PostgreSQL database."
msgstr "En este post usamos una aplicación demo de Quarkus llamada `food-market`. Puedes encontrar el código de la aplicación demo y todas las pruebas de Citrus en  link:https://github.com/citrusframework/citrus-samples/tree/main/demo/sample-quarkus[este repositorio de código de GitHub]. La aplicación Quarkus se conecta a flujos Kafka como una aplicación basada en eventos que produce y consume varios eventos (por ejemplo, reservas, suministros, eventos de envío). Los eventos procesados y su estado individual se almacenan en una base de datos PostgreSQL."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:26
#, fuzzy, no-wrap
msgid "Food Market App"
msgstr "Aplicación Food Market"

#. type: Target for macro image
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:26
#, no-wrap
msgid "food-market-demo-application.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:29
#, fuzzy
msgid "The food-market application matches incoming `booking` and `supply` events and produces `shipping` and `booking-completed` events accordingly."
msgstr "La aplicación de mercado de alimentos coteja los eventos entrantes `booking` y `supply` y produce los eventos `shipping` y `booking-completed` en consecuencia."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:31
#, fuzzy
msgid "Each event references a product and specifies an amount as well as a price in a simple Json object structure."
msgstr "Cada evento hace referencia a un producto y especifica una cantidad así como un precio en una estructura simple de objeto Json."

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:35
#, no-wrap
msgid "{ \"client\": \"citrus-test\", \"product\": \"Pineapple\", \"amount\":  100, \"price\":  0.99 }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:40
#, fuzzy
msgid "Clients create the `booking` events and at the same time suppliers will add their individual `supply` events.  The Quarkus food-market application consumes both event types and finds matching bookings and supplies.  Once a booking and a supply do match in certain criteria the application produces `booking-completed` and `shipping` events as a result."
msgstr "Los clientes crean los eventos de `booking` y, al mismo tiempo, los proveedores añaden sus eventos individuales de `supply`. La aplicación Quarkus food-market consume ambos tipos de eventos y busca reservas y suministros que coincidan. Una vez que una reserva y un suministro coinciden en ciertos criterios, la aplicación produce como resultado los eventos `booking-completed` y `shipping`."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:42
#, fuzzy
msgid "Last but not least the booking client gets informed via email about the completed booking status."
msgstr "Por último, pero no por ello menos importante, el cliente de la reserva recibe información por correo electrónico sobre el estado de la reserva completada."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:44
#, fuzzy
msgid "In a fully automated integration test we want to verify all events and their processing using real messaging communication with Kafka streams and database persistence."
msgstr "En una prueba de integración totalmente automatizada queremos verificar todos los eventos y su procesamiento utilizando comunicación de mensajería real con flujos Kafka y persistencia de base de datos."

#. type: Title ==
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:45
#, fuzzy, no-wrap
msgid "Testing the application with Citrus"
msgstr "Probar la aplicación con Citrus"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:50
#, fuzzy
msgid "The Quarkus application connects to different infrastructure (Kafka, PostgreSQL, Mail SMTP).  The automated integration test should verify the message communication, the event processing and connectivity to all components.  We will use the Citrus test framework as it provides the complete toolset for testing this kind of event-driven message-based solutions."
msgstr "La aplicación Quarkus se conecta a diferentes infraestructuras (Kafka, PostgreSQL, Mail SMTP). La prueba de integración automatizada debe verificar la comunicación de mensajes, el procesamiento de eventos y la conectividad con todos los componentes. Utilizaremos el marco de pruebas Citrus, ya que proporciona el conjunto de herramientas completo para probar este tipo de soluciones basadas en mensajes dirigidos por eventos."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:53
#, fuzzy
msgid "The first thing to do is to add Citrus to the Quarkus project.  The most convenient way is to import the `citrus-bom`."
msgstr "Lo primero que hay que hacer es añadir Citrus al proyecto Quarkus. La forma más cómoda es importar el archivo `citrus-bom`."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:54
#, fuzzy, no-wrap
msgid "Citrus BOM"
msgstr "Lista de materiales Citrus"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:68
#, no-wrap
msgid ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"      <dependency>\n"
"        <groupId>org.citrusframework</groupId>\n"
"        <artifactId>citrus-bom</artifactId>\n"
"        <version>${citrus.version}</version>\n"
"        <type>pom</type>\n"
"        <scope>import</scope>\n"
"      </dependency>\n"
"    </dependencies>\n"
"  </dependencyManagement>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:72
#, fuzzy
msgid "The `citrus-quarkus` extension provides a special `@QuarkusTest` resource implementation that enables us to combine Citrus with a Quarkus test.  So let's add this extension as a test scoped dependency."
msgstr "La extensión `citrus-quarkus` proporciona una implementación especial de recursos `@QuarkusTest` que nos permite combinar Citrus con una prueba de Quarkus. Así que vamos a añadir esta extensión como una prueba de alcance dependencia."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:73
#, fuzzy, no-wrap
msgid "Citrus Quarkus extension"
msgstr "Ampliación Citrus Quarkus"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:81
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>org.citrusframework</groupId>\n"
"  <artifactId>citrus-quarkus</artifactId>\n"
"  <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:85
#, fuzzy
msgid "Also, we need to include some other Citrus modules because we want to exchange data via Kafka and connect to the PostgreSQL database as part of the test.  Citrus is very modular. This means you can choose from a wide range of modules each of them adding specific testing capabilities to your project (e.g. `citrus-kafka`, `citrus-sql`, `citrus-validation-json`)."
msgstr "Además, necesitamos incluir algunos otros módulos de Citrus porque queremos intercambiar datos a través de Kafka y conectarnos a la base de datos PostgreSQL como parte de la prueba. Citrus es muy modular. Esto significa que puedes elegir entre una amplia gama de módulos, cada uno de ellos añadiendo capacidades específicas de prueba a tu proyecto (por ejemplo, `citrus-kafka`, `citrus-sql`, `citrus-validation-json`)."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:87
#, fuzzy
msgid "In this sample project we include the following Citrus modules as test scoped dependencies:"
msgstr "En este proyecto de ejemplo incluimos los siguientes módulos Citrus como dependencias de ámbito de prueba:"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:89
#, fuzzy
msgid "citrus-quarkus"
msgstr "citrus-quarkus"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:90
#, fuzzy
msgid "citrus-kafka"
msgstr "citrus-kafka"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:91
#, fuzzy
msgid "citrus-validation-json"
msgstr "citrus-validation-json"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:92
#, fuzzy
msgid "citrus-sql"
msgstr "citrus-sql"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:93
#, fuzzy
msgid "citrus-mail"
msgstr "citrus-mail"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:96
#, fuzzy
msgid "This completes the setup of all required Citrus modules.  Now we can move on to writing an automated integration test in order to verify the Quarkus event-driven application."
msgstr "Esto completa la configuración de todos los módulos Citrus necesarios. Ahora podemos pasar a escribir una prueba de integración automatizada con el fin de verificar la aplicación impulsada por eventos Quarkus."

#. type: Title ==
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:97
#, fuzzy, no-wrap
msgid "Writing Citrus tests on top of QuarkusTest"
msgstr "Escribir pruebas Citrus sobre QuarkusTest"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:100
#, fuzzy
msgid "We want to write an automated test that makes sure that all inbound events (`booking` and `supply`) are being processed properly and that the resulting outbound events (`booking-completed` and `shipping`) are being produced as expected."
msgstr "Queremos escribir una prueba automatizada que asegure que todos los eventos de entrada ( `booking` y `supply`) se están procesando correctamente y que los eventos de salida resultantes ( `booking-completed` y `shipping`) se están produciendo como se esperaba."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:101
#, fuzzy, no-wrap
msgid "Citrus test setup"
msgstr "Ensayo de cítricos"

#. type: Target for macro image
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:101
#, no-wrap
msgid "citrus-demo-test-setup.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:106
#, fuzzy
msgid "Citrus as a test framework will act as all surrounding components producing client events and verifying resulting outbound events.  Also, Citrus will have a look into the database in order to verify the persisted domain model objects.  Later on in a more advanced test scenario Citrus will also receive and verify the mail message content that is sent by the food-market Quarkus application."
msgstr "Citrus, como marco de pruebas, actuará como todos los componentes circundantes produciendo eventos de cliente y verificando los eventos salientes resultantes. Además, Citrus echará un vistazo a la base de datos para verificar los objetos persistentes del modelo de dominio. Más adelante, en un escenario de pruebas más avanzado, Citrus también recibirá y verificará el contenido de los mensajes de correo electrónico enviados por la aplicación Quarkus de mercado de alimentos."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:109
#, fuzzy
msgid "For now let's start with a normal Quarkus test.  The test needs to start the Quarkus application and also needs to prepare some infrastructure such as the database and the Kafka streams message broker. Fortunately Quarkus dev services provides the awesome testing capability to automatically start Testcontainers that represent the required infrastructure."
msgstr "Por ahora vamos a empezar con una prueba normal de Quarkus. La prueba tiene que iniciar la aplicación Quarkus y también tiene que preparar alguna infraestructura como la base de datos y el corredor de mensajes Kafka arroyos. Afortunadamente Quarkus dev services proporciona la capacidad de prueba impresionante para iniciar automáticamente Testcontainers que representan la infraestructura necesaria."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:113
#, fuzzy
msgid "The test is annotated with the `@QuarkusTest` annotation.  It enables the Quarkus dev services test capabilities and takes care of setting everything up for you.  The test itself is an arbitrary JUnit Jupiter unit test, so you can start this test from your Java IDE or as part of the Maven test lifecycle."
msgstr "La prueba se anota con la anotación `@QuarkusTest`. Habilita las capacidades de prueba de los servicios de desarrollo de Quarkus y se encarga de configurar todo para usted. La prueba en sí es una prueba unitaria JUnit Jupiter arbitraria, por lo que puede iniciar esta prueba desde su IDE de Java o como parte del ciclo de vida de prueba de Maven."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:117
#, fuzzy
msgid "Now let's add Citrus to the picture.  With the Citrus Quarkus extension that we have added to the Maven project in the previous section we can now enable the Citrus capabilities for the test.  Just add the `@CitrusSupport` annotation to the test class."
msgstr "Ahora vamos a añadir Citrus a la imagen. Con la extensión Citrus Quarkus que hemos añadido al proyecto Maven en la sección anterior ahora podemos habilitar las capacidades de Citrus para la prueba. Basta con añadir la anotación `@CitrusSupport` a la clase de prueba."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:120
#, fuzzy
msgid "This annotation enables the Citrus capabilities for the Quarkus test.  Citrus will now participate in the Quarkus test lifecycle which enables you to inject specific Citrus resources such as endpoints as well as the Citrus test runner."
msgstr "Esta anotación habilita las capacidades de Citrus para la prueba de Quarkus. Citrus participará ahora en el ciclo de vida de la prueba de Quarkus, lo que le permite inyectar recursos específicos de Citrus, como puntos finales, así como el ejecutor de pruebas de Citrus."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:121
#, fuzzy, no-wrap
msgid "Citrus enabled Quarkus test"
msgstr "Prueba Quarkus habilitada para cítricos"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:127
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@CitrusSupport\n"
"class FoodMarketApplicationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:132
#, no-wrap
msgid ""
"    private final KafkaEndpoint bookings = kafka()\n"
"            .asynchronous()\n"
"            .topic(\"bookings\")\n"
"            .build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:135
#, no-wrap
msgid ""
"    @CitrusResource\n"
"    private TestCaseRunner t;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:138
#, no-wrap
msgid ""
"    @Inject\n"
"    ObjectMapper mapper;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:142
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:205
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldProcessEvents() {\n"
"        Product product = new Product(\"Pineapple\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:149
#, no-wrap
msgid ""
"        Booking booking = new Booking(\"citrus-test\", product, 100, 0.99D);\n"
"        t.when(send()\n"
"                .endpoint(bookings)\n"
"                .message().body(marshal(booking, mapper)));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:153
#, fuzzy
msgid "The Citrus enabled test uses additional resources such as the `KafkaEndpoint` named bookings.  The `KafkaEndpoint` component comes with the `citrus-kafka` module and allows us to interact with Kafka streams by sending and receiving events to a topic."
msgstr "La prueba habilitada para Citrus utiliza recursos adicionales como las reservas con nombre `KafkaEndpoint`. El componente `KafkaEndpoint` viene con el módulo `citrus-kafka` y nos permite interactuar con flujos Kafka enviando y recibiendo eventos a un tema."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:156
#, fuzzy
msgid "The Citrus `TestCaseRunner` resource represents the entrance to the Citrus Java domain specific testing language.  This allows us to run any Citrus test action (e.g. send/receive messages, verify data in an SQL database) during the test."
msgstr "El recurso Citrus `TestCaseRunner` representa la entrada al lenguaje de pruebas específico del dominio Citrus Java. Esto nos permite ejecutar cualquier acción de prueba de Citrus (por ejemplo, enviar/recibir mensajes, verificar datos en una base de datos SQL) durante la prueba."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:158
#, fuzzy
msgid "See this sample code to send a message to the Kafka streams topic."
msgstr "Vea este código de ejemplo para enviar un mensaje al tema Kafka streams."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:159
#, fuzzy, no-wrap
msgid "Send booking event"
msgstr "Enviar evento de reserva"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:163
#, no-wrap
msgid "Product product = new Product(\"Pineapple\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:168
#, no-wrap
msgid ""
"Booking booking = new Booking(\"citrus-test\", product, 100, 0.99D);\n"
"t.when(send()\n"
"    .endpoint(bookings)\n"
"    .message().body(marshal(booking, mapper)));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:174
#, fuzzy
msgid "The injected Citrus `TestCaseRunner` is able to use a Gherkin `Given-When-Then` syntax and executes Citrus test operations.  This first test activity references the KafkaEndpoint `bookings` in a send operation.  The test is able to use domain model objects (`Product` and `Booking`) as message body.  The send operation properly serializes the domain model objects to Json with the injected `ObjectMapper`."
msgstr "El Citrus inyectado `TestCaseRunner` es capaz de utilizar una sintaxis Gherkin `Given-When-Then` y ejecuta operaciones de prueba Citrus. Esta primera actividad de prueba hace referencia al KafkaEndpoint `bookings` en una operación de envío. La prueba es capaz de utilizar objetos de modelo de dominio ( `Product` y `Booking`) como cuerpo del mensaje. La operación de envío serializa correctamente los objetos del modelo de dominio a Json con el `ObjectMapper` inyectado."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:176
#, fuzzy
msgid "You can also use the `@QuarkusIntegrationTest` annotation in order to start the demo application in a separate JVM. This separates the test code from the application and usually binds the test to the integration-test phase in Maven. Please be aware that an integration test is not able to inject application resources such as ObjectMapper or DataSource. The good news is that you can use the very same Citrus extension also with the `@QuarkusIntegrationTest`."
msgstr "También puede utilizar la anotación `@QuarkusIntegrationTest` para iniciar la aplicación de demostración en una JVM separada. Esto separa el código de prueba de la aplicación y normalmente vincula la prueba a la fase de prueba de integración en Maven. Ten en cuenta que una prueba de integración no puede inyectar recursos de la aplicación como ObjectMapper o DataSource. La buena noticia es que se puede utilizar la misma extensión Citrus también con el `@QuarkusIntegrationTest`."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:178
#, fuzzy
msgid "This is basically how you can combine Citrus capabilities with Quarkus test dev services in an automated integration test."
msgstr "Básicamente, así es como se pueden combinar las capacidades de Citrus con los servicios de desarrollo de pruebas de Quarkus en una prueba de integración automatizada."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:181
#, fuzzy
msgid "The rest of the story is quite easy.  In the same way as sending the booking event we can now also send a matching `supply` event."
msgstr "El resto es bastante sencillo. Del mismo modo que enviamos el evento de reserva, ahora también podemos enviar el evento correspondiente a `supply`."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:182
#, fuzzy, no-wrap
msgid "Send supply event"
msgstr "Enviar evento de suministro"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:189
#, no-wrap
msgid ""
"Supply supply = new Supply(product, 100, 0.99D);\n"
"t.then(send()\n"
"    .endpoint(supplies)\n"
"    .message().body(marshal(supply)));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:194
#, fuzzy
msgid "The test now has produced a booking and a matching supply event.  This should trigger the food-market application to produce respective `booking-completed` and `shipping` events.  As a next step in the test we should receive and verify these events with Citrus."
msgstr "La prueba ha producido una reserva y un evento de suministro correspondiente. Esto debería desencadenar que la aplicación de mercado de alimentos produzca los eventos `booking-completed` y `shipping` respectivos. Como siguiente paso de la prueba, debemos recibir y verificar estos eventos con Citrus."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:195
#, fuzzy, no-wrap
msgid "Receive and verify events"
msgstr "Recibir y verificar eventos"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:199
#, no-wrap
msgid "class FoodMarketApplicationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:201
#, no-wrap
msgid "    // ... Kafka endpoints defined here\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:210
#, no-wrap
msgid ""
"        Booking booking = new Booking(\"citrus-test\", product, 100, 0.99D);\n"
"        t.when(send()\n"
"            .endpoint(bookings)\n"
"            .message().body(marshal(booking, mapper)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:212
#, no-wrap
msgid "        // ... also send supply events\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:220
#, no-wrap
msgid ""
"        ShippingEvent shippingEvent = new ShippingEvent(booking.getClient(), product.getName(), booking.getAmount(), \"@ignore@\");\n"
"        t.then(receive()\n"
"            .endpoint(shipping)\n"
"            .message().body(marshal(shippingEvent, mapper))\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:225
#, fuzzy
msgid "Citrus is able to perform powerful message validation when receiving the events.  This is why we have added the `citrus-validation-json` module in the very beginning.  The Json message validator in Citrus will compare the received Json object with an expected Json template and make sure that all fields and properties do match as expected."
msgstr "Citrus es capaz de realizar una potente validación de mensajes al recibir los eventos. Esta es la razón por la que hemos añadido el módulo `citrus-validation-json` desde el principio. El validador de mensajes Json en Citrus comparará el objeto Json recibido con una plantilla Json esperada y se asegurará de que todos los campos y propiedades coinciden con lo esperado."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:230
#, fuzzy
msgid "The test creates the expected `shippingEvent` Json object which uses properties like the `client`, `product` and the `amount`.  The received event must match these expected values in order to pass the test.  Unfortunately we are not able to verify the `address` field because it has been generated by the Quarkus application.  This is why the `address` gets ignored during the validation by using the `@ignored@` Citrus validation expression as an expected value."
msgstr "La prueba crea el objeto Json `shippingEvent` esperado que utiliza propiedades como `client`, `product` y `amount`. El evento recibido debe coincidir con estos valores esperados para pasar la prueba. Desafortunadamente no podemos verificar el campo `address` porque ha sido generado por la aplicación Quarkus. Esta es la razón por la que `address` se ignora durante la validación utilizando la expresión de validación Citrus `@ignored@` como valor esperado."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:233
#, fuzzy
msgid "The Citrus Json message validator is quite powerful and will now compare the received shipping event with the expected Json object.  All given Json properties get verified and the test will fail when there is a mismatch."
msgstr "El validador de mensajes Json de Citrus es bastante potente y ahora comparará el evento de envío recibido con el objeto Json esperado. Todas las propiedades Json dadas se verifican y la prueba fallará cuando haya un desajuste."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:234
#, fuzzy, no-wrap
msgid "Received Json"
msgstr "Json recibido"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:238
#, no-wrap
msgid "{ \"client\":  \"citrus-test\", \"product\": \"Pineapple\", \"amount\": 100, \"address\": \"10556 Citrus Blvd.\" }\n"
msgstr ""

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:240
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:248
#, fuzzy, no-wrap
msgid "Control Json"
msgstr "Control Json"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:244
#, no-wrap
msgid "{ \"client\":  \"citrus-test\", \"product\": \"Pineapple\", \"amount\": 100, \"address\": \"@ignore@\" }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:247
#, fuzzy
msgid "You can use ignore expressions, use validation matchers, functions and test variables in the expected template."
msgstr "Puede utilizar expresiones de ignorar, utilizar comparadores de validación, funciones y variables de prueba en la plantilla esperada."

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:252
#, no-wrap
msgid "{ \"client\":  \"${clientName}\", \"product\": \"@matches(Pineapple|Strawberry|Banana)@\", \"amount\": \"@isNumber()@\", \"address\": \"@ignore@\" }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:256
#, fuzzy
msgid "This completes the first test with many events being exchanged with the application under test.  Now let's run the test."
msgstr "Esto completa la primera prueba con muchos eventos siendo intercambiados con la aplicación bajo prueba. Ahora vamos a ejecutar la prueba."

#. type: Title ==
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:257
#, fuzzy, no-wrap
msgid "Running the Citrus tests"
msgstr "Ejecución de las pruebas de Citrus"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:261
#, fuzzy
msgid "The Quarkus test framework in the example uses JUnit Jupiter as a test driver.  This means you can run the tests just like any other JUnit test from your Java IDE or with Maven for instance."
msgstr "El marco de pruebas Quarkus del ejemplo utiliza JUnit Jupiter como controlador de pruebas. Esto significa que puedes ejecutar las pruebas como cualquier otra prueba JUnit desde tu IDE Java o con Maven, por ejemplo."

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:265
#, no-wrap
msgid "./mvnw test\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:270
#, fuzzy
msgid "The test is now run with the Maven test lifecycle.  The `@QuarkusTest` dev services will start the application and prepare the infrastructure with Testcontainers.  Then Citrus will produce the events and verify the outcome with powerful Json validation."
msgstr "La prueba se ejecuta ahora con el ciclo de vida de pruebas de Maven. Los servicios de desarrollo de `@QuarkusTest` iniciarán la aplicación y prepararán la infraestructura con Testcontainers. A continuación, Citrus producirá los eventos y verificará el resultado con una potente validación Json."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:273
#, fuzzy
msgid "In this first test we made sure that the application is able to process the incoming events and that the resulting events are produced as expected.  Now let's move on to more advanced tests including the database and a mail server SMTP communication."
msgstr "En esta primera prueba nos aseguramos de que la aplicación es capaz de procesar los eventos entrantes y que los eventos resultantes se producen como se esperaba. Ahora pasemos a pruebas más avanzadas que incluyen la base de datos y una comunicación SMTP con el servidor de correo."

#. type: Title ==
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:274
#, fuzzy, no-wrap
msgid "Verify stored data with SQL"
msgstr "Verificación de datos almacenados con SQL"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:279
#, fuzzy
msgid "When testing distributed event-driven applications the timing of events is an essential ingredient to success.  Each test scenario is keen to verify a specific application behavior and the correct timing of events is key to triggering and verifying this behavior.  Also timing is very important to avoid running into flaky tests where racing conditions may influence the test result on slower machines (e.g. CI jobs)."
msgstr "Cuando se prueban aplicaciones distribuidas basadas en eventos, la sincronización de los eventos es un ingrediente esencial para el éxito. Cada escenario de prueba está pensado para verificar un comportamiento específico de la aplicación y la correcta sincronización de los eventos es clave para desencadenar y verificar este comportamiento. También la sincronización es muy importante para evitar pruebas defectuosas donde las condiciones de carrera pueden influir en el resultado de la prueba en máquinas más lentas (por ejemplo, trabajos de CI)."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:282
#, fuzzy
msgid "As an example assume the test needs to create a new product first and then sends a new booking event referencing this newly added product.  The test needs to wait for the product event to be processed completely before sending the booking event."
msgstr "A modo de ejemplo, supongamos que la prueba debe crear primero un nuevo producto y, a continuación, enviar un nuevo evento de reserva que haga referencia a este producto recién añadido. La prueba debe esperar a que el evento de producto se procese por completo antes de enviar el evento de reserva."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:284
#, fuzzy
msgid "In Citrus we are able to add this waiting state very easily."
msgstr "En Citrus podemos añadir este estado de espera muy fácilmente."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:285
#, fuzzy, no-wrap
msgid "Wait for object to be created in persistence layer"
msgstr "Esperar a que se cree el objeto en la capa de persistencia"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:292
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:353
#, no-wrap
msgid ""
"Product product = new Product(\"Watermelon\");\n"
"t.when(send()\n"
"    .endpoint(products)\n"
"    .message().body(marshal(product)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:303
#, no-wrap
msgid ""
"t.then(repeatOnError()\n"
"    .condition((i, context) -> i > 25)\n"
"    .autoSleep(500)\n"
"    .actions(\n"
"        sql().dataSource(dataSource)\n"
"            .query()\n"
"            .statement(\"select count(id) as found from product where product.name='%s'\"\n"
"                    .formatted(product.getName()))\n"
"            .validate(\"found\", \"1\"))\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:308
#, fuzzy
msgid "After the product event has been sent we use the `repeatOnError()` test action.  In combination with an `autoSleep` and a max retry count setting the action periodically polls the database for the created product.  This makes sure that we do not continue with the test until the new product has been properly stored to the database."
msgstr "Una vez enviado el evento de producto, utilizamos la acción de prueba `repeatOnError()`. En combinación con un `autoSleep` y un ajuste de recuento máximo de reintentos, la acción sondea periódicamente la base de datos en busca del producto creado. Esto asegura que no continuamos con la prueba hasta que el nuevo producto se haya almacenado correctamente en la base de datos."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:310
#, fuzzy
msgid "The database interaction in Citrus comes with the `citrus-sql` module and enables you to verify any SQL result set."
msgstr "La interacción con la base de datos en Citrus viene con el módulo `citrus-sql` y permite verificar cualquier conjunto de resultados SQL."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:312
#, fuzzy
msgid "Quarkus is able to inject the `dataSource` that is being used to connect to the PostgreSQL database. This also works when Quarkus uses the PostgreSQL Testcontainers infrastructure in the test. Just use the `@Inject` annotation in your test and reference the datasource in the Citrus `sql()` test action."
msgstr "Quarkus es capaz de inyectar el `dataSource` que se está utilizando para conectarse a la base de datos PostgreSQL. Esto también funciona cuando Quarkus utiliza la infraestructura PostgreSQL Testcontainers en la prueba. Sólo tiene que utilizar la anotación `@Inject` en su prueba y hacer referencia a la fuente de datos en la acción de prueba Citrus `sql()`."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:314
#, fuzzy
msgid "You may introduce test behaviors for common Citrus test logic such as waiting for a domain model object to be persisted in the database. In general a test behavior encapsulates a set of Citrus test actions to a reusable entity that you can reference many times from your tests."
msgstr "Puede introducir comportamientos de prueba para la lógica de prueba común de Citrus, como esperar a que un objeto del modelo de dominio persista en la base de datos. En general, un comportamiento de prueba encapsula un conjunto de acciones de prueba de Citrus en una entidad reutilizable a la que puede hacer referencia muchas veces desde sus pruebas."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:315
#, fuzzy, no-wrap
msgid "Citrus test behavior"
msgstr "Comportamiento de las pruebas de Citrus"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:319
#, no-wrap
msgid "public class WaitForProductCreated implements TestBehavior {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:322
#, no-wrap
msgid ""
"    private final Product product;\n"
"    private final DataSource dataSource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:327
#, no-wrap
msgid ""
"    public WaitForProductCreated(Product product, DataSource dataSource) {\n"
"        this.product = product;\n"
"        this.dataSource = dataSource;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:342
#, no-wrap
msgid ""
"    @Override\n"
"    public void apply(TestActionRunner t) {\n"
"        t.run(repeatOnError()\n"
"            .condition((i, context) -> i > 25)\n"
"            .autoSleep(500)\n"
"            .actions(\n"
"                sql().dataSource(dataSource)\n"
"                    .query()\n"
"                    .statement(\"select count(id) as found from product where product.name='%s'\"\n"
"                            .formatted(product.getName()))\n"
"                    .validate(\"found\", \"1\"))\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:345
#, fuzzy
msgid "In a test you can apply the test behavior."
msgstr "En una prueba puede aplicar el comportamiento de prueba."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:346
#, fuzzy, no-wrap
msgid "Apply test behaviors"
msgstr "Aplicar comportamientos de prueba"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:355
#, no-wrap
msgid "t.then(t.applyBehavior(new WaitForProductCreated(product, dataSource)));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:359
#, fuzzy
msgid "The ability to look into the database in order to check on the persisted entities is quite powerful as it allows us to fully control the test workflow.  We could also use the Citrus SQL result set verification in the test to verify a booking status."
msgstr "La capacidad de mirar en la base de datos para comprobar las entidades persistentes es bastante potente, ya que nos permite controlar totalmente el flujo de trabajo de la prueba. También podríamos utilizar la verificación del conjunto de resultados de Citrus SQL en la prueba para verificar el estado de una reserva."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:360
#, fuzzy, no-wrap
msgid "Verify booking status completed"
msgstr "Verificar el estado de la reserva completada"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:368
#, no-wrap
msgid ""
"t.then(sql().dataSource(dataSource)\n"
"        .query()\n"
"        .statement(\"select status from booking where booking.id='${bookingId}'\")\n"
"        .validate(\"status\", \"COMPLETED\")\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:372
#, fuzzy
msgid "This verifies that the booking with the given id has the status `COMPLETED`.  The SQL result set validation in Citrus is able to handle complex column sets with multiple rows."
msgstr "Esto verifica que la reserva con el id dado tiene el estado `COMPLETED`. La validación de conjuntos de resultados SQL en Citrus puede gestionar conjuntos de columnas complejos con varias filas."

#. type: Title ==
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:373
#, fuzzy, no-wrap
msgid "Verify the mail server interaction"
msgstr "Verificar la interacción con el servidor de correo"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:376
#, fuzzy
msgid "The food-market Quarkus application under test may inform the client about a completed booking via email."
msgstr "La aplicación Quarkus para el mercado de la alimentación que se está probando puede informar al cliente por correo electrónico de que se ha completado una reserva."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:377
#, fuzzy, no-wrap
msgid "Mail content"
msgstr "Contenido del correo"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:381
#, no-wrap
msgid "Subject: Booking completed!\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:383
#, no-wrap
msgid "Hey citrus-client, your booking Pineapple has been completed!\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:386
#, fuzzy
msgid "The Citrus test is able to verify this particular mail content by starting an SMTP mail server that will receive that mail message and verify its content."
msgstr "La prueba Citrus es capaz de verificar este contenido de correo en particular iniciando un servidor de correo SMTP que recibirá ese mensaje de correo y verificará su contenido."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:388
#, fuzzy
msgid "In Quarkus we can use the `quarkus-mailer` extension to send mails via SMTP."
msgstr "En Quarkus podemos utilizar la extensión `quarkus-mailer` para enviar correos a través de SMTP."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:389
#, fuzzy, no-wrap
msgid "Quarkus mail service"
msgstr "Servicio de correo Quarkus"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:394
#, no-wrap
msgid ""
"@Singleton\n"
"public class MailService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:397
#, no-wrap
msgid ""
"    @Inject\n"
"    ReactiveMailer mailer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:402
#, no-wrap
msgid ""
"    public void send(Booking booking) {\n"
"        if (Booking.Status.COMPLETED != booking.getStatus()) {\n"
"            return;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:415
#, no-wrap
msgid ""
"        mailer.send(\n"
"            Mail.withText(\"%s@quarkus.io\".formatted(booking.getClient()),\n"
"                \"Booking completed!\",\n"
"                \"Hey %s, your booking %s has been completed.\".formatted(booking.getClient(), booking.getProduct().getName())\n"
"            )\n"
"        ).subscribe().with(success -> {\n"
"            // handle mail sent\n"
"        }, failure -> {\n"
"            // handle mail error\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:418
#, fuzzy
msgid "For the test Citrus starts an SMTP mail server that is able to accept the mail messages sent by Quarkus."
msgstr "Para la prueba Citrus inicia un servidor de correo SMTP que es capaz de aceptar los mensajes de correo enviados por Quarkus."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:419
#, fuzzy, no-wrap
msgid "Citrus mail server component"
msgstr "Componente del servidor de correo Citrus"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:429
#, no-wrap
msgid ""
"@BindToRegistry\n"
"private MailServer mailServer = mail().server()\n"
"            .port(2222)\n"
"            .knownUsers(Collections.singletonList(\"foodmarket@quarkus.io:foodmarket:secr3t\"))\n"
"            .autoAccept(true)\n"
"            .autoStart(true)\n"
"            .build();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:432
#, fuzzy
msgid "Let's tell Quarkus to connect to this Citrus mail server during the test."
msgstr "Vamos a decirle a Quarkus que se conecte a este servidor de correo Citrus durante la prueba."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:433
#, fuzzy, no-wrap
msgid "Quarkus mailer configuration"
msgstr "Configuración de Quarkus mailer"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:441
#, no-wrap
msgid ""
"quarkus.mailer.mock=false\n"
"quarkus.mailer.own-host-name=localhost\n"
"quarkus.mailer.from=foodmarket@quarkus.io\n"
"quarkus.mailer.host=localhost\n"
"quarkus.mailer.port=2222\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:444
#, no-wrap
msgid ""
"quarkus.mailer.username=foodmarket\n"
"quarkus.mailer.password=secr3t\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:447
#, fuzzy
msgid "With this setup we can now add a test action that receives and verifies the mail message sent."
msgstr "Con esta configuración ya podemos añadir una acción de prueba que reciba y verifique el mensaje de correo enviado."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:448
#, fuzzy, no-wrap
msgid "Verify mail message sent"
msgstr "Verificar el mensaje de correo enviado"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:453
#, no-wrap
msgid ""
"t.variable(\"client\", \"citrus-test\");\n"
"t.variable(\"product\", product.getName());\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:459
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:485
#, no-wrap
msgid ""
"t.run(receive()\n"
"    .endpoint(mailServer)\n"
"    .message(MailMessage.request(\"foodmarket@quarkus.io\", \"${client}@quarkus.io\", \"Booking completed!\")\n"
"            .body(\"Hey ${client}, your booking ${product} has been completed.\", \"text/plain\"))\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:464
#, no-wrap
msgid ""
"t.run(send()\n"
"    .endpoint(mailServer)\n"
"    .message(MailMessage.response(250, \"Ok\"))\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:468
#, fuzzy
msgid "The expected mail content uses some test variables `${client}` and `${product}`.  You may set these test variables in Citrus accordingly so these placeholders get resolved before the validation is performed."
msgstr "El contenido de correo esperado utiliza algunas variables de prueba `${client}` y `${product}`. Puede configurar estas variables de prueba en Citrus según corresponda para que estos marcadores de posición se resuelvan antes de que se realice la validación."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:471
#, fuzzy
msgid "The mail server responds with a code and a text according to the SMTP protocol.  In the success case this is a `250` `Ok` response."
msgstr "El servidor de correo responde con un código y un texto de acuerdo con el protocolo SMTP. En caso de éxito, se trata de una respuesta `250` `Ok` ."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:474
#, fuzzy
msgid "Again you can introduce a Citrus test behavior that covers the booking completed mail message verification.  Many tests may apply this behavior in their test logic then."
msgstr "De nuevo puede introducir un comportamiento de prueba de Citrus que cubra la verificación del mensaje de correo de reserva completada. Muchas pruebas pueden aplicar este comportamiento en su lógica de prueba."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:476
#, fuzzy
msgid "Another interesting point about the mail server interaction is that the Citrus mail server component is also able to simulate a mail server error."
msgstr "Otro punto interesante sobre la interacción con el servidor de correo es que el componente de servidor de correo de Citrus también es capaz de simular un error del servidor de correo."

#. type: Block title
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:477
#, fuzzy, no-wrap
msgid "Simulate mail server error"
msgstr "Simular error de servidor de correo"

#. type: delimited block -
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:490
#, no-wrap
msgid ""
"t.run(send()\n"
"    .endpoint(mailServer)\n"
"    .message(MailMessage.response(443, \"Failed!\"))\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:495
#, fuzzy
msgid "This time the Citrus mail server explicitly responds with a `443` `Failed!` error and the Quarkus application needs to handle this error accordingly.  Verifying error scenarios in automated integration tests is very important and helps us to develop robust applications.  It is great to have the opportunity to trigger these error scenarios with Citrus in an automated test."
msgstr "Esta vez el servidor de correo Citrus responde explícitamente con un error `443` `Failed!` y la aplicación Quarkus necesita manejar este error en consecuencia. Verificar escenarios de error en pruebas de integración automatizadas es muy importante y nos ayuda a desarrollar aplicaciones robustas. Es genial tener la oportunidad de desencadenar estos escenarios de error con Citrus en una prueba automatizada."

#. type: Title ==
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:496
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumen"

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:500
#, fuzzy
msgid "In this post we have seen how to combine the Citrus test framework with Quarkus test dev services in order to perform automated integration testing of event-driven applications.  The test is able to produce/consume events on Kafka streams and verifies the Quarkus application accordingly by verifying the Json data and the persisted entities in the database."
msgstr "En este post hemos visto cómo combinar el framework de pruebas Citrus con los servicios de desarrollo de pruebas Quarkus para realizar pruebas de integración automatizadas de aplicaciones basadas en eventos. La prueba es capaz de producir/consumir eventos en flujos Kafka y verifica la aplicación Quarkus en consecuencia mediante la verificación de los datos Json y las entidades persistentes en la base de datos."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:503
#, fuzzy
msgid "Citrus as a framework provides many modules each of them providing endpoints (client and server) for straight forward messaging interaction during an integration test (e.g. Kafka, JMS, FTP, Http, SOAP, Mail, ...).  The message validation capabilities allow us to verify the exchanged message content with different formats (e.g. Json, XML, plaintext)."
msgstr "Citrus como marco de trabajo proporciona muchos módulos, cada uno de los cuales proporciona puntos finales (cliente y servidor) para la interacción de mensajería directa durante una prueba de integración (por ejemplo, Kafka, JMS, FTP, Http, SOAP, Mail, ...). Las capacidades de validación de mensajes nos permiten verificar el contenido del mensaje intercambiado con diferentes formatos (por ejemplo, Json, XML, texto plano)."

#. type: Plain text
#: upstream/_posts/2023-12-1-testing-quarkus-with-citrus.adoc:506
#, fuzzy
msgid "While the Citrus project has been around for quite some time the Citrus Quarkus extension is a new addition in the most recent Citrus version 4.0.  As always, your feedback is much appreciated! Please give it a try and let us know what you think about this approach of automated integration testing with the combination of Citrus and Quarkus testing."
msgstr "Aunque el proyecto Citrus existe desde hace bastante tiempo, la extensión Citrus Quarkus es una nueva incorporación en la versión 4.0 más reciente de Citrus. Como siempre, agradecemos tus comentarios. Por favor, pruébelo y háganos saber lo que piensa acerca de este enfoque de pruebas de integración automatizadas con la combinación de pruebas de Citrus y Quarkus."
