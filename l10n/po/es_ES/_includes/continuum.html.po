# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2024-05-27 13:22+0000\n"
"PO-Revision-Date: 2022-05-19 08:14+0200\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:8
msgid "For years, the client-server architecture has been the de-facto standard to build applications. But a significant shift happened. The <em>one model rules them all</em> age is over. A new range of applications and architectural styles have emerged and transformed how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, event-driven architecture, and serverless are now central players in modern systems."
msgstr "Durante años, la arquitectura cliente-servidor ha sido el estándar de facto para construir aplicaciones. Pero se ha producido un cambio significativo. La era de <em>un modelo los gobierna a todos</em> ha terminado. Ha surgido una nueva gama de aplicaciones y estilos arquitectónicos que han transformado la forma de escribir el código y de desplegar y ejecutar las aplicaciones. Los microservicios HTTP, las aplicaciones reactivas, la arquitectura basada en eventos y la ausencia de servidor son ahora protagonistas de los sistemas modernos."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:11
msgid "Quarkus has been designed with this new world in mind and provides first-class support for these different paradigms. That does not mean you cannot build monoliths with Quarkus; you can do it smoothly. On the contrary, it means that the Quarkus development model morphs to adapt itself to the type of application you are developing, monolith, microservice, reactive, event-driven, functions…"
msgstr "Quarkus ha sido diseñado con este nuevo mundo en mente y proporciona soporte de primera clase para estos diferentes paradigmas. Esto no significa que no puedas construir monolitos con Quarkus; puedes hacerlo sin problemas. Al contrario, significa que el modelo de desarrollo de Quarkus se transforma para adaptarse al tipo de aplicación que estés desarrollando, monolito, microservicio, reactivo, dirigido por eventos, funciones..."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:12
msgid "<a class=\"anchor\" href=\"#http-microservices\"></a>HTTP microservices"
msgstr "<a class=\"anchor\" href=\"#http-microservices\"></a>Microservicios HTTP"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:13
msgid "Let’s start with the basics: HTTP microservices. In this context, you need to develop an HTTP endpoint, often called REST or CRUD. You process incoming HTTP requests, and to do so you often need to rely on other services, such as databases, or another HTTP service."
msgstr "Empecemos por lo básico: los microservicios HTTP. En este contexto, necesitas desarrollar un endpoint HTTP, a menudo llamado REST o CRUD. Procesas las peticiones HTTP entrantes, y para ello normalmente necesitas apoyarte en otros servicios, como bases de datos, o en otro servicio HTTP."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:14
msgid "For this type of application, Quarkus relies on well-known standards such as JAX-RS, JPA and MicroProfile Rest Client, but also Hibernate with Panache to simplify interactions with databases."
msgstr "Para este tipo de aplicaciones, Quarkus se apoya en estándares conocidos como JAX-RS, JPA y MicroProfile Rest Client, pero también en Hibernate con Panache para simplificar las interacciones con las bases de datos."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:15
msgid "Let’s take a very simple application handling <em>elements</em> from the periodic table. The code would be something like:"
msgstr "Tomemos una aplicación muy sencilla que maneje <em>elementos</em> de la tabla periódica. El código sería algo así:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:16
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Element&gt; <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">()</span> </span>{\n"
"        <span class=\"hljs-keyword\">return</span> Element.listAll();\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">getOne</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        Element element = Element.find(<span class=\"hljs-string\">\"position\"</span>, position).firstResult();\n"
"        <span class=\"hljs-keyword\">if</span> (element == <span class=\"hljs-keyword\">null</span>) {\n"
"            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> WebApplicationException(<span class=\"hljs-string\">\"Element with position \"</span> + position + <span class=\"hljs-string\">\" does not exist.\"</span>, <span class=\"hljs-number\">404</span>);\n"
"        }\n"
"        <span class=\"hljs-keyword\">return</span> element;\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@POST</span>\n"
"    <span class=\"hljs-meta\">@Transactional</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(Element element)</span> </span>{\n"
"        element.persist();\n"
"        <span class=\"hljs-keyword\">return</span> Response.ok(element).status(<span class=\"hljs-number\">201</span>).build();\n"
"    }\n"
"\n"
"    <span class=\"hljs-comment\">//...</span>\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elements\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementResource&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:43
msgid "If you are a Java EE or Spring user, this development model should look familiar.  You expose a resource containing methods annotated with <code>@GET</code>, <code>@POST</code>…&ZeroWidthSpace;&ZeroWidthSpace; to handle the different requests.  The path is specified using the <code>@Path</code> annotation.  Quarkus also supports <a href=\"https://quarkus.io/guides/spring-web\">Spring controller</a> annotations such as <code>@GetMapping</code> or <code>@RestController</code>."
msgstr "Si eres un usuario de Java EE o Spring, este modelo de desarrollo debería resultarte familiar. Se expone un recurso que contiene métodos anotados con <code>@GET</code>, <code>@POST</code>…&ZeroWidthSpace;&ZeroWidthSpace; ... para manejar las diferentes peticiones. La ruta se especifica utilizando la anotación <code>@Path</code>. Quarkus también soporta anotaciones del <a href=\"https://quarkus.io/guides/spring-web\">Controlador de Spring</a> como <code>@GetMapping</code> or <code>@RestController</code>."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:48
msgid "You can use the JPA entity manager directly.  Panache proposes an alternative removing boilerplate and exposing an active record and repository models."
msgstr "Se puede utilizar el gestor de entidades JPA directamente. Panache propone una alternativa eliminando el boilerplate y exponiendo un registro activo y modelos de repositorio."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:51
msgid "With Panache, the <code>Element</code> class would be as simple as:"
msgstr "Con Panache, la clase <code>Element</code> sería tan simple como:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:54
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Entity</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Element</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PanacheEntity</span> </span>{\n"
"\n"
"    <span class=\"hljs-keyword\">public</span> String name;\n"
"    <span class=\"hljs-keyword\">public</span> String symbol;\n"
"    <span class=\"hljs-meta\">@Column</span>(unique = <span class=\"hljs-keyword\">true</span>)\n"
"    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> position;\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Entity&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Elemento&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;extende&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;PanacheEntity&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:63
msgid "Microservices tend to come in systems.  Let’s now imagine you need to access another HTTP endpoint.  You can use an HTTP client directly; this is nothing more than repeating boilerplate code.  Quarkus provides a way to call HTTP endpoints easily using the <a href=\"https://quarkus.io/guides/rest-client\">MicroProfile Rest Client API</a>."
msgstr "Los microservicios suelen venir en sistemas. Imaginemos ahora que necesitas acceder a otro endpoint HTTP. Puedes usar un cliente HTTP directamente; esto no es más que repetir código boilerplate. Quarkus proporciona una manera de llamar a los endpoints HTTP fácilmente utilizando la <a href=\"https://quarkus.io/guides/rest-client\">API del cliente REST de MicroProfile</a>."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:68
msgid "First declare your service as follows:"
msgstr "Primero declare su servicio como sigue:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:70
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Element <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elements\"&lt;/span&gt;) &lt;span class=\"hljs-meta\"&gt;@RegisterRestClient&lt;/span&gt;(configKey=&lt;span class=\"hljs-string\"&gt;\"element-service\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;interfaz&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementService&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:79
msgid "For each call you are intending to do, add a method and use annotations to describe the behavior.  You can combine the REST Client with the <a href=\"https://quarkus.io/guides/smallrye-fault-tolerance\">fault tolerance extension</a> to handle failure gracefully.  Then, in your resource, just use the <code>ElementService</code> interface:"
msgstr "Para cada llamada que pretendas hacer, añade un método y utiliza anotaciones para describir el comportamiento. Puedes combinar el cliente REST con la extensión <a href=\"https://quarkus.io/guides/smallrye-fault-tolerance\">tolerancia a fallos</a> para manejar los fallos con elegancia. Luego, en tu recurso, sólo tienes que utilizar la interfaz <code>ElementService</code>:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:83
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elem\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@RestClient</span>\n"
"    ElementService elements;\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        <span class=\"hljs-keyword\">return</span> elements.getElement(position);\n"
"    }\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elem\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementResource&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:95
msgid "But you may be wondering where the URL is configured as it’s not in the code. Remember, it must not be hard-coded because the URL likely depends on the environment. The URL is configured in the application configuration:"
msgstr "Pero puede que te preguntes dónde está configurada la URL, ya que no está en el código. Recuerde que no debe estar codificado porque la URL probablemente depende del entorno. La URL se configura en la configuración de la aplicación:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:97
#, fuzzy, no-wrap
msgid "<code class=\"language-text hljs\" data-lang=\"text\">element-service/mp-rest/url=http://localhost:9001</code>"
msgstr "&lt;código class=\"language-text hljs\" data-lang=\"text\"&gt;elemento-servicio/mp-rest/url=http://localhost:9001&lt;/código&gt;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:99
msgid "The URL can now be updated during the deployment or at launch time using system properties or environment variables."
msgstr "Ahora se puede actualizar la URL durante el despliegue o en el momento del lanzamiento utilizando las propiedades del sistema o las variables de entorno."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:101
msgid "Quarkus is not limited to HTTP.  You can use <a href=\"https://quarkus.io/guides/grpc-getting-started\">gRPC</a> or <a href=\"https://quarkus.io/guides/smallrye-graphql\">GraphQL</a>, two prominent alternatives in the microservice space."
msgstr "Quarkus no se limita a HTTP. Puede utilizar <a href=\"https://quarkus.io/guides/grpc-getting-started\">gRPC</a> o <a href=\"https://quarkus.io/guides/smallrye-graphql\">GraphQL</a>, dos alternativas destacadas en el espacio de los microservicios."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:104
msgid "<a class=\"anchor\" href=\"#being-reactive\"></a>Being reactive"
msgstr "<a class=\"anchor\" href=\"#being-reactive\"></a>Ser reactivo"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:106
msgid "Application requirements have changed drastically over the last few years.  For any application to succeed in the era of cloud computing, Big Data, or IoT, going reactive is increasingly becoming the architecture style to follow."
msgstr "Los requisitos de las aplicaciones han cambiado drásticamente en los últimos años. Para que cualquier aplicación tenga éxito en la era de la computación en la nube, el Big Data o el IoT, ser reactivo se está convirtiendo cada vez más en el estilo de arquitectura a seguir."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:109
msgid "Today’s users embrace applications with milliseconds of response time, 100% uptime, lower latency, push data instead of pull, higher throughput, and elasticity. However, these features are nearly impossible to achieve using yesterday’s software architecture without a considerable investment in resources, infrastructure, and tooling. The world changed, and having dozens of servers, long response times (&gt; 500 ms), downtime due to maintenance or waterfalls of failures does not meet the expected user experience."
msgstr "Los usuarios de hoy en día prefieren aplicaciones con un tiempo de respuesta de milisegundos, un tiempo de actividad del 100%, menor latencia, datos push en lugar de pull, mayor rendimiento y elasticidad. Sin embargo, estas características son casi imposibles de conseguir con la arquitectura de software de ayer sin una inversión considerable en recursos, infraestructura y herramientas. El mundo ha cambiado, y tener docenas de servidores, largos tiempos de respuesta (&gt; 500 ms), tiempos de inactividad por mantenimiento o cascadas de fallos no satisface la experiencia de usuario esperada."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:111
msgid "Quarkus aids you on your journey to reactive.  Quarkus is based on a <a href=\"https://quarkus.io/version/main/guides/quarkus-reactive-architecture\">reactive core</a> allowing your application to mix reactive and imperative components.  As an example, you can implement reactive HTTP endpoint using the <a href=\"https://quarkus.io/guides/resteasy-reactive\">RESTEasy Reactive extension</a> as follows:"
msgstr "Quarkus te ayuda en tu viaje hacia lo reactivo. Quarkus se basa en un <a href=\"https://quarkus.io/version/main/guides/quarkus-reactive-architecture\">núcleo reactivo</a>que permite a tu aplicación mezclar componentes reactivos e imperativos. Como ejemplo, puedes implementar un endpoint HTTP reactivo usando la extensión <a href=\"https://quarkus.io/guides/resteasy-reactive\">RESTEasy Reactive</a> como sigue:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:114
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements/{position}\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"    <span class=\"hljs-keyword\">return</span> elements.getElement(position)\n"
"        .onFailure().recoverWithItem(FALLBACK);\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@GET&lt;/span&gt; &lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elementos/{posición}\"&lt;/span&gt;) &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; Uni&lt;Element&gt; &lt;span class=\"hljs-title\"&gt;getElement&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(@PathParam(&lt;span class=\"hljs-string\"&gt;\"position\"&lt;/span&gt;)&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; position) &lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; elements.getElement(position) .onFailure().recoverWithItem(FALLBACK); }&lt;/code&gt;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:120
msgid "Thanks to the <a href=\"https://quarkus.io/version/main/guides/mutiny-primer\">Mutiny Reactive API</a> , you can compose asynchronous operations and complete the result when everything is done without blocking the I/O threads.  This greatly improves resource consumption and elasticity.  Most Quarkus APIs are available in both imperative and reactive.  As example, you can use the reactive version of the REST Client:"
msgstr "Gracias a la <a href=\"https://quarkus.io/version/main/guides/mutiny-primer\">API Reactiva de Mutiny</a> , puedes componer operaciones asíncronas y completar el resultado cuando todo esté hecho sin bloquear los hilos de E/S. Esto mejora mucho el consumo de recursos y la elasticidad. La mayoría de las APIs de Quarkus están disponibles tanto en imperativo como en reactivo. Como ejemplo, puede utilizar la versión reactiva del Cliente REST:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:124
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elements\"&lt;/span&gt;) &lt;span class=\"hljs-meta\"&gt;@RegisterRestClient&lt;/span&gt;(configKey=&lt;span class=\"hljs-string\"&gt;\"element-service\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;interfaz&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementService&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:132
msgid "But, what about streams? Generating a <em>server-sent event</em> response with Quarkus is just as simple:"
msgstr "Pero, ¿qué pasa con los flujos? Generar una respuesta de <em>evento enviado por el servidor</em>; con Quarkus es igual de sencillo:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:133
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Produces</span>(MediaType.SERVER_SENT_EVENTS)\n"
"<span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/events\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Multi&lt;String&gt; <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">()</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> kafka.toMulti();\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Produces&lt;/span&gt;(MediaType.SERVER_SENT_EVENTS) &lt;span class=\"hljs-meta\"&gt;@GET&lt;/span&gt; &lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/eventos\"&lt;/span&gt;) &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; Multi&lt;String&gt; &lt;span class=\"hljs-title\"&gt;stream&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; kafka.toMulti(); }&lt;/code&gt;"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:139
msgid "<a class=\"anchor\" href=\"#event-driven-architectures\"></a>Event-driven Architectures"
msgstr "<a class=\"anchor\" href=\"#event-driven-architectures\"></a>Arquitecturas dirigidas por eventos"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:140
msgid "However, HTTP characteristics prohibit implementing <a href=\"https://www.reactivemanifesto.org/\">reactive systems</a>, where all the components interact using asynchronous messages passing."
msgstr "Sin embargo, las características de HTTP prohíben implementar <a href=\"https://www.reactivemanifesto.org/\">sistemas reactivos</a>, en los que todos los componentes interactúan utilizando el paso de mensajes asíncronos."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:141
msgid "First, you can consume messages from various brokers such as AMQP or Apache Kafka, and process these messages smoothly:"
msgstr "En primer lugar, puede consumir mensajes de varios brokers como AMQP o Apache Kafka, y procesar estos mensajes sin problemas:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:142
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@ApplicationScoped</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyEventProcessor</span> </span>{\n"
"\n"
"  <span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"  <span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"heartbeat\"</span>)\n"
"  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">extractHeartbeat</span><span class=\"hljs-params\">(Health health)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> health.getHeartbeat();\n"
"  }\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@ApplicationScoped&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;public&lt; /span&gt;./span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MyEventProcessor&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:151
msgid "The <code>@Incoming</code> and <code>@Outgoing</code> annotations are part of <a href=\"https://www.smallrye.io/smallrye-reactive-messaging\">Reactive Messaging</a>.  They are used to express from which <em>channel</em> you are consuming and to which <em>channel</em> you are sending.  Thanks to Reactive Messaging you can consume and send messages from and to different brokers and transports such as HTTP, Kafka, or <a href=\"http://camel.apache.org\">Apache Camel</a>."
msgstr "Las anotaciones <code>@Incoming</code> y <code>@Outgoing</code> forman parte de <a href=\"https://www.smallrye.io/smallrye-reactive-messaging\">Mensajería Reactiva</a>. Se utilizan para expresar desde qué <em>canal</em>estás consumiendo y a qué <em>canal</em> estás enviando. Gracias a la Mensajería Reactiva puedes consumir y enviar mensajes desde y hacia diferentes brokers y transportes como HTTP, Kafka, o <a href=\"http://camel.apache.org\">Apache Camel</a>."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:154
msgid "Sometimes you need more than just handling messages one by one.  You can also express your message processing logic using reactive programming as illustrated in the following snippet:"
msgstr "A veces se necesita algo más que manejar los mensajes uno a uno. También puede expresar su lógica de procesamiento de mensajes utilizando la programación reactiva, como se ilustra en el siguiente fragmento:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:156
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"<span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"output\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> Multi&lt;<span class=\"hljs-function\">Record&lt;String, Measure&gt; <span class=\"hljs-title\">filterState</span><span class=\"hljs-params\">(Multi&lt;Capture&gt; input)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> input\n"
"        .drop().repetitions()\n"
"        .select().where(capture -&gt; capture.value &gt; <span class=\"hljs-number\">0</span>)\n"
"        .onItem().transform(capture -&gt; <span class=\"hljs-keyword\">new</span> Measure(capture.sensor, capture.value, capture.unit))\n"
"        .onItem().transform(measure -&gt; Record.of(measure.sensor, measure));\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Incoming&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"health\"&lt;/span&gt;)/span&gt;) &lt;span class=\"hljs-meta\"&gt;@Outgoing&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"output\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; Multi&lt;&lt;span class=\"hljs-function\"&gt;Record&lt;String, Measure&gt; &lt;span class=\"hljs-title\"&gt;estado del filtro&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Multi&lt;Capture&gt; input)&lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; input .drop().repetitions() .select().where(capture -&gt; capture.value &gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) .onItem().transform(capture -&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; Measure(capture.sensor, capture.value, capture.unit)) .onItem().transform(measure -&gt; Record.of(measure.sensor, measure)); }&lt;/code&gt;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:165
msgid "As for the reactive APIs exposed by Quarkus, stream manipulation uses the Mutiny API."
msgstr "En cuanto a las APIs reactivas expuestas por Quarkus, la manipulación de flujos utiliza la API Mutiny."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:166
msgid "<a class=\"anchor\" href=\"#functions-as-a-service-and-serverless\"></a>Functions as a Service and Serverless"
msgstr "<a class=\"anchor\" href=\"#functions-as-a-service-and-serverless\"></a>Funciones como servicio y sin servidor"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:167
msgid "Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus to be used in serverless environments.  Quarkus provides Funqy, an approach to writing functions that are deployable to various FaaS environments like AWS Lambda, Azure Functions, Knative, and Knative Events (Cloud Events). It is also usable as a standalone service."
msgstr "Gracias a su tiempo de inicio estelar y su bajo uso de memoria, puedes implementar funciones usando Quarkus para ser utilizadas en entornos sin servidor. Quarkus proporciona Funqy, un enfoque para escribir funciones que se pueden desplegar en varios entornos FaaS como AWS Lambda, Azure Functions, Knative y Knative Events (Cloud Events). También se puede utilizar como un servicio independiente."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:169
msgid "With Funqy, a function is just:"
msgstr "Con Funqy, una función es simplemente:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:170
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-keyword\">import</span> io.quarkus.funqy.Funq;\n"
"\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GreetingFunction</span> </span>{\n"
"    <span class=\"hljs-meta\">@Funq</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(String name)</span> </span>{\n"
"       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + name;\n"
"    }\n"
"}</code>"
msgstr "&lt;código class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; io.quarkus.funqy.Funq;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:178
msgid "You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language."
msgstr "Puede utilizar cualquiera de las características de Quarkus en su función y beneficiarse de la rápida puesta en marcha y la baja utilización de la memoria. Con Quarkus, puedes abrazar este nuevo mundo sin tener que cambiar tu lenguaje de programación."
