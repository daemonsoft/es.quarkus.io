# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2024-08-27 06:13+0000\n"
"PO-Revision-Date: 2022-05-16 09:07+0200\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: Attribute 'alt' of: <div><div><div><img><img>
#: upstream/_includes/container-first.html:6
#: upstream/_includes/container-first.html:7
#, fuzzy
msgid "Container image"
msgstr "Imagen del contenedor"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:10
msgid "From the outset, Quarkus has been designed around a container-first philosophy. What this means in concrete terms is that Quarkus applications are optimised for low memory usage and fast startup times in the following ways:"
msgstr "Desde el principio, Quarkus ha sido diseñado en torno a una filosofía de \"contenedor primero\". Lo que esto significa en términos concretos es que las aplicaciones de Quarkus están optimizadas para un bajo uso de memoria y tiempos de arranque rápidos de las siguientes maneras:"

#. type: Attribute 'alt' of: <div><div><div><img><img>
#: upstream/_includes/container-first.html:11
#: upstream/_includes/container-first.html:12
msgid "Quarkus Build Time Principle"
msgstr "Principio de tiempo de construcción de Quarkus"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:15
msgid "Build Time Processing"
msgstr "Procesamiento del tiempo de construcción"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:16
msgid "The central idea behind Quarkus is to do at build-time what traditional frameworks do at runtime: configuration parsing, classpath scanning, feature toggle based on classloading, and so on."
msgstr "La idea central de Quarkus es hacer en tiempo de compilación lo que los frameworks tradicionales hacen en tiempo de ejecución: análisis de la configuración, escaneo del classpath, conmutación de funciones basada en la carga de clases, etc."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:17
msgid "As much processing as possible is done at build time; thus, your application only contains the classes used at runtime. In traditional frameworks, all the classes required to perform the initial application deployment hang around for the application’s life, even though they are only used once. With Quarkus, they are not even loaded into the production JVM! Quarkus does not stop here. During the build-time processing, it prepares the initialization of all components used by your application. It results in less memory usage and faster startup time as all metadata processing has already been done."
msgstr "Todo el procesamiento posible se realiza en el momento de la compilación; de este modo, la aplicación sólo contiene las clases utilizadas en tiempo de ejecución. En los frameworks tradicionales, todas las clases necesarias para realizar el despliegue inicial de la aplicación permanecen durante toda la vida de la misma, aunque sólo se utilicen una vez. Con Quarkus, ¡ni siquiera se cargan en la JVM de producción! Quarkus no se detiene aquí. Durante el proceso de construcción, prepara la inicialización de todos los componentes utilizados por su aplicación. El resultado es un menor uso de memoria y un tiempo de inicio más rápido, ya que todo el procesamiento de metadatos ya se ha realizado."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:19
msgid "Reduction in Reflection Usage"
msgstr "Reducción del uso de la reflexión"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:20
msgid "As much as possible Quarkus tries to avoid reflection, reducing startup time and memory usage. During the built-time processing, extensions can analyze the application code and the classes available on the classpath and replace reflection calls with regular invocations. The usage of dynamic proxies is also prevented by using generating custom proxy at build time."
msgstr "En la medida de lo posible, Quarkus intenta evitar la reflexión, reduciendo el tiempo de inicio y el uso de memoria. Durante el procesamiento en tiempo de construcción, las extensiones pueden analizar el código de la aplicación y las clases disponibles en el classpath y reemplazar las llamadas de reflexión con invocaciones regulares. El uso de proxies dinámicos también se evita mediante la generación de proxies personalizados en tiempo de construcción."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:21
msgid "Arc, the dependency injection framework used by Quarkus, eliminates all the reflection calls and deduces the injection graph at build time. So, when the application starts, no expensive lookups; it’s done already!"
msgstr "Arc, el marco de inyección de dependencia utilizado por Quarkus, elimina todas las llamadas de reflexión y deduce el gráfico de inyección en tiempo de construcción. Así, cuando la aplicación se inicia, no hay búsquedas costosas; ¡ya está hecho!"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:23
msgid "First-Class Support for GraalVM Native Images"
msgstr "Soporte de primera clase para imágenes nativas de GraalVM"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:24
msgid "GraalVM Native Executable support has been an essential part of the design for Quarkus from the beginning. When an application is compiled down to a native executable, it starts much faster and can run with a much smaller heap than a standard JVM. The native compiler uses aggressive dead-code elimination techniques to only embed the parts of the JVM and classes that are absolutely required by your application. Quarkus makes building optimized native executables plain easy. The build-time approach allows Quarkus to collect enough metadata on your application to fine-tune the compilation. No <code>-H:+ReportUnsupportedElementsAtRuntime</code> flag, no fallback, no compromise!"
msgstr "El soporte de ejecutables nativos de GraalVM ha sido una parte esencial del diseño de Quarkus desde el principio. Cuando una aplicación se compila a un ejecutable nativo, se inicia mucho más rápido y puede ejecutarse con un montón mucho más pequeño que una JVM estándar. El compilador nativo utiliza técnicas agresivas de eliminación de código muerto para incrustar sólo las partes de la JVM y las clases que son absolutamente necesarias para su aplicación. Quarkus hace que la construcción de ejecutables nativos optimizados sea muy fácil. El enfoque en tiempo de construcción permite a Quarkus recoger suficientes metadatos sobre su aplicación para ajustar la compilación. ¡No hay flag <code>-H:+ReportUnsupportedElementsAtRuntime</code>, no hay fallback, no hay compromiso!"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:26
msgid "Native Image Pre-Boot"
msgstr "Imagen nativa previa al arranque"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:27
msgid "We pre-boot as many of the frameworks as possible during the native compilation of a Quarkus application. It means that the resulting native executable has already run most of the startup code and serialized the result into the executable: even faster startup!"
msgstr "Pre-arrancamos tantos frameworks como sea posible durante la compilación nativa de una aplicación Quarkus. Esto significa que el ejecutable nativo resultante ya ha ejecutado la mayor parte del código de arranque y ha serializado el resultado en el ejecutable: ¡un arranque aún más rápido!"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:29
msgid "Kubernetes, but also bare metal"
msgstr "Kubernetes, pero también bare metal"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:30
msgid "All the techniques allowing reducing the memory usage and provide faster startup times are not only advantageous in containers. Even on bare metal, it would reduce your memory pressure, and it’s always pleasant to not have to wait 10 seconds to see your application running."
msgstr "Todas las técnicas que permiten reducir el uso de la memoria y proporcionar tiempos de arranque más rápidos no sólo son ventajosas en los contenedores. Incluso en bare metal, reduciría la presión de la memoria, y siempre es agradable no tener que esperar 10 segundos para ver tu aplicación en funcionamiento."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:31
msgid "When Quarkus was designed, we didn’t focus only on containers but also on deploying Quarkus applications on container orchestrators such as Kubernetes. Quarkus build-time processing also generates the Kubernetes metadata, so your application is ready to be deployed on Kubernetes. Runtime capabilities such as health checks and metrics are exposed out of the box. Quarkus collects all the required metadata at build time to create the Kubernetes deployment descriptor and produce a container image. A single command line can deploy your application onto your Kubernetes cluster."
msgstr "Cuando se diseñó Quarkus, no nos centramos únicamente en los contenedores, sino también en el despliegue de aplicaciones Quarkus en orquestadores de contenedores como Kubernetes. El procesamiento en tiempo de construcción de Quarkus también genera los metadatos de Kubernetes, por lo que su aplicación está lista para ser desplegada en Kubernetes. Las capacidades de tiempo de ejecución, como las comprobaciones de salud y las métricas, están expuestas de forma inmediata. Quarkus recoge todos los metadatos necesarios en tiempo de construcción para crear el descriptor de despliegue de Kubernetes y producir una imagen de contenedor. Una sola línea de comandos puede desplegar su aplicación en su clúster de Kubernetes."
