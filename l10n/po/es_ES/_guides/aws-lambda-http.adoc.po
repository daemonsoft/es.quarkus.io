# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/aws-lambda-http.adoc:6
#, fuzzy, no-wrap
msgid "AWS Lambda with RESTEasy Reactive, Undertow, or Reactive Routes"
msgstr "AWS Lambda con RESTEasy Reactive, Undertow o Reactive Routes"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:18
#, fuzzy
msgid "With Quarkus you can deploy your favorite Java HTTP frameworks as AWS Lambda's using either the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html[AWS Gateway HTTP API] or https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html[AWS Gateway REST API].  This means that you can deploy your microservices written with RESTEasy Reactive (our Jakarta REST implementation), Undertow (servlet), Reactive Routes, xref:funqy-http.adoc[Funqy HTTP] or any other Quarkus HTTP framework as an AWS Lambda."
msgstr "Con Quarkus puede implementar sus marcos Java HTTP favoritos como AWS Lambda utilizando la  link:https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html[API HTTP de AWS Gate] way o  link:https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html[la API REST de AWS Gateway]. Esto significa que puede implementar sus microservicios escritos con RESTEasy Reactive (nuestra implementación REST de Jakarta), Undertow (servlet), Reactive Routes,  link:funqy-http.html[Funqy HTTP] o cualquier otro marco HTTP de Quarkus como AWS Lambda."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:21
msgid "You can deploy your Lambda as a pure Java jar, or you can compile your project to a native image and deploy that for a smaller memory footprint and startup time.  Our integration also generates SAM deployment files that can be consumed by https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[Amazon's SAM framework]."
msgstr "Puede desplegar su Lambda como una jar de Java, o puede compilar su proyecto en una imagen nativa y desplegarla para obtener una menor huella de memoria y tiempo de inicio. Nuestra integración también genera archivos de despliegue SAM que pueden ser consumidos por https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[el framework SAM de Amazon]."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:25
msgid "Quarkus has a different extension for each Gateway API.  The HTTP Gateway API is implemented within the `quarkus-amazon-lambda-http` extension.  The REST Gateway API is implemented within the `quarkus-amazon-lambda-rest` extension.  If you are confused on which Gateway product to use, Amazon has a https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html[great guide] to help you navigate this decision."
msgstr "Quarkus tiene una extensión diferente para cada API de Gateway. La API HTTP Gateway se implementa dentro de la extensión `quarkus-amazon-lambda-http`. La API REST Gateway se implementa dentro de la extensión `quarkus-amazon-lambda-rest`. Si estás confundido sobre qué producto Gateway utilizar, Amazon tiene una https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html[excelente guía] para ayudarte a tomar esta decisión."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:27
#, fuzzy
msgid "Like most Quarkus extensions, the Quarkus AWS Lambda HTTP/REST extensions support Live Coding."
msgstr "Como la mayoría de las extensiones de Quarkus, las extensiones HTTP/REST de Quarkus AWS Lambda admiten Live Coding."

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:30
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Requisitos previos"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:35
#, fuzzy
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr "link:https://aws.amazon.com[Una cuenta de Amazon AWS]"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:36
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"
msgstr "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:37
#, fuzzy, no-wrap
msgid "Getting Started"
msgstr "Primeros pasos"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:41
#, fuzzy
msgid "This guide walks you through generating an example Java project via a Maven archetype.  Later on, it walks through the structure of the project so you can adapt any existing projects you have to use AWS Lambda."
msgstr "Esta guía le guía a través de la generación de un proyecto Java de ejemplo mediante un arquetipo de Maven. Más adelante, le guiará por la estructura del proyecto para que pueda adaptar cualquier proyecto existente que tenga para utilizar AWS Lambda."

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:42
#, fuzzy, no-wrap
msgid "Installing AWS bits"
msgstr "Instalación de bits de AWS"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:46
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS SAM CLI."
msgstr "Instalar todos los bits de AWS es probablemente lo más difícil de esta guía. Asegúrate de seguir todos los pasos para instalar AWS SAM CLI."

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:47
#, fuzzy, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr "Creación del proyecto de despliegue de Maven"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:50
#, fuzzy
msgid "Create the Quarkus AWS Lambda Maven project using our Maven Archetype."
msgstr "Crea el proyecto Quarkus AWS Lambda Maven utilizando nuestro Arquetipo Maven."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:52
#, fuzzy
msgid "If you want to use the AWS Gateway HTTP API, generate your project with this script:"
msgstr "Si desea utilizar la API HTTP de AWS Gateway, genere su proyecto con este script:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:58
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-http-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:61
#, fuzzy
msgid "If you want to use the AWS Gateway REST API, generate your project with this script:"
msgstr "Si desea utilizar la API REST de AWS Gateway, genere su proyecto con este script:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:67
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-rest-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:70
#, fuzzy, no-wrap
msgid "Build and Deploy"
msgstr "Construir y desplegar"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:73
#, fuzzy
msgid "Build the project:"
msgstr "Construye el proyecto:"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:79
msgid "This will compile the code and run the unit tests included within the generated project.  Unit testing is the same as any other Java project and does not require running on Amazon.  Quarkus dev mode is also available with this extension."
msgstr "Esto compilará el código y ejecutará las pruebas unitarias incluidas en el proyecto generado. Las pruebas unitarias son las mismas que en cualquier otro proyecto Java y no requieren ser ejecutadas en Amazon. El modo Quarkus dev también está disponible con esta extensión."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:82
#, fuzzy
msgid "If you want to build a native executable, make sure you have GraalVM installed correctly and just add a `native` property to the build"
msgstr "Si quieres construir un ejecutable nativo, asegúrate de que tienes GraalVM instalado correctamente y simplemente añade una propiedad `native` al build"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:88
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing quarkus to use a Docker build as Amazon Lambda requires Linux binaries.  You can do this by passing `-Dquarkus.native.container-build=true` to your build command.  This requires you to have Docker installed locally, however."
msgstr "Si estás construyendo en un sistema que no es Linux, tendrás que pasar también una propiedad que indique a quarkus que utilice una construcción Docker, ya que Amazon Lambda requiere binarios Linux. Puedes hacer esto pasando `-Dquarkus.native.container-build=true` a tu comando de construcción. Sin embargo, esto requiere que tengas Docker instalado localmente."

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:91
#, fuzzy, no-wrap
msgid "Extra Build Generated Files"
msgstr "Archivos adicionales generados en la compilación"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:95
#, fuzzy
msgid "After you run the build, there are a few extra files generated by the Quarkus lambda extension you are using.  These files are in the build directory: `target/` for Maven, `build/` for Gradle."
msgstr "Después de ejecutar la construcción, hay algunos archivos adicionales generados por la extensión Quarkus lambda que está utilizando. Estos archivos están en el directorio de construcción: `target/` para Maven, `build/` para Gradle."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:97
#, fuzzy
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - archivo de despliegue lambda"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:98
#, fuzzy
msgid "`sam.jvm.yaml` - sam cli deployment script"
msgstr "`sam.jvm.yaml` - sam cli script de despliegue"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:99
#, fuzzy
msgid "`sam.native.yaml` - sam cli deployment script for native"
msgstr "`sam.native.yaml` - sam cli script de despliegue para nativos"

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:100
#, fuzzy, no-wrap
msgid "Live Coding and Simulating AWS Lambda Environment Locally"
msgstr "Codificación en vivo y simulación local del entorno de AWS Lambda"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:106
msgid "In dev and test mode, Quarkus will start a mock AWS Lambda event server that will convert HTTP requests to the corresponding API Gateway event types and post them to the underlying Quarkus HTTP lambda environment for processing.  This simulates the AWS Lambda environment as much as possible locally without requiring tools like Docker and SAM CLI."
msgstr "En el modo de desarrollo y prueba, Quarkus iniciará un servidor de eventos AWS Lambda falso que convertirá las solicitudes HTTP en los tipos de eventos de API Gateway correspondientes y los enviará al entorno HTTP Lambda subyacente de Quarkus para su procesamiento. Esto simula el entorno de AWS Lambda tanto como sea posible localmente sin requerir herramientas como Docker y SAM CLI."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:110
msgid "When using Quarkus Dev Mode just invoke HTTP requests on `http://localhost:8080` as you normally would when testing your REST endpoints.  This request will hit the Mock Event Server and will be converted to the API Gateway json message that is consumed by the Quarkus Lambda Poll loop."
msgstr "Cuando se utiliza el Modo Dev de Quarkus sólo hay que invocar peticiones HTTP en `http://localhost:8080` como lo harías normalmente al probar tus endpoints REST. Esta solicitud llegará al Servidor de Eventos Mock y se convertirá en el mensaje json de API Gateway que es consumido por el bucle Quarkus Lambda."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:113
msgid "For testing, Quarkus starts up a separate Mock Event server under port 8081.  The default port for Rest Assured is automatically set to 8081 by Quarkus, so you don't have to worry about setting this up."
msgstr "Para las pruebas, Quarkus inicia un servidor de Eventos Mock separado bajo el puerto 8081. El puerto por defecto para Rest Assured se establece automáticamente en 8081 por Quarkus, por lo que no tiene que preocuparse de configurar esto."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:118
msgid "If you want to simulate more complex API Gateway events in your tests, then manually do an HTTP POST to `http://localhost:8080/\\_lambda_` (port 8081 in test mode) with the raw API Gateway json events.  These events will be placed directly on the Quarkus Lambda poll loop for processing.  Here's an example of that:"
msgstr "Si quieres simular eventos más complejos de la API Gateway en tus pruebas, entonces haz manualmente un HTTP POST a `http://localhost:8080/_lambda_` (puerto 8081 en modo de prueba) con los eventos json de API Gateway sin procesar. Estos eventos se colocarán directamente en el bucle de Quarkus Lambda para su procesamiento. Aquí hay un ejemplo de eso:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:123
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:125
#: upstream/_guides/aws-lambda-http.adoc:478
#: upstream/_guides/aws-lambda-http.adoc:519
#, no-wrap
msgid "import com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:127
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:137
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class AmazonLambdaSimpleTestCase {\n"
"    @Test\n"
"    public void testJaxrsCognitoJWTSecurityContext() throws Exception {\n"
"        APIGatewayV2HTTPEvent request = request(\"/security/username\");\n"
"        request.getRequestContext().setAuthorizer(new APIGatewayV2HTTPEvent.RequestContext.Authorizer());\n"
"        request.getRequestContext().getAuthorizer().setJwt(new APIGatewayV2HTTPEvent.RequestContext.Authorizer.JWT());\n"
"        request.getRequestContext().getAuthorizer().getJwt().setClaims(new HashMap<>());\n"
"        request.getRequestContext().getAuthorizer().getJwt().getClaims().put(\"cognito:username\", \"Bill\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:148
#, no-wrap
msgid ""
"        given()\n"
"                .contentType(\"application/json\")\n"
"                .accept(\"application/json\")\n"
"                .body(request)\n"
"                .when()\n"
"                .post(\"/_lambda_\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\"body\", equalTo(\"Bill\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:151
#, fuzzy
msgid "The above example simulates sending a Cognito principal with an HTTP request to your HTTP Lambda."
msgstr "El ejemplo anterior simula el envío de una entidad de seguridad Cognito con una solicitud HTTP a su Lambda HTTP."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:156
msgid "If you want to hand code raw events for the AWS HTTP API, the AWS Lambda library has the request event type which is `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent` and the response event type of `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPResponse`.  This corresponds to the `quarkus-amazon-lambda-http` extension and the AWS HTTP API."
msgstr "Si desea codificar a mano eventos sin procesar para la API de AWS HTTP, la biblioteca de AWS Lambda tiene el tipo de evento de solicitud que es `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent` y el tipo de evento de respuesta de `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPResponse`. Esto corresponde a la extensión `quarkus-amazon-lambda-http` y a la API de AWS HTTP."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:160
msgid "If you want to hand code raw events for the AWS REST API, Quarkus has its own implementation: `io.quarkus.amazon.lambda.http.model.AwsProxyRequest` and `io.quarkus.amazon.lambda.http.model.AwsProxyResponse`.  This corresponds to `quarkus-amazon-lambda-rest` extension and the AWS REST API."
msgstr "Si quieres codificar a mano los eventos en bruto para la API de AWS REST, Quarkus tiene su propia implementación: `io.quarkus.amazon.lambda.http.model.AwsProxyRequest` y `io.quarkus.amazon.lambda.http.model.AwsProxyResponse`. Esto corresponde a la extensión `quarkus-amazon-lambda-rest` y a la API REST de AWS."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:163
#, fuzzy
msgid "The mock event server is also started for `@QuarkusIntegrationTest` tests so will work with native binaries too.  All this provides similar functionality to the SAM CLI local testing, without the overhead of Docker."
msgstr "El servidor de eventos simulado también se inicia para las pruebas de `@QuarkusIntegrationTest`, por lo que también funcionará con binarios nativos. Todo esto proporciona una funcionalidad similar a las pruebas locales de SAM CLI, sin la sobrecarga de Docker."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:166
#, fuzzy
msgid "Finally, if port 8080 or port 8081 is not available on your computer, you can modify the dev and test mode ports with application.properties"
msgstr "Por último, si el puerto 8080 o el puerto 8081 no están disponibles en su ordenador, puede modificar los puertos de los modos dev y test con application.properties"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:171
#, no-wrap
msgid ""
"quarkus.lambda.mock-event-server.dev-port=8082\n"
"quarkus.lambda.mock-event-server.test-port=8083\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:174
#, fuzzy
msgid "A port value of zero will result in a randomly assigned port."
msgstr "Un valor de puerto de cero resultará en un puerto asignado aleatoriamente."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:176
#, fuzzy
msgid "To turn off the mock event server:"
msgstr "Para desactivar el servidor de eventos simulado:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:179
#, no-wrap
msgid "quarkus.lambda.mock-event-server.enabled=false\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:182
#, fuzzy, no-wrap
msgid "Simulate AWS Lambda Deployment with SAM CLI"
msgstr "Simular la implementación de AWS Lambda con SAM CLI"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:186
msgid "The AWS SAM CLI allows you to run your lambda's locally on your laptop in a simulated Lambda environment.  This requires Docker to be installed.  After you have built your Maven project, execute this command:"
msgstr "La CLI de AWS SAM le permite ejecutar sus lambdas localmente en su portátil en un entorno de lambda simulado. Esto requiere que Docker esté instalado. Después de haber construido su proyecto Maven, ejecute este comando:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:190
#, no-wrap
msgid "sam local start-api --template target/sam.jvm.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:194
#, fuzzy
msgid "This will start a Docker container that mimics Amazon's Lambda's deployment environment. Once the environment is started you can invoke the example lambda in your browser by going to:"
msgstr "Esto iniciará un contenedor Docker que imita el entorno de despliegue de Amazon Lambda. Una vez iniciado el entorno puedes invocar la lambda de ejemplo en tu navegador yendo a:"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:196
msgid "http://127.0.0.1:3000/hello"
msgstr "http://127.0.0.1:3000/hello"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:199
msgid "In the console you'll see startup messages from the lambda.  This particular deployment starts a JVM and loads your lambda as pure Java."
msgstr "En la consola verás los mensajes de inicio de la lambda. Este despliegue particular inicia una JVM y carga tu lambda como Java puro."

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:201
#, fuzzy, no-wrap
msgid "Deploy to AWS"
msgstr "Implementación en AWS"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:206
#, no-wrap
msgid "sam deploy -t target/sam.jvm.yaml -g\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:210
msgid "Answer all the questions and your lambda will be deployed and the necessary hooks to the API Gateway will be set up. If everything deploys successfully, the root URL of your microservice will be output to the console.  Something like this:"
msgstr "Responde a todas las preguntas y tu lambda se desplegará y se configurarán los hooks necesarios para el API Gateway. Si todo se despliega con éxito, la URL raíz de tu microservicio se mostrará en la consola. Algo así:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:215
#, no-wrap
msgid ""
"Key                 LambdaHttpApi\n"
"Description         URL for application\n"
"Value               https://234asdf234as.execute-api.us-east-1.amazonaws.com/\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:218
#, fuzzy
msgid "The `Value` attribute is the root URL for your lambda. Copy it to your browser and add `hello` at the end."
msgstr "El atributo `Value` es la URL raíz de tu lambda. Cópialo en tu navegador y añade `hello` al final."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:224
#, fuzzy
msgid "Responses for binary types will be automatically encoded with base64.  This is different from the behavior using `quarkus:dev` which will return the raw bytes.  Amazon's API has additional restrictions requiring the base64 encoding.  In general, client code will automatically handle this encoding but in certain custom situations, you should be aware you may need to manually manage that encoding."
msgstr "Las respuestas para tipos binarios se codificarán automáticamente con base64. Esto es diferente del comportamiento utilizando `quarkus:dev` que devolverá los bytes sin procesar. La API de Amazon tiene restricciones adicionales que requieren la codificación base64. En general, el código del cliente gestionará automáticamente esta codificación, pero en determinadas situaciones personalizadas, debes tener en cuenta que es posible que tengas que gestionar manualmente dicha codificación."

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:225
#, fuzzy, no-wrap
msgid "Deploying a native executable"
msgstr "Despliegue de un ejecutable nativo"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:228
#, fuzzy
msgid "To deploy a native executable, you must build it with GraalVM."
msgstr "Para desplegar un ejecutable nativo, debes construirlo con GraalVM."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:232
#, fuzzy
msgid "You can then test the executable locally with sam local"
msgstr "A continuación, puede probar el ejecutable localmente con sam local"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:236
#, no-wrap
msgid "sam local start-api --template target/sam.native.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:239
#, fuzzy
msgid "To deploy to AWS Lambda:"
msgstr "Para implementar en AWS Lambda:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:242
#, no-wrap
msgid "sam deploy -t target/sam.native.yaml -g\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:244
#, fuzzy, no-wrap
msgid "Examine the POM"
msgstr "Examinar el POM"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:249
#, fuzzy
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda-http` extension (if you are deploying an AWS Gateway HTTP API) or the `quarkus-amazon-lambda-rest` extension (if you are deploying an AWS Gateway REST API).  These extensions automatically generate everything you might need for your lambda deployment."
msgstr "No hay nada especial en el POM aparte de la inclusión de la extensión `quarkus-amazon-lambda-http` (si está implementando una API HTTP de AWS Gateway) o la extensión `quarkus-amazon-lambda-rest` (si está implementando una API REST de AWS Gateway). Estas extensiones generan automáticamente todo lo que pueda necesitar para su implementación de Lambda."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:253
#, fuzzy
msgid "Also, at least in the generated Maven archetype `pom.xml`, the `quarkus-resteasy-reactive`, `quarkus-reactive-routes`, and `quarkus-undertow` dependencies are all optional.  Pick which HTTP framework(s) you want to use (Jakarta REST, Reactive Routes, and/or Servlet) and remove the other dependencies to shrink your deployment."
msgstr "Además, al menos en el arquetipo de Maven generado `pom.xml`, las dependencias `quarkus-resteasy-reactive`, `quarkus-reactive-routes`, y `quarkus-undertow` son todas opcionales. Elige qué framework(s) HTTP quieres usar (Jakarta REST, Reactive Routes, y/o Servlet) y elimina las otras dependencias para reducir tu despliegue."

#. type: Title ===
#: upstream/_guides/aws-lambda-http.adoc:254
#, fuzzy, no-wrap
msgid "Examine sam.yaml"
msgstr "Examinar sam.yaml"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:258
msgid "The `sam.yaml` syntax is beyond the scope of this document.  There's a couple of things that must be highlighted just in case you are going to craft your own custom `sam.yaml` deployment files."
msgstr "La sintaxis de `sam.yaml` está fuera del alcance de este documento. Hay un par de cosas que hay que resaltar en caso de que vayas a elaborar tus propios archivos de despliegue personalizados de `sam.yaml`."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:261
msgid "The first thing to note is that for pure Java lambda deployments require a specific handler class.  Do not change the Lambda handler name."
msgstr "Lo primero que hay que tener en cuenta es que para las implantaciones de lambda en Java puro se requiere una clase manejadora específica. No cambie el nombre del manejador Lambda."

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:267
#, no-wrap
msgid ""
"     Properties:\n"
"        Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest\n"
"        Runtime: java11\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:270
#, fuzzy
msgid "This handler is a bridge between the lambda runtime and the Quarkus HTTP framework you are using (Jakarta REST, Servlet, etc.)"
msgstr "Este manejador es un puente entre el tiempo de ejecución de lambda y el framework HTTP de Quarkus que estés utilizando (Jakarta REST, Servlet, etc.)"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:273
msgid "If you want to go native, there's an environment variable that must be set for native GraalVM deployments.  If you look at `sam.native.yaml` you'll see this:"
msgstr "Si quieres ir de forma nativa, hay una variable de entorno que se debe establecer para los despliegues nativos de GraalVM. Si miras en `sam.native.yaml` verás esto:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:279
#, no-wrap
msgid ""
"        Environment:\n"
"          Variables:\n"
"            DISABLE_SIGNAL_HANDLERS: true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:282
#, fuzzy
msgid "This environment variable resolves some incompatibilities between Quarkus and the AWS Lambda Custom Runtime environment."
msgstr "Esta variable de entorno resuelve algunas incompatibilidades entre Quarkus y el entorno de ejecución personalizado de AWS Lambda."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:287
msgid "Finally, there is one specific thing for AWS Gateway REST API deployments.  That API assumes that HTTP response bodies are text unless you explicitly tell it which media types are binary through configuration.  To make things easier, the Quarkus extension forces a binary (base 64) encoding of all HTTP response messages and the `sam.yaml` file must configure the API Gateway to assume all media types are binary:"
msgstr "Por último, hay una cosa específica para las implementaciones de la API REST de AWS Gateway. Esa API asume que los cuerpos de las respuestas HTTP son texto, a menos que se le indique explícitamente qué tipos de medios son binarios mediante la configuración. Para facilitar las cosas, la extensión de Quarkus fuerza una codificación binaria (base 64) de todos los mensajes de respuesta HTTP y el archivo `sam.yaml` debe configurar la API Gateway para asumir que todos los tipos de medios son binarios:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:295
#, no-wrap
msgid ""
"  Globals:\n"
"    Api:\n"
"      EndpointConfiguration: REGIONAL\n"
"      BinaryMediaTypes:\n"
"        - \"*/*\"\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:297
#, fuzzy, no-wrap
msgid "Injectable AWS Context Variables"
msgstr "Variables de contexto de AWS inyectables"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:301
#, fuzzy
msgid "If you are using RESTEasy Reactive and Jakarta REST, you can inject various AWS Context variables into your Jakarta REST resource classes using the Jakarta REST `@Context` annotation or anywhere else with the CDI `@Inject` annotation."
msgstr "Si utiliza RESTEasy Reactive y Jakarta REST, puede inyectar varias variables AWS Context en sus clases de recursos Jakarta REST utilizando la anotación Jakarta REST `@Context` o en cualquier otro lugar con la anotación CDI `@Inject`."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:304
msgid "For the AWS HTTP API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent`.  Here is an example:"
msgstr "Para la API HTTP de AWS puedes inyectar las variables de AWS `com.amazonaws.services.lambda.runtime.Context` y `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent`. Aquí tienes un ejemplo:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:309
#, no-wrap
msgid ""
"import jakarta.ws.rs.core.Context;\n"
"import com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:315
#: upstream/_guides/aws-lambda-http.adoc:340
#, no-wrap
msgid ""
"@Path(\"/myresource\")\n"
"public class MyResource {\n"
"    @GET\n"
"    public String ctx(@Context com.amazonaws.services.lambda.runtime.Context ctx) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:318
#, no-wrap
msgid ""
"    @GET\n"
"    public String event(@Context APIGatewayV2HTTPEvent event) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:321
#, no-wrap
msgid ""
"    @GET\n"
"    public String requestContext(@Context APIGatewayV2HTTPEvent.RequestContext req) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:324
#: upstream/_guides/aws-lambda-http.adoc:348
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:328
msgid "For the AWS REST API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and `io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext`.  Here is an example:"
msgstr "Para la API de AWS REST puedes inyectar las variables de AWS `com.amazonaws.services.lambda.runtime.Context` y `io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext`. Aquí tienes un ejemplo:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:334
#, no-wrap
msgid ""
"import jakarta.ws.rs.core.Context;\n"
"import io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext;\n"
"import io.quarkus.amazon.lambda.http.model.AwsProxyRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:343
#, no-wrap
msgid ""
"    @GET\n"
"    public String reqContext(@Context AwsProxyRequestContext req) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:346
#, no-wrap
msgid ""
"    @GET\n"
"    public String req(@Context AwsProxyRequest req) { }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:350
#, fuzzy, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr "Rastreo con AWS XRay y GraalVM"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:355
#, fuzzy
msgid "If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray library is not fully compatible with GraalVM, so we had to do some integration work to make this work."
msgstr "Si está creando imágenes nativas y desea utilizar  link:https://aws.amazon.com/xray[AWS X-Ray Tracing] con su lambda, deberá incluir `quarkus-amazon-lambda-xray` como dependencia en su pom. La biblioteca de AWS X-Ray no es totalmente compatible con GraalVM, por lo que hemos tenido que realizar algunas tareas de integración para que funcione."

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:356
#, fuzzy, no-wrap
msgid "Security Integration"
msgstr "Integración de la seguridad"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:361
#, fuzzy
msgid "When you invoke an HTTP request on the API Gateway, the Gateway turns that HTTP request into a JSON event document that is forwarded to a Quarkus Lambda.  The Quarkus Lambda parses this json and converts in into an internal representation of an HTTP request that can be consumed by any HTTP framework Quarkus supports (Jakarta REST, servlet, Reactive Routes)."
msgstr "Cuando se invoca una solicitud HTTP en API Gateway, Gateway convierte esa solicitud HTTP en un documento de evento JSON que se reenvía a Quarkus Lambda. Quarkus Lambda analiza este json y lo convierte en una representación interna de una solicitud HTTP que puede ser consumida por cualquier marco HTTP compatible con Quarkus (Jakarta REST, servlet, Reactive Routes)."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:368
#, fuzzy
msgid "API Gateway supports many ways to securely invoke on your HTTP endpoints that are backed by Lambda and Quarkus.  If you enable it, Quarkus will automatically parse relevant parts of the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html[event json document] and look for security based metadata and register a `java.security.Principal` internally that can be looked up in Jakarta REST by injecting a `jakarta.ws.rs.core.SecurityContext`, via `HttpServletRequest.getUserPrincipal()` in servlet, and `RouteContext.user()` in Reactive Routes.  If you want more security information, the `Principal` object can be typecast to a class that will give you more information."
msgstr "API Gateway admite muchas formas de invocar de forma segura en sus puntos finales HTTP respaldados por Lambda y Quarkus. Si lo habilitas, Quarkus analizará automáticamente las partes relevantes del  link:https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html[documento json del] evento y buscará metadatos basados en la seguridad y registrará un `java.security.Principal` internamente que se puede buscar en Jakarta REST inyectando un `jakarta.ws.rs.core.SecurityContext`, a través de `HttpServletRequest.getUserPrincipal()` en servlet, y `RouteContext.user()` en Reactive Routes. Si quieres más información de seguridad, el objeto `Principal` puede ser typecast a una clase que te dará más información."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:370
msgid "To enable this security feature, add this to your `application.properties` file:"
msgstr "Para activar esta función de seguridad, añada esto a su archivo `application.properties`:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:372
#, no-wrap
msgid "quarkus.lambda-http.enable-security=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:376
#, fuzzy
msgid "Here's how its mapped:"
msgstr "Este es el mapa:"

#. type: Block title
#: upstream/_guides/aws-lambda-http.adoc:377
#: upstream/_guides/aws-lambda-http.adoc:429
#, no-wrap
msgid "HTTP `quarkus-amazon-lambda-http`"
msgstr "HTTP `quarkus-amazon-lambda-http`"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:380
#: upstream/_guides/aws-lambda-http.adoc:390
#, fuzzy, no-wrap
msgid "Auth Type"
msgstr "Tipo de autorización"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:380
#: upstream/_guides/aws-lambda-http.adoc:390
#, fuzzy, no-wrap
msgid "Principal Class"
msgstr "Clase principal"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:381
#: upstream/_guides/aws-lambda-http.adoc:391
#, fuzzy, no-wrap
msgid "Json path of Principal Name"
msgstr "Ruta Json del nombre principal"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:381
#, no-wrap
msgid "Cognito JWT"
msgstr "Cognito JWT"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:381
#: upstream/_guides/aws-lambda-http.adoc:391
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.CognitoPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.CognitoPrincipal`"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:382
#, no-wrap
msgid "`requestContext.authorizer.jwt.claims.cognito:username`"
msgstr "`requestContext.authorizer.jwt.claims.cognito:username`"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:382
#: upstream/_guides/aws-lambda-http.adoc:392
#, fuzzy, no-wrap
msgid "IAM"
msgstr "IAM"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:382
#: upstream/_guides/aws-lambda-http.adoc:392
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.IAMPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.IAMPrincipal`"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:383
#, no-wrap
msgid "`requestContext.authorizer.iam.userId`"
msgstr "`requestContext.authorizer.iam.userId`"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:383
#: upstream/_guides/aws-lambda-http.adoc:393
#, fuzzy, no-wrap
msgid "Custom Lambda"
msgstr "Lambda personalizado"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:383
#: upstream/_guides/aws-lambda-http.adoc:393
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.CustomPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.CustomPrincipal`"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:385
#, no-wrap
msgid "`requestContext.authorizer.lambda.principalId`"
msgstr "`requestContext.authorizer.lambda.principalId`"

#. type: Block title
#: upstream/_guides/aws-lambda-http.adoc:387
#: upstream/_guides/aws-lambda-http.adoc:470
#, no-wrap
msgid "REST `quarkus-amazon-lambda-rest`"
msgstr "REST `quarkus-amazon-lambda-rest`"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:391
#, no-wrap
msgid "Cognito"
msgstr "Cognito"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:392
#, no-wrap
msgid "`requestContext.authorizer.claims.cognito:username`"
msgstr "`requestContext.authorizer.claims.cognito:username`"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:393
#, no-wrap
msgid "`requestContext.identity.user`"
msgstr "`requestContext.identity.user`"

#. type: Table
#: upstream/_guides/aws-lambda-http.adoc:395
#, no-wrap
msgid "`requestContext.authorizer.principalId`"
msgstr "`requestContext.authorizer.principalId`"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:401
#, fuzzy
msgid "If the `cognito:groups` claim is present, then Quarkus will extract and map those groups to Quarkus roles which can then be used in authorization with annotations like `@RolesAllowed`.  If you do not want to map `cognito:groups` to Quarkus roles, then you must explicitly disable it in configuration:"
msgstr "Si el reclamo `cognito:groups` está presente, entonces Quarkus extraerá y mapeará esos grupos a roles de Quarkus que luego pueden ser usados en autorización con anotaciones como `@RolesAllowed`. Si no desea asignar `cognito:groups` a funciones de Quarkus, debe desactivarlo explícitamente en la configuración:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:404
#, no-wrap
msgid "quarkus.lambda-http.map-cognito-to-roles=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:407
#, fuzzy
msgid "You can also specify a different Cognito claim to extract roles from:"
msgstr "También puede especificar una demanda de Cognito diferente de la que extraer los roles:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:410
#, no-wrap
msgid "quarkus.lambda-http.cognito-role-claim=cognito:roles\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:414
#, fuzzy
msgid "By default, it expects roles in a space delimited list enclosed in brackets i.e. `[ user admin ]`.  You can specify the regular expression to use to find individual roles in the claim string too:"
msgstr "Por defecto, espera roles en una lista delimitada por espacios y encerrada entre corchetes, es decir, `[ user admin ]`. También puede especificar la expresión regular que se utilizará para buscar funciones individuales en la cadena de solicitud:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:417
#, no-wrap
msgid "quarkus.lambda-http.cognito-claim-matcher=[^\\[\\] \\t]+\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:420
#, fuzzy, no-wrap
msgid "Custom Security Integration"
msgstr "Integración de seguridad personalizada"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:428
#, fuzzy
msgid "The default support for AWS security only maps the principal name to Quarkus security APIs and does nothing to map claims or roles or permissions.  You have full control on how security metadata in the lambda HTTP event is mapped to Quarkus Security APIs using implementations of the `io.quarkus.amazon.lambda.http.LambdaIdentityProvider` interface.  By implementing this interface, you can do things like define role mappings for your principal or publish additional attributes provided by IAM or Cognito or your Custom Lambda security integration."
msgstr "La compatibilidad predeterminada con la seguridad de AWS sólo asigna el nombre de la entidad de seguridad a las API de seguridad de Quarkus y no hace nada para asignar reclamaciones, funciones o permisos. Usted tiene el control total sobre cómo se asignan los metadatos de seguridad en el evento HTTP lambda a las API de seguridad de Quarkus utilizando implementaciones de la interfaz `io.quarkus.amazon.lambda.http.LambdaIdentityProvider`. Al implementar esta interfaz, puede hacer cosas como definir asignaciones de funciones para su mandante o publicar atributos adicionales proporcionados por IAM o Cognito o su integración de seguridad Lambda personalizada."

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:433
#: upstream/_guides/aws-lambda-http.adoc:474
#, no-wrap
msgid "package io.quarkus.amazon.lambda.http;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:443
#, no-wrap
msgid ""
"/**\n"
" * Helper interface that removes some boilerplate for creating\n"
" * an IdentityProvider that processes APIGatewayV2HTTPEvent\n"
" */\n"
"public interface LambdaIdentityProvider extends IdentityProvider<LambdaAuthenticationRequest> {\n"
"    @Override\n"
"    default public Class<LambdaAuthenticationRequest> getRequestType() {\n"
"        return LambdaAuthenticationRequest.class;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:453
#, no-wrap
msgid ""
"    @Override\n"
"    default Uni<SecurityIdentity> authenticate(LambdaAuthenticationRequest request, AuthenticationRequestContext context) {\n"
"        APIGatewayV2HTTPEvent event = request.getEvent();\n"
"        SecurityIdentity identity = authenticate(event);\n"
"        if (identity == null) {\n"
"            return Uni.createFrom().optional(Optional.empty());\n"
"        }\n"
"        return Uni.createFrom().item(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:465
#, no-wrap
msgid ""
"    /**\n"
"     * You must override this method unless you directly override\n"
"     * IdentityProvider.authenticate\n"
"     *\n"
"     * @param event\n"
"     * @return\n"
"     */\n"
"    default SecurityIdentity authenticate(APIGatewayV2HTTPEvent event) {\n"
"        throw new IllegalStateException(\"You must override this method or IdentityProvider.authenticate\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:469
msgid "For HTTP, the important method to override is `LambdaIdentityProvider.authenticate(APIGatewayV2HTTPEvent event)`.  From this you will allocate a SecurityIdentity based on how you want to map security data from `APIGatewayV2HTTPEvent`"
msgstr "En el caso de HTTP, el método importante a anular es `LambdaIdentityProvider.authenticate(APIGatewayV2HTTPEvent event)`. A partir de él, asignarás una SecurityIdentity basada en cómo quieres asignar los datos de seguridad de `APIGatewayV2HTTPEvent`"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:476
#, no-wrap
msgid "import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:484
#, no-wrap
msgid ""
"import io.quarkus.amazon.lambda.http.model.AwsProxyRequest;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.IdentityProvider;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:491
#, no-wrap
msgid ""
"/**\n"
" * Helper interface that removes some boilerplate for creating\n"
" * an IdentityProvider that processes APIGatewayV2HTTPEvent\n"
" */\n"
"public interface LambdaIdentityProvider extends IdentityProvider<LambdaAuthenticationRequest> {\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:503
#, no-wrap
msgid ""
"    /**\n"
"     * You must override this method unless you directly override\n"
"     * IdentityProvider.authenticate\n"
"     *\n"
"     * @param event\n"
"     * @return\n"
"     */\n"
"    default SecurityIdentity authenticate(AwsProxyRequest event) {\n"
"        throw new IllegalStateException(\"You must override this method or IdentityProvider.authenticate\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:507
msgid "For REST, the important method to override is `LambdaIdentityProvider.authenticate(AwsProxyRequest event)`.  From this you will allocate a SecurityIdentity based on how you want to map security data from `AwsProxyRequest`."
msgstr "Para REST, el método importante que hay que anular es `LambdaIdentityProvider.authenticate(AwsProxyRequest event)`. A partir de esto, asignarás una SecurityIdentity basada en cómo quieres asignar los datos de seguridad de `AwsProxyRequest`."

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:509
msgid "Your implemented provider must be a CDI bean.  Here's an example:"
msgstr "Su proveedor implementado debe ser un bean CDI. He aquí un ejemplo:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:513
#: upstream/_guides/aws-lambda-http.adoc:544
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:515
#: upstream/_guides/aws-lambda-http.adoc:546
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:517
#: upstream/_guides/aws-lambda-http.adoc:548
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:524
#: upstream/_guides/aws-lambda-http.adoc:555
#, no-wrap
msgid ""
"import io.quarkus.amazon.lambda.http.LambdaIdentityProvider;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.runtime.QuarkusPrincipal;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:537
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityProvider implements LambdaIdentityProvider {\n"
"    @Override\n"
"    public SecurityIdentity authenticate(APIGatewayV2HTTPEvent event) {\n"
"        if (event.getHeaders() == null || !event.getHeaders().containsKey(\"x-user\"))\n"
"            return null;\n"
"        Principal principal = new QuarkusPrincipal(event.getHeaders().get(\"x-user\"));\n"
"        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder();\n"
"        builder.setPrincipal(principal);\n"
"        return builder.build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:540
#, fuzzy
msgid "Here's the same example, but with the AWS Gateway REST API:"
msgstr "He aquí el mismo ejemplo, pero con la API REST de AWS Gateway:"

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:550
#, no-wrap
msgid "import io.quarkus.amazon.lambda.http.model.AwsProxyRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/aws-lambda-http.adoc:568
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityProvider implements LambdaIdentityProvider {\n"
"    @Override\n"
"    public SecurityIdentity authenticate(AwsProxyRequest event) {\n"
"        if (event.getMultiValueHeaders() == null || !event.getMultiValueHeaders().containsKey(\"x-user\"))\n"
"            return null;\n"
"        Principal principal = new QuarkusPrincipal(event.getMultiValueHeaders().getFirst(\"x-user\"));\n"
"        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder();\n"
"        builder.setPrincipal(principal);\n"
"        return builder.build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:572
#, fuzzy
msgid "Quarkus should automatically discover this implementation and use it instead of the default implementation discussed earlier."
msgstr "Quarkus debería descubrir automáticamente esta implementación y utilizarla en lugar de la implementación por defecto comentada anteriormente."

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:573
#, no-wrap
msgid "Simple SAM Local Principal"
msgstr "Simple SAM Local Principal"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:578
msgid "If you are testing your application with `sam local` you can hardcode a principal name to use when your application runs by setting the `QUARKUS_AWS_LAMBDA_FORCE_USER_NAME` environment variable"
msgstr "Si está probando su aplicación con `sam local`, puede codificar un nombre principal para utilizarlo cuando se ejecute su aplicación, estableciendo la variable de entorno `QUARKUS_AWS_LAMBDA_FORCE_USER_NAME`"

#. type: Title ==
#: upstream/_guides/aws-lambda-http.adoc:579
#, fuzzy, no-wrap
msgid "SnapStart"
msgstr "SnapStart"

#. type: Plain text
#: upstream/_guides/aws-lambda-http.adoc:581
#, fuzzy
msgid "To optimize your application for Lambda SnapStart, check xref:aws-lambda-snapstart.adoc[the SnapStart Configuration Documentation]."
msgstr "Para optimizar su aplicación para Lambda SnapStart, consulte  link:amazon-snapstart.html[la documentación de configuración de SnapStart]."
