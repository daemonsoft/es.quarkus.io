# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2023-10-29 08:10+0000\n"
"PO-Revision-Date: 2022-05-24 10:55+0200\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/lra.adoc:6
#, no-wrap
msgid "Narayana LRA Participant Support"
msgstr "Apoyo a los participantes en el LRA de Narayana"

#. type: Title ==
#: upstream/_guides/lra.adoc:13
#, no-wrap
msgid "Introduction"
msgstr "Introducción"

#. type: Plain text
#: upstream/_guides/lra.adoc:17
msgid "The LRA (short for Long Running Action) participant extension is useful in microservice based designs where different services can benefit from a relaxed notion of distributed consistency."
msgstr "La extensión del participante LRA (abreviatura de Long Running Action) es útil en los diseños basados en microservicios en los que los diferentes servicios pueden beneficiarse de una noción relajada de consistencia distribuida."

#. type: Plain text
#: upstream/_guides/lra.adoc:22
#, fuzzy
msgid "The idea is for multiple services to perform different computations/actions in concert, whilst retaining the option to compensate for any actions performed during the computation.  This kind of loose coupling of services bridges the gap between strong consistency models such as JTA/XA and \"home-grown\" ad hoc consistency solutions."
msgstr "La idea es que varios servicios realicen diferentes cálculos/acciones de forma concertada, conservando la opción de compensar cualquier acción realizada durante el cálculo. Este tipo de acoplamiento flexible de los servicios salva la distancia entre los modelos de consistencia fuertes como JTA/XA y las soluciones de consistencia ad hoc \"caseras\"."

#. type: Plain text
#: upstream/_guides/lra.adoc:45
#, fuzzy
msgid "The model is based on the https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc[Eclipse MicroProfile LRA specification].  The approach is for the developer to annotate a business method with a Java annotation (https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@LRA`]).  When such a method is called, an LRA context is created (if one is not already present) which is passed along with subsequent Jakarta REST invocations until a method is reached which also contains an `@LRA` annotation with an attribute that indicates that the LRA should be closed or cancelled. The default is for the LRA to be closed in the same method that started the LRA (which itself may have propagated the context during method execution).  The Jakarta REST resource indicates that it wishes to participate in the interaction by, minimally, marking one of the methods with an https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Compensate`] annotation. If the context is later cancelled, then this `@Compensate` action is guaranteed to be called even in the presence of failures and is the trigger for the resource to compensate for any activities it performed in the context of the LRA. This guarantee enables services to operate reliably with the assurance of eventual consistency (when all compensation activities have ran to completion). The participant can ask to be reliably notified when the LRA it is participating in is closed by marking one of the methods with an https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Complete`] annotation. In this way cancelling an LRA causes all participants to be notified via their Compensate callback and closing an LRA causes all participants to be notified via their Complete callback (if they have one).  Other annotations for controlling participants are documented in the https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[MicroProfile LRA API v1.0 javadoc]."
msgstr "El modelo se basa en la https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.adoc#eclipse-microprofile-lra[especificación LRA de Eclipse MicroProfile]. El enfoque consiste en que el desarrollador anote un método de negocio con una anotación Java ( https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@LRA`]). Cuando se llama a un método de este tipo, se crea un contexto LRA (si no hay uno ya presente) que se pasa junto con las invocaciones JAX-RS posteriores hasta que se llega a un método que también contiene una anotación `@LRA` con un atributo que indica que el LRA debe cerrarse o cancelarse. El valor predeterminado es que el ERS se cierre en el mismo método que inició el ERS (que a su vez puede haber propagado el contexto durante la ejecución del método). El recurso JAX-RS indica que desea participar en la interacción marcando, como mínimo, uno de los métodos con una anotación https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Compensate`] anotación. Si el contexto se cancela posteriormente, se garantiza que esta acción de compensación se llame incluso en presencia de fallos y es el desencadenante para que el recurso compense cualquier actividad que haya realizado en el contexto del ERS. Esta garantía permite que los servicios funcionen de forma fiable con la seguridad de una eventual consistencia (cuando todas las actividades de compensación hayan transcurrido hasta su finalización). El participante puede pedir que se le notifique de forma fiable cuando se cierre el ERS en el que participa marcando uno de los métodos con una  link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Complete`] anotación. De este modo, la cancelación de un ERS hace que se notifique a todos los participantes a través de su callback de Compensación y el cierre de un ERS hace que se notifique a todos los participantes a través de su callback de Finalización (si lo tienen). Otras anotaciones para controlar a los participantes están documentadas en el  link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[javadoc de la API de LRA de MicroProfile v1.0]."

#. type: Title ==
#: upstream/_guides/lra.adoc:46
#, no-wrap
msgid "Configuration"
msgstr "Configuración"

#. type: Plain text
#: upstream/_guides/lra.adoc:50
msgid "Once you have your Quarkus Maven project configured you can add the `narayana-lra` extension by running the following command in your project base directory:"
msgstr "Una vez que tengas configurado tu proyecto Quarkus Maven puedes añadir la extensión `narayana-lra` ejecutando el siguiente comando en el directorio base de tu proyecto:"

#. type: Plain text
#: upstream/_guides/lra.adoc:55
msgid "This will add the following to your build file:"
msgstr "Esto añadirá lo siguiente a su archivo de construcción:"

#. type: Block title
#: upstream/_guides/lra.adoc:57
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/lra.adoc:71
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-narayana-lra</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/lra.adoc:74
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/lra.adoc:79
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-narayana-lra\")\n"
"implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-jackson\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/lra.adoc:85
#, fuzzy
msgid "`quarkus-narayana-lra` needs to be complemented with a server Jakarta REST implementation and a REST Client implementation in order to work.  This means that users should also have either `quarkus-resteasy-jackson` and `quarkus-rest-client-jackson` or `quarkus-resteasy-reactive-jackson` and `quarkus-rest-client-reactive-jackson` dependencies in their application."
msgstr "`quarkus-narayana-lra` necesita ser complementado con una implementación JAX-RS del servidor y una implementación del cliente REST para que funcione. Esto significa que los usuarios también deben tener dependencias de `quarkus-resteasy-jackson` y `quarkus-rest-client-jackson` o `quarkus-resteasy-reactive-jackson` y `quarkus-rest-client-reactive-jackson` en su aplicación."

#. type: Plain text
#: upstream/_guides/lra.adoc:89
msgid "If there is a running coordinator then this is all you need in order to create new LRAs and to enlist participants with them."
msgstr "Si hay un coordinador en funcionamiento, es todo lo que necesita para crear nuevos ERS y alistar a los participantes con ellos."

#. type: Plain text
#: upstream/_guides/lra.adoc:94
msgid "The LRA extension can be configured by updating an `application.properties` file in the `src/main/resources` directory. The only LRA specific property is `quarkus.lra.coordinator-url=<url>` which specifies the HTTP endpoint of an external coordinator, for example:"
msgstr "La extensión LRA puede configurarse actualizando un archivo `application.properties` en el directorio `src/main/resources`. La única propiedad específica de LRA es `quarkus.lra.coordinator-url=<url>` que especifica el punto final HTTP de un coordinador externo, por ejemplo:"

#. type: delimited block -
#: upstream/_guides/lra.adoc:98
#, no-wrap
msgid "quarkus.lra.coordinator-url=http://localhost:8080/lra-coordinator\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lra.adoc:106
#, fuzzy
msgid "For a Narayana coordinator the path component of the url is normally `lra-coordinator`.  Coordinators can be obtained from https://quay.io/repository/jbosstm/lra-coordinator or you can build your own coordinator using a maven pom that includes the appropriate dependencies. A Quarkus quickstart will be provided to show how to do this, or you can take a look at one of the https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples/lra-coordinator[Narayana quickstarts].  Another option would be to run it managed inside a WildFly application server."
msgstr "Para un coordinador de Narayana, el componente de la ruta de la url suele ser `lra-coordinator`. Los coordinadores pueden obtenerse de `https://hub.docker.com/r/jbosstm/lra-coordinator` o puedes construir tu propio coordinador usando un pom de maven que incluya las dependencias apropiadas. Se proporcionará un quickstart de Quarkus para mostrar cómo hacer esto o puedes echar un vistazo a uno de los https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples/lra-coordinator[quickstarts] de Narayana. Otra opción sería ejecutarlo gestionado dentro de un servidor de aplicaciones WildFly."

#. type: Title ==
#: upstream/_guides/lra.adoc:107
#, no-wrap
msgid "Handling failures"
msgstr "Gestión de fallos"

#. type: Plain text
#: upstream/_guides/lra.adoc:116
#, fuzzy
msgid "When an LRA is told to finish, i.e. when a method annotated with `@LRA(end = true, ...)` is invoked, the coordinator will instruct all services involved in the interaction to finish. If a service is unavailable (or still finishing) then the coordinator will retry periodically. It is the user's responsibility to restart failed services on the same endpoint that they used when they first joined the LRA, or to tell the coordinator that they wish to be notified on new endpoints. An LRA is not deemed finished until *all* participants have acknowledged that they have finished."
msgstr "Cuando se indica a un ERS que termine, es decir, cuando se invoca un método anotado con `@LRA(end = true, …​)`, el coordinador indicará a todos los servicios implicados en la interacción que terminen. Si un servicio no está disponible (o sigue terminando), el coordinador lo reintentará periódicamente. Es responsabilidad de los usuarios reiniciar los servicios fallidos en el mismo punto final que utilizaron cuando se unieron por primera vez al ERS, o indicar al coordinador que desean ser notificados en nuevos puntos finales. Un ERS no se considera terminado hasta que *todos los* participantes hayan reconocido que han terminado."

#. type: Plain text
#: upstream/_guides/lra.adoc:124
#, fuzzy
msgid "The coordinator is responsible for reliably creating and ending LRAs and for managing participant enlistment, and it therefore must be available (for example if it or the network fail then something in the environment is responsible for restarting the coordinator or for repairing the network, respectively). To fulfill this task the coordinator must have access to durable storage for its logs (via a filesystem or in a database).  At the time of writing, managing coordinators is the responsibility of the user. An \"out-of-the-box\" solution will be forthcoming."
msgstr "El coordinador es el responsable de crear y finalizar los ERS de forma fiable y de gestionar el alistamiento de los participantes, por lo que debe estar disponible (por ejemplo, si él o la red fallan, algo en el entorno se encarga de reiniciar el coordinador o de reparar la red, respectivamente). Para cumplir esta tarea, el coordinador debe tener acceso a un almacenamiento duradero para sus registros (mediante un sistema de archivos o en una base de datos). En la actualidad, la gestión de los coordinadores es responsabilidad del usuario. Una solución \"out-of-the-box\" estará disponible próximamente."

#. type: Title ==
#: upstream/_guides/lra.adoc:125
#, no-wrap
msgid "Examples"
msgstr "Ejemplos"

#. type: Plain text
#: upstream/_guides/lra.adoc:130
msgid "The following is a simple example of how to start an LRA and how to receive a notification when the LRA is later cancelled (the `@Compensate` annotated method is called) or closed (`@Complete` is called):"
msgstr "A continuación se muestra un ejemplo sencillo de cómo iniciar un ERS y cómo recibir una notificación cuando el ERS se cancela posteriormente (se llama al método anotado `@Compensate` ) o se cierra (se llama a `@Complete` ):"

#. type: delimited block -
#: upstream/_guides/lra.adoc:150
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@ApplicationScoped\n"
"public class SimpleLRAParticipant\n"
"{\n"
"    @LRA(LRA.Type.REQUIRES_NEW) // a new LRA is created on method entry\n"
"    @Path(\"/work\")\n"
"    @PUT\n"
"    public void doInNewLongRunningAction(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId)\n"
"    {\n"
"        /*\n"
"         * Perform business actions in the context of the LRA identified by the\n"
"         * value in the injected Jakarta REST header. This LRA was started just before\n"
"         * the method was entered (REQUIRES_NEW) and will be closed when the\n"
"         * method finishes at which point the completeWork method below will be\n"
"         * invoked.\n"
"         */\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lra.adoc:166
#, no-wrap
msgid ""
"    @org.eclipse.microprofile.lra.annotation.Complete\n"
"    @Path(\"/complete\")\n"
"    @PUT\n"
"    public Response completeWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,\n"
"                                 String userData)\n"
"    {\n"
"        /*\n"
"         * Free up resources allocated in the context of the LRA identified by the\n"
"         * value in the injected Jakarta REST header.\n"
"         *\n"
"         * Since there is no @Status method in this class, completeWork MUST be\n"
"         * idempotent and MUST return the status.\n"
"         */\n"
"         return Response.ok(ParticipantStatus.Completed.name()).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lra.adoc:184
#, no-wrap
msgid ""
"    @org.eclipse.microprofile.lra.annotation.Compensate\n"
"    @Path(\"/compensate\")\n"
"    @PUT\n"
"    public Response compensateWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,\n"
"                                   String userData)\n"
"    {\n"
"        /*\n"
"         * The LRA identified by the value in the injected Jakarta REST header was\n"
"         * cancelled so the business logic should compensate for any actions\n"
"         * that have been performed while running in its context.\n"
"         *\n"
"         * Since there is no @Status method in this class, compensateWork MUST be\n"
"         * idempotent and MUST return the status\n"
"         */\n"
"         return Response.ok(ParticipantStatus.Compensated.name()).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lra.adoc:188
#, fuzzy
msgid "The example also shows that when an LRA is present its identifier can be obtained by reading the request headers via the `@HeaderParam` Jakarta REST annotation type."
msgstr "El ejemplo también muestra que cuando un LRA está presente, su identificador puede obtenerse leyendo las cabeceras de la solicitud a través del tipo de anotación `@HeaderParam` JAX-RS."

#. type: Plain text
#: upstream/_guides/lra.adoc:194
msgid "And here's an example of how to start an LRA in one resource method and close it in a different resource method using the `end` element of the `LRA` annotation. It also shows how to configure the LRA to be automatically cancelled if the business method returns the particular HTTP status codes identified in the `cancelOn` and `cancelOnFamily` elements:"
msgstr "Y aquí hay un ejemplo de cómo iniciar un ERS en un método de recurso y cerrarlo en un método de recurso diferente utilizando el elemento `end` de la anotación `LRA`. También muestra cómo configurar el ERS para que se cancele automáticamente si el método de negocio devuelve los códigos de estado HTTP particulares identificados en los elementos `cancelOn` y `cancelOnFamily`:"

#. type: delimited block -
#: upstream/_guides/lra.adoc:208
#, no-wrap
msgid ""
"  @LRA(value = LRA.Type.REQUIRED, // if there is no incoming context a new one is created\n"
"       cancelOn = {\n"
"           Response.Status.INTERNAL_SERVER_ERROR // cancel on a 500 code\n"
"       },\n"
"       cancelOnFamily = {\n"
"           Response.Status.Family.CLIENT_ERROR // cancel on any 4xx code\n"
"       },\n"
"       end = false) // the LRA will continue to run when the method finishes\n"
"  @Path(\"/book\")\n"
"  @POST\n"
"  public Response bookTrip(...) { ... }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lra.adoc:214
#, no-wrap
msgid ""
"  @LRA(value = LRA.Type.MANDATORY, // requires an active context before method can be executed\n"
"       end = true) // end the LRA started by the bookTrip method\n"
"  @Path(\"/confirm\")\n"
"  @PUT\n"
"  public Booking confirmTrip(Booking booking) throws BookingException { ... }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lra.adoc:221
#, fuzzy
msgid "The `end = false` element on the bookTrip method forces the LRA to continue running when the method finishes and the `end = true` element on the confirmTrip method forces the LRA (started by the bookTrip method) to be closed when the method finishes. Note that this end element can be placed on any Jakarta REST resource (ie one service can start the LRA whilst a different service ends it). There are many more examples in the https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc#java-annotations-for-lras[Microprofile LRA specification document] and in the https://github.com/eclipse/microprofile-lra/tree/master/tck/src/main/java/org/eclipse/microprofile/lra/tck[Microprofile LRA TCK]."
msgstr "El elemento `end = false` en el método bookTrip obliga a que el ERS continúe ejecutándose cuando el método termine y el elemento `end = true` en el método confirmTrip obliga a que el ERS (iniciado por el método bookTrip) se cierre cuando el método termine. Tenga en cuenta que este elemento final puede colocarse en cualquier recurso JAX-RS (es decir, un servicio puede iniciar el ERS mientras otro servicio lo termina). Hay muchos más ejemplos en el https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.adoc#java-annotations[documento de especificación del Microperfil LRA] y en el https://github.com/eclipse/microprofile-lra/tree/master/tck/src/main/java/org/eclipse/microprofile/lra/tck[TCK del Microperfil LRA]."
