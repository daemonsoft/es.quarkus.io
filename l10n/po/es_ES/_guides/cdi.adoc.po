# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-12 08:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/cdi.adoc:6
#, fuzzy, no-wrap
msgid "Introduction to Contexts and Dependency Injection (CDI)"
msgstr "Introducción a los contextos y a la inyección de dependencia"

#. type: Plain text
#: upstream/_guides/cdi.adoc:18
#, fuzzy
msgid "In this guide we're going to describe the basic principles of the Quarkus programming model that is based on the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html[Jakarta Contexts and Dependency Injection 4.0, window=\"_blank\"] specification."
msgstr "En esta guía vamos a describir los principios básicos del modelo de programación Quarkus que se basa en la especificación  link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Contexts and Dependency Injection for Java 2.0, window=_blank]."

#. type: Title ==
#: upstream/_guides/cdi.adoc:19
#, fuzzy, no-wrap
msgid "OK. Let's start simple. What is a bean?"
msgstr "BIEN. Empecemos con algo sencillo. ¿Qué es una judía?"

#. type: Plain text
#: upstream/_guides/cdi.adoc:22
#, fuzzy
msgid "Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors."
msgstr "Pues bien, un bean es un objeto _gestionado por un contenedor_ que soporta un conjunto de servicios básicos, como la inyección de dependencias, las devoluciones de llamada del ciclo de vida y los interceptores."

#. type: Title ==
#: upstream/_guides/cdi.adoc:23
#, fuzzy, no-wrap
msgid "Wait a minute. What does \"container-managed\" mean?"
msgstr "Un momento. ¿Qué significa \"gestionado por contenedores\"?"

#. type: Plain text
#: upstream/_guides/cdi.adoc:29
#, fuzzy
msgid "Simply put, you don't control the lifecycle of the object instance directly.  Instead, you can affect the lifecycle through declarative means, such as annotations, configuration, etc.  The container is the _environment_ where your application runs.  It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans."
msgstr "En pocas palabras, no se controla el ciclo de vida de la instancia del objeto directamente. En cambio, puedes afectar el ciclo de vida a través de medios declarativos, como anotaciones, configuración, etc. El contenedor es el _entorno_ donde se ejecuta tu aplicación. Crea y destruye las instancias de beans, asocia las instancias con un contexto designado, y las inyecta en otros beans."

#. type: Title ==
#: upstream/_guides/cdi.adoc:30
#, fuzzy, no-wrap
msgid "What is it good for?"
msgstr "¿Para qué sirve?"

#. type: Plain text
#: upstream/_guides/cdi.adoc:33
#, fuzzy
msgid "An application developer can focus on the business logic rather than finding out \"where and how\" to obtain a fully initialized component with all of its dependencies."
msgstr "Un desarrollador de aplicaciones puede centrarse en la lógica de negocio en lugar de averiguar \"dónde y cómo\" obtener un componente totalmente inicializado con todas sus dependencias."

#. type: Plain text
#: upstream/_guides/cdi.adoc:35
#, fuzzy
msgid "You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC."
msgstr "Probablemente haya oído hablar del principio de programación de _inversión de control_ (IoC). La inyección de dependencia es una de las técnicas de implementación de IoC."

#. type: Title ==
#: upstream/_guides/cdi.adoc:36
#, fuzzy, no-wrap
msgid "What does a bean look like?"
msgstr "¿Qué aspecto tiene una judía?"

#. type: Plain text
#: upstream/_guides/cdi.adoc:40
#, fuzzy
msgid "There are several kinds of beans.  The most common ones are class-based beans:"
msgstr "Hay varios tipos de beans. Los más comunes son los frijoles basados en clases:"

#. type: Block title
#: upstream/_guides/cdi.adoc:41
#, fuzzy, no-wrap
msgid "Simple Bean Example"
msgstr "Ejemplo de frijol simple"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:47
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import org.eclipse.microprofile.metrics.annotation.Counted;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:50
#, no-wrap
msgid ""
"@ApplicationScoped <1>\n"
"public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:53
#, no-wrap
msgid ""
"    @Inject\n"
"    Dictionary dictionary; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:59
#, no-wrap
msgid ""
"    @Counted  <3>\n"
"    String translate(String sentence) {\n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:61
#, fuzzy
msgid "This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all other beans that inject `Translator`."
msgstr "Esta es una anotación de alcance. Indica al contenedor con qué contexto debe asociar la instancia del bean. En este caso particular, se crea una *única* instancia de bean para la aplicación y es utilizada por todos los demás beans que inyectan `Translator`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:62
#, fuzzy
msgid "This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails."
msgstr "Este es un punto de inyección de campo. Indica al contenedor que `Translator` depende del bean `Dictionary`. Si no hay un bean que coincida, la construcción falla."

#. type: Plain text
#: upstream/_guides/cdi.adoc:63
#, fuzzy
msgid "This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics. We will talk about xref:interceptors[interceptors] later."
msgstr "Se trata de una anotación de enlace del interceptor. En este caso, la anotación proviene de las métricas del microperfil. El interceptor correspondiente intercepta la invocación y actualiza las métricas correspondientes. Hablaremos de  link:#interceptors[los interceptores] más adelante."

#. type: Title ==
#: upstream/_guides/cdi.adoc:65
#, fuzzy, no-wrap
msgid "Nice. How does the dependency resolution work? I see no names or identifiers."
msgstr "Muy bien. ¿Cómo funciona la resolución de dependencias? No veo nombres ni identificadores."

#. type: Plain text
#: upstream/_guides/cdi.adoc:74
#, fuzzy
msgid "That's a good question.  In CDI the process of matching a bean to an injection point is *type-safe*.  Each bean declares a set of bean types.  In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.  Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.  We'll talk about qualifiers later.  For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`."
msgstr "Es una buena pregunta. En CDI, el proceso de emparejar un bean con un punto de inyección es *seguro en cuanto a* tipos. Cada frijol declara un conjunto de tipos de frijoles. En nuestro ejemplo anterior, el bean `Translator` tiene dos tipos de bean: `Translator` y `java.lang.Object`. Posteriormente, un bean es asignable a un punto de inyección si el bean tiene un tipo de bean que coincide con el _tipo requerido_ y tiene todos los calificadores _requeridos_. Hablaremos de los calificadores más adelante. Por ahora, es suficiente saber que el bean de arriba es asignable a un punto de inyección de tipo `Translator` y `java.lang.Object`."

#. type: Title ==
#: upstream/_guides/cdi.adoc:75
#, fuzzy, no-wrap
msgid "Hm, wait a minute. What happens if multiple beans declare the same type?"
msgstr "Un momento. ¿Qué sucede si varios frijoles declaran el mismo tipo?"

#. type: Plain text
#: upstream/_guides/cdi.adoc:81
#, fuzzy
msgid "There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.  If none is assignable the build fails with `UnsatisfiedResolutionException`.  If multiple are assignable the build fails with `AmbiguousResolutionException`.  This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point."
msgstr "Hay una regla simple: *exactamente un frijol debe ser asignable a un punto de inyección, de lo contrario la* construcción falla. Si no se puede asignar ninguno, la compilación falla con `UnsatisfiedResolutionException`. Si se pueden asignar varios, la compilación falla con `AmbiguousResolutionException`. Esto es muy útil porque tu aplicación falla rápidamente cuando el contenedor no es capaz de encontrar una dependencia inequívoca para cualquier punto de inyección."

#. type: delimited block =
#: upstream/_guides/cdi.adoc:85
#, fuzzy
msgid "You can use programmatic lookup via `jakarta.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:"
msgstr "Puede utilizar la búsqueda programática a través de `javax.enterprise.inject.Instance` para resolver las ambigüedades en tiempo de ejecución e incluso iterar sobre todos los beans que implementan un tipo determinado:"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:89
#, no-wrap
msgid "public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:92
#, no-wrap
msgid ""
"    @Inject\n"
"    Instance<Dictionary> dictionaries; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:99
#, no-wrap
msgid ""
"    String translate(String sentence) {\n"
"      for (Dictionary dict : dictionaries) { <2>\n"
"         // ...\n"
"      }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:101
#, fuzzy
msgid "This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type."
msgstr "Este punto de inyección no dará lugar a una dependencia ambigua aunque haya varios beans que implementen el tipo `Dictionary`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:102
#, fuzzy
msgid "`jakarta.enterprise.inject.Instance` extends `Iterable`."
msgstr "`javax.enterprise.inject.Instance` amplía `Iterable`."

#. type: Title ==
#: upstream/_guides/cdi.adoc:104
#, fuzzy, no-wrap
msgid "Can I use setter and constructor injection?"
msgstr "¿Puedo utilizar la inyección de setters y constructores?"

#. type: delimited block =
#: upstream/_guides/cdi.adoc:109
#, fuzzy
msgid "Yes, you can.  In fact, in CDI the \"setter injection\" is superseded by more powerful https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#initializer_methods[initializer methods, window=\"_blank\"].  Initializers may accept multiple parameters and don't have to follow the JavaBean naming conventions."
msgstr "Sí, se puede. De hecho, en CDI la \"inyección de setters\" es sustituida por  link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#initializer_methods[métodos inicializadores, window=_blank] más potentes. Los inicializadores pueden aceptar múltiples parámetros y no tienen que seguir las convenciones de nomenclatura de JavaBean."

#. type: Block title
#: upstream/_guides/cdi.adoc:110
#, fuzzy, no-wrap
msgid "Initialized and Constructor Injection Example"
msgstr "Ejemplo de inyección de inicializadores y constructores"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:115 upstream/_guides/cdi.adoc:331
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:117
#, no-wrap
msgid "    private final TranslatorHelper helper;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:121
#, no-wrap
msgid ""
"    Translator(TranslatorHelper helper) { <1>\n"
"       this.helper = helper;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:127
#, no-wrap
msgid ""
"    @Inject <2>\n"
"    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n"
"      / ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:132
#, fuzzy
msgid "This is a constructor injection.  In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor and the bean constructor must be annotated with `@Inject`.  However, in Quarkus we detect the absence of no-args constructor and \"add\" it directly in the bytecode.  It's also not necessary to add `@Inject` if there is only one constructor present."
msgstr "Esto es una inyección de constructor. De hecho, este código no funcionaría en las implementaciones regulares de CDI, en las que un bean con un ámbito normal debe declarar siempre un constructor sin cargas y el constructor del bean debe estar anotado con `@Inject`. Sin embargo, en Quarkus detectamos la ausencia del constructor sin cargas y lo \"añadimos\" directamente en el código de bytes. Tampoco es necesario añadir `@Inject` si sólo hay un constructor presente."

#. type: Plain text
#: upstream/_guides/cdi.adoc:133
#, fuzzy
msgid "An initializer method must be annotated with `@Inject`."
msgstr "Un método inicializador debe ser anotado con `@Inject`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:134
#, fuzzy
msgid "An initializer may accept multiple parameters - each one is an injection point."
msgstr "Un inicializador puede aceptar múltiples parámetros - cada uno es un punto de inyección."

#. type: Title ==
#: upstream/_guides/cdi.adoc:135
#, fuzzy, no-wrap
msgid "You talked about some qualifiers?"
msgstr "¿Hablaste de algunos calificativos?"

#. type: Plain text
#: upstream/_guides/cdi.adoc:140
#, fuzzy
msgid "https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.  As we already said a bean is assignable to an injection point if it has all the required qualifiers.  If you declare no qualifier at an injection point the `@Default` qualifier is assumed."
msgstr "link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#qualifiers[Los calificadores, window=_blank] son anotaciones que ayudan al contenedor a distinguir los beans que implementan el mismo tipo. Como ya dijimos un bean es asignable a un punto de inyección si tiene todos los calificadores requeridos. Si no se declara ningún calificador en un punto de inyección se asume el calificador `@Default`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:142
#, fuzzy
msgid "A qualifier type is a Java annotation defined as `@Retention(RUNTIME)` and annotated with the `@jakarta.inject.Qualifier` meta-annotation:"
msgstr "Un tipo de calificador es una anotación Java definida como `@Retention(RUNTIME)` y anotada con la meta-anotación `@javax.inject.Qualifier`:"

#. type: Block title
#: upstream/_guides/cdi.adoc:143
#, fuzzy, no-wrap
msgid "Qualifier Example"
msgstr "Ejemplo de calificador"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:150
#, no-wrap
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({METHOD, FIELD, PARAMETER, TYPE})\n"
"public @interface Superior {}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:153
#, fuzzy
msgid "The qualifiers of a bean are declared by annotating the bean class or producer method or field with the qualifier types:"
msgstr "Los calificadores de un bean se declaran anotando la clase del bean o el método o campo productor con los tipos de calificadores:"

#. type: Block title
#: upstream/_guides/cdi.adoc:154
#, fuzzy, no-wrap
msgid "Bean With Custom Qualifier Example"
msgstr "Ejemplo de frijol con calificador personalizado"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:160
#, no-wrap
msgid ""
"@Superior <1>\n"
"@ApplicationScoped\n"
"public class SuperiorTranslator extends Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:165 upstream/_guides/cdi.adoc:235
#, no-wrap
msgid ""
"    String translate(String sentence) {\n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:167
#, fuzzy
msgid "`@Superior` is a https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"]."
msgstr "`@Superior` es una  link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#defining_qualifier_types[anotación calificativa, window=_blank]."

#. type: Plain text
#: upstream/_guides/cdi.adoc:171
#, fuzzy
msgid "This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not to `@Inject Translator`.  The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.  And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable."
msgstr "Este bean sería asignable a `@Inject @Superior Translator` y `@Inject @Superior SuperiorTranslator` pero no a `@Inject Translator`. La razón es que `@Inject Translator` se transforma automáticamente en `@Inject @Default Translator` durante la resolución de tipo. Y como nuestro `SuperiorTranslator` no declara `@Default`, sólo el bean original `Translator` es asignable."

#. type: Title ==
#: upstream/_guides/cdi.adoc:173
#, fuzzy, no-wrap
msgid "Looks good. What is the bean scope?"
msgstr "Se ve bien. ¿Cuál es el alcance de los frijoles?"

#. type: Plain text
#: upstream/_guides/cdi.adoc:176
#, fuzzy
msgid "The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed."
msgstr "El ámbito de un bean determina el ciclo de vida de sus instancias, es decir, cuándo y dónde debe crearse y destruirse una instancia."

#. type: Plain text
#: upstream/_guides/cdi.adoc:178
#, fuzzy
msgid "Every bean has exactly one scope."
msgstr "Cada judía tiene exactamente un ámbito de aplicación."

#. type: Title ==
#: upstream/_guides/cdi.adoc:180
#, fuzzy, no-wrap
msgid "What scopes can I actually use in my Quarkus application?"
msgstr "¿Qué ámbitos puedo utilizar realmente en mi aplicación Quarkus?"

#. type: Plain text
#: upstream/_guides/cdi.adoc:183
#, fuzzy
msgid "You can use all the built-in scopes mentioned by the specification except for `jakarta.enterprise.context.ConversationScoped`."
msgstr "Puede utilizar todos los ámbitos incorporados mencionados por la especificación, excepto `javax.enterprise.context.ConversationScoped`."

#. type: Table
#: upstream/_guides/cdi.adoc:186
#, fuzzy, no-wrap
msgid "Annotation"
msgstr "Anotación"

#. type: Table
#: upstream/_guides/cdi.adoc:188
#, fuzzy, no-wrap
msgid ""
"Description\n"
"//----------------------"
msgstr "Descripción"

#. type: Table
#: upstream/_guides/cdi.adoc:188
#, fuzzy, no-wrap
msgid "`@jakarta.enterprise.context.ApplicationScoped`"
msgstr "`@javax.enterprise.context.ApplicationScoped`"

#. type: Table
#: upstream/_guides/cdi.adoc:189
#, fuzzy, no-wrap
msgid "A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the xref:client_proxies[client proxy]."
msgstr "Se utiliza una única instancia de bean para la aplicación y se comparte entre todos los puntos de inyección. La instancia se crea de forma perezosa, es decir, una vez que se invoca un método sobre el  link:#client_proxies[proxy del cliente]."

#. type: Table
#: upstream/_guides/cdi.adoc:189
#, fuzzy, no-wrap
msgid "`@jakarta.inject.Singleton`"
msgstr "`@javax.inject.Singleton`"

#. type: Table
#: upstream/_guides/cdi.adoc:190
#, fuzzy, no-wrap
msgid "Just like `@ApplicationScoped` except that no client proxy is used. The instance is created when an injection point that resolves to a @Singleton bean is being injected."
msgstr "Igual que `@ApplicationScoped`, excepto que no se utiliza un proxy de cliente. La instancia se crea cuando se inyecta un punto de inyección que resuelve a un bean @Singleton."

#. type: Table
#: upstream/_guides/cdi.adoc:190
#, fuzzy, no-wrap
msgid "`@jakarta.enterprise.context.RequestScoped`"
msgstr "`@javax.enterprise.context.RequestScoped`"

#. type: Table
#: upstream/_guides/cdi.adoc:191
#, fuzzy, no-wrap
msgid "The bean instance is associated with the current _request_ (usually an HTTP request)."
msgstr "La instancia del bean está asociada a la _petición_ actual (normalmente una petición HTTP)."

#. type: Table
#: upstream/_guides/cdi.adoc:191
#, fuzzy, no-wrap
msgid "`@jakarta.enterprise.context.Dependent`"
msgstr "`@javax.enterprise.context.Dependent`"

#. type: Table
#: upstream/_guides/cdi.adoc:192
#, fuzzy, no-wrap
msgid "This is a pseudo-scope. The instances are not shared and every injection point spawns a new instance of the dependent bean. The lifecycle of dependent bean is bound to the bean injecting it - it will be created and destroyed along with the bean injecting it."
msgstr "Se trata de un pseudoámbito. Las instancias no se comparten y cada punto de inyección genera una nueva instancia del bean dependiente. El ciclo de vida del bean dependiente está ligado al bean que lo inyecta - será creado y destruido junto con el bean que lo inyecta."

#. type: Table
#: upstream/_guides/cdi.adoc:192
#, fuzzy, no-wrap
msgid "`@jakarta.enterprise.context.SessionScoped`"
msgstr "`@javax.enterprise.context.SessionScoped`"

#. type: Table
#: upstream/_guides/cdi.adoc:193
#, fuzzy, no-wrap
msgid "This scope is backed by a `jakarta.servlet.http.HttpSession` object. It's only available if the `quarkus-undertow` extension is used."
msgstr "Este ámbito está respaldado por un objeto `javax.servlet.http.HttpSession`. Sólo está disponible si se utiliza la extensión `quarkus-undertow`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:196
#, fuzzy
msgid "There can be other custom scopes provided by Quarkus extensions. For example, xref:transaction.adoc[`quarkus-narayana-jta`] provides xref:transaction.adoc#transaction-scope[`jakarta.transaction.TransactionScoped`]."
msgstr "Puede haber otros ámbitos personalizados proporcionados por las extensiones de Quarkus. Por ejemplo, `quarkus-narayana-jta` proporciona `javax.transaction.TransactionScoped`."

#. type: Title ==
#: upstream/_guides/cdi.adoc:197
#, fuzzy, no-wrap
msgid "`@ApplicationScoped` and `@Singleton` look very similar. Which one should I choose for my Quarkus application?"
msgstr "`@ApplicationScoped` y `@Singleton` son muy similares. ¿Cuál debería elegir para mi aplicación Quarkus?"

#. type: Plain text
#: upstream/_guides/cdi.adoc:200
#, fuzzy
msgid "It depends ;-)."
msgstr "Depende ;-)."

#. type: Plain text
#: upstream/_guides/cdi.adoc:203
#, fuzzy
msgid "A `@Singleton` bean has no xref:client_proxies[client proxy] and hence an instance is _created eagerly_ when the bean is injected. By contrast, an instance of an `@ApplicationScoped` bean is _created lazily_, i.e.  when a method is invoked upon an injected instance for the first time."
msgstr "Un bean `@Singleton` no tiene  link:#client_proxies[proxy de cliente] y, por lo tanto, se crea una instancia de _forma ansiosa_ cuando se inyecta el bean. En cambio, una instancia de un bean `@ApplicationScoped` se _crea de forma perezosa_, es decir, cuando se invoca un método sobre una instancia inyectada por primera vez."

#. type: Plain text
#: upstream/_guides/cdi.adoc:206
#, fuzzy
msgid "Furthermore, client proxies only delegate method invocations and thus you should never read/write fields of an injected `@ApplicationScoped` bean directly.  You can read/write fields of an injected `@Singleton` safely."
msgstr "Además, los proxies de cliente sólo delegan las invocaciones de métodos y, por lo tanto, nunca debes leer/escribir directamente los campos de un bean inyectado de `@ApplicationScoped`. Puedes leer/escribir campos de un `@Singleton` inyectado de forma segura."

#. type: Plain text
#: upstream/_guides/cdi.adoc:208
#, fuzzy
msgid "`@Singleton` should have a slightly better performance because there is no indirection (no proxy that delegates to the current instance from the context)."
msgstr "`@Singleton` debería tener un rendimiento ligeramente mejor porque no hay indirección (no hay proxy que delegue en la instancia actual del contexto)."

#. type: Plain text
#: upstream/_guides/cdi.adoc:210
#, fuzzy
msgid "On the other hand, you cannot mock `@Singleton` beans using xref:getting-started-testing.adoc#quarkus_mock[QuarkusMock]."
msgstr "Por otro lado, no se puede simular `@Singleton` beans utilizando  link:getting-started-testing.html#quarkus_mock[QuarkusMock]."

#. type: Plain text
#: upstream/_guides/cdi.adoc:213
#, fuzzy
msgid "`@ApplicationScoped` beans can be also destroyed and recreated at runtime.  Existing injection points just work because the injected proxy delegates to the current instance."
msgstr "`@ApplicationScoped` también pueden ser destruidos y recreados en tiempo de ejecución. Los puntos de inyección existentes sólo funcionan porque el proxy inyectado delega en la instancia actual."

#. type: Plain text
#: upstream/_guides/cdi.adoc:215
#, fuzzy
msgid "Therefore, we recommend to stick with `@ApplicationScoped` by default unless there's a good reason to use `@Singleton`."
msgstr "Por lo tanto, recomendamos utilizar `@ApplicationScoped` por defecto a menos que haya una buena razón para utilizar `@Singleton`."

#. type: Title ==
#: upstream/_guides/cdi.adoc:217
#, fuzzy, no-wrap
msgid "I don't understand the concept of client proxies."
msgstr "No entiendo el concepto de proxies de clientes."

#. type: Plain text
#: upstream/_guides/cdi.adoc:222
#, fuzzy
msgid "Indeed, the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp, but they provide some useful functionality.  A client proxy is basically an object that delegates all method invocations to a target bean instance.  It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class."
msgstr "De hecho, los  link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#client_proxies[proxies, window=_blank] de cliente pueden ser difíciles de entender, pero proporcionan algunas funcionalidades útiles. Un proxy de cliente es básicamente un objeto que delega todas las invocaciones de métodos a una instancia de bean de destino. Es una construcción de contenedor que implementa `io.quarkus.arc.ClientProxy` y extiende la clase bean."

#. type: Plain text
#: upstream/_guides/cdi.adoc:224
#, fuzzy
msgid "Client proxies only delegate method invocations. So never read or write a field of a normal scoped bean, otherwise you will work with non-contextual or stale data."
msgstr "Los proxies de cliente sólo delegan las invocaciones de métodos. Por tanto, nunca leas o escribas un campo de un bean de ámbito normal, de lo contrario trabajarás con datos no contextuales o antiguos."

#. type: Block title
#: upstream/_guides/cdi.adoc:225
#, fuzzy, no-wrap
msgid "Generated Client Proxy Example"
msgstr "Ejemplo de proxy de cliente generado"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:230
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:238
#, no-wrap
msgid ""
"// The client proxy class is generated and looks like...\n"
"class Translator_ClientProxy extends Translator { <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:246
#, no-wrap
msgid ""
"    String translate(String sentence) {\n"
"      // Find the correct translator instance...\n"
"      Translator translator = getTranslatorInstanceFromTheApplicationContext();\n"
"      // And delegate the method invocation...\n"
"      return translator.translate(sentence);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:248
#, fuzzy
msgid "The `Translator_ClientProxy` instance is always injected instead of a direct reference to a https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#contextual_instance[contextual instance, window=\"_blank\"] of the `Translator` bean."
msgstr "La instancia de `Translator_ClientProxy` siempre se inyecta en lugar de una referencia directa a una  link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#contextual_instance[instancia contextual, window=_blank] del bean `Translator`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:250
#, fuzzy
msgid "Client proxies allow for:"
msgstr "Los proxies de los clientes permiten:"

#. type: Plain text
#: upstream/_guides/cdi.adoc:252
#, fuzzy
msgid "Lazy instantiation - the instance is created once a method is invoked upon the proxy."
msgstr "Instanciación perezosa: la instancia se crea una vez que se invoca un método sobre el proxy."

#. type: Plain text
#: upstream/_guides/cdi.adoc:253
#, fuzzy
msgid "Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean."
msgstr "Posibilidad de inyectar un bean de ámbito \"más estrecho\" a un bean de ámbito \"más amplio\"; es decir, se puede inyectar un bean de `@RequestScoped` en un bean de `@ApplicationScoped`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:254
#, fuzzy
msgid "Circular dependencies in the dependency graph. Having circular dependencies is often an indication that a redesign should be considered, but sometimes it's inevitable."
msgstr "Dependencias circulares en el gráfico de dependencias. Tener dependencias circulares suele ser un indicio de que hay que plantearse un rediseño, pero a veces es inevitable."

#. type: Plain text
#: upstream/_guides/cdi.adoc:255
#, fuzzy
msgid "In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance."
msgstr "En raros casos es práctico destruir los beans manualmente. Una referencia inyectada directamente conduciría a una instancia de frijol rancia."

#. type: Title ==
#: upstream/_guides/cdi.adoc:257
#, fuzzy, no-wrap
msgid "OK. You said that there are several kinds of beans?"
msgstr "BIEN. ¿Has dicho que hay varios tipos de judías?"

#. type: Plain text
#: upstream/_guides/cdi.adoc:260
#, fuzzy
msgid "Yes. In general, we distinguish:"
msgstr "Sí. En general, distinguimos:"

#. type: Plain text
#: upstream/_guides/cdi.adoc:262
#, fuzzy
msgid "Class beans"
msgstr "Clase de frijoles"

#. type: Plain text
#: upstream/_guides/cdi.adoc:263
#, fuzzy
msgid "Producer methods"
msgstr "Métodos de producción"

#. type: Plain text
#: upstream/_guides/cdi.adoc:264
#, fuzzy
msgid "Producer fields"
msgstr "Campos de producción"

#. type: Plain text
#: upstream/_guides/cdi.adoc:265
#, fuzzy
msgid "Synthetic beans"
msgstr "Frijoles sintéticos"

#. type: Plain text
#: upstream/_guides/cdi.adoc:267
#, fuzzy
msgid "Synthetic beans are usually provided by extensions. Therefore, we are not going to cover them in this guide."
msgstr "Los frijoles sintéticos suelen ser proporcionados por las extensiones. Por lo tanto, no vamos a cubrirlos en esta guía."

#. type: Plain text
#: upstream/_guides/cdi.adoc:270
#, fuzzy
msgid "Producer methods and fields are useful if you need additional control over instantiation of a bean.  They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc."
msgstr "Los métodos y campos productores son útiles si necesitas un control adicional sobre la instanciación de un bean. También son útiles cuando se integran bibliotecas de terceros en las que no se controla el origen de la clase y no se pueden añadir anotaciones adicionales, etc."

#. type: Block title
#: upstream/_guides/cdi.adoc:271
#, fuzzy, no-wrap
msgid "Producers Example"
msgstr "Ejemplo de productores"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:276
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Producers {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:279
#, no-wrap
msgid ""
"    @Produces <1>\n"
"    double pi = Math.PI; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:289
#, no-wrap
msgid ""
"    @Produces <3>\n"
"    List<String> names() {\n"
"       List<String> names = new ArrayList<>();\n"
"       names.add(\"Andy\");\n"
"       names.add(\"Adalbert\");\n"
"       names.add(\"Joachim\");\n"
"       return names; <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:292
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Consumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:295
#, no-wrap
msgid ""
"   @Inject\n"
"   double pi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:298
#, no-wrap
msgid ""
"   @Inject\n"
"   List<String> names;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:301
#, no-wrap
msgid ""
"   // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:306
#, fuzzy
msgid "The container analyses the field annotations to build a bean metadata.  The _type_ is used to build the set of bean types.  In this case, it will be `double` and `java.lang.Object`.  No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr "El contenedor analiza las anotaciones de campo para construir los metadatos del bean. El _tipo_ se utiliza para construir el conjunto de tipos de frijoles. En este caso, será `double` y `java.lang.Object`. No se declara ninguna anotación de ámbito, por lo que se establece por defecto `@Dependent`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:307
#, fuzzy
msgid "The container will read this field when creating the bean instance."
msgstr "El contenedor leerá este campo al crear la instancia del bean."

#. type: Plain text
#: upstream/_guides/cdi.adoc:311
#, fuzzy
msgid "The container analyses the method annotations to build a bean metadata.  The _return type_ is used to build the set of bean types.  In this case, it will be `List<String>`, `Collection<String>`, `Iterable<String>` and `java.lang.Object`.  No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr "El contenedor analiza las anotaciones del método para construir los metadatos del bean. El _tipo de retorno_ se utiliza para construir el conjunto de tipos de beans. En este caso, será `List&amp;lt;String&amp;gt;`, `Collection&amp;lt;String&amp;gt;`, `Iterable&amp;lt;String&amp;gt;` y `java.lang.Object`. No se declara ninguna anotación de ámbito, por lo que se establece por defecto `@Dependent`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:312
#, fuzzy
msgid "The container will call this method when creating the bean instance."
msgstr "El contenedor llamará a este método cuando cree la instancia del bean."

#. type: Plain text
#: upstream/_guides/cdi.adoc:316
#, fuzzy
msgid "There's more about producers.  You can declare qualifiers, inject dependencies into the producer methods parameters, etc.  You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/producermethods.html[Weld docs, window=\"_blank\"]."
msgstr "Hay más cosas sobre los productores. Puedes declarar calificadores, inyectar dependencias en los parámetros de los métodos productores, etc. Puedes leer más sobre los productores, por ejemplo, en  link:https://docs.jboss.org/weld/reference/latest/en-US/html/producermethods.html[los documentos de Weld, window=_blank]."

#. type: Title ==
#: upstream/_guides/cdi.adoc:317
#, fuzzy, no-wrap
msgid "OK, injection looks cool. What other services are provided?"
msgstr "Vale, la inyección parece genial. ¿Qué otros servicios se prestan?"

#. type: Title ===
#: upstream/_guides/cdi.adoc:319
#, fuzzy, no-wrap
msgid "Lifecycle Callbacks"
msgstr "Devoluciones de llamada del ciclo de vida"

#. type: Plain text
#: upstream/_guides/cdi.adoc:322
#, fuzzy
msgid "A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:"
msgstr "Una clase de bean puede declarar el ciclo de vida `@PostConstruct` y `@PreDestroy` callbacks:"

#. type: Block title
#: upstream/_guides/cdi.adoc:323
#, fuzzy, no-wrap
msgid "Lifecycle Callbacks Example"
msgstr "Ejemplo de devolución de llamada del ciclo de vida"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:328
#, no-wrap
msgid ""
"import jakarta.annotation.PostConstruct;\n"
"import jakarta.annotation.PreDestroy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:336
#, no-wrap
msgid ""
"    @PostConstruct <1>\n"
"    void init() {\n"
"       // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:342
#, no-wrap
msgid ""
"    @PreDestroy <2>\n"
"    void destroy() {\n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:344
#, fuzzy
msgid "This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here."
msgstr "Esta llamada de retorno es invocada antes de que la instancia del bean sea puesta en servicio. Es seguro realizar alguna inicialización aquí."

#. type: Plain text
#: upstream/_guides/cdi.adoc:345
#, fuzzy
msgid "This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here."
msgstr "Esta llamada de retorno es invocada antes de que la instancia del bean sea destruida. Es seguro realizar algunas tareas de limpieza aquí."

#. type: Plain text
#: upstream/_guides/cdi.adoc:347
#, fuzzy
msgid "It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks."
msgstr "Es una buena práctica mantener la lógica en las devoluciones de llamada \"sin efectos secundarios\", es decir, debes evitar llamar a otros beans dentro de las devoluciones de llamada."

#. type: Title ===
#: upstream/_guides/cdi.adoc:349
#, fuzzy, no-wrap
msgid "Interceptors"
msgstr "Interceptores"

#. type: Plain text
#: upstream/_guides/cdi.adoc:353
#, fuzzy
msgid "Interceptors are used to separate cross-cutting concerns from business logic.  There is a separate specification - Java Interceptors - that defines the basic programming model and semantics."
msgstr "Los interceptores se utilizan para separar las preocupaciones transversales de la lógica de negocio. Existe una especificación independiente -Java Interceptors- que define el modelo de programación básico y la semántica."

#. type: Block title
#: upstream/_guides/cdi.adoc:354
#, fuzzy, no-wrap
msgid "Simple Interceptor Binding Example"
msgstr "Ejemplo de interceptor simple"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:363
#, no-wrap
msgid ""
"import java.lang.annotation.ElementType;\n"
"import java.lang.annotation.Inherited;\n"
"import java.lang.annotation.Retention;\n"
"import java.lang.annotation.RetentionPolicy;\n"
"import java.lang.annotation.Target;\n"
"import jakarta.interceptor.InterceptorBinding;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:370
#, no-wrap
msgid ""
"@InterceptorBinding // <1>\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR}) // <2>\n"
"@Inherited // <3>\n"
"public @interface Logged {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:372
#, fuzzy
msgid "This is an interceptor binding annotation. See the following examples for how it's used."
msgstr "Se trata de una anotación de enlace de interceptor. Vea los siguientes ejemplos para saber cómo se utiliza."

#. type: Plain text
#: upstream/_guides/cdi.adoc:373
#, fuzzy
msgid "An interceptor binding annotation is always put on the interceptor type, and may be put on target types or methods."
msgstr "Esta es una anotación de enlace de interceptor que se utiliza para enlazar nuestro interceptor a un bean. Basta con anotar una clase bean con `@Logged`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:374
#, fuzzy
msgid "Interceptor bindings are often `@Inherited`, but don't have to be."
msgstr "Las fijaciones interceptoras suelen ser `@Inherited`, pero no tienen por qué serlo."

#. type: Block title
#: upstream/_guides/cdi.adoc:375
#, fuzzy, no-wrap
msgid "Simple Interceptor Example"
msgstr "Ejemplo de interceptor simple"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:382
#, no-wrap
msgid ""
"import jakarta.annotation.Priority;\n"
"import jakarta.interceptor.AroundInvoke;\n"
"import jakarta.interceptor.Interceptor;\n"
"import jakarta.interceptor.InvocationContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:387
#, no-wrap
msgid ""
"@Logged // <1>\n"
"@Priority(2020) // <2>\n"
"@Interceptor // <3>\n"
"public class LoggingInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:390
#, no-wrap
msgid ""
"   @Inject // <4>\n"
"   Logger logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:398
#, no-wrap
msgid ""
"   @AroundInvoke // <5>\n"
"   Object logInvocation(InvocationContext context) {\n"
"      // ...log before\n"
"      Object ret = context.proceed(); // <6>\n"
"      // ...log after\n"
"      return ret;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:400 upstream/_guides/cdi.adoc:466
#: upstream/_guides/cdi.adoc:502 upstream/_guides/cdi.adoc:511
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:402
#, fuzzy
msgid "The interceptor binding annotation is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`, as in the following example."
msgstr "Esta es una anotación de enlace de interceptor que se utiliza para enlazar nuestro interceptor a un bean. Basta con anotar una clase bean con `@Logged`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:403
#, fuzzy
msgid "`Priority` enables the interceptor and affects the interceptor ordering. Interceptors with smaller priority values are called first."
msgstr "`Priority` activa el interceptor y afecta al orden de los interceptores. Los interceptores con valores de prioridad menores son llamados primero."

#. type: Plain text
#: upstream/_guides/cdi.adoc:404
#, fuzzy
msgid "Marks an interceptor component."
msgstr "Marca un componente interceptor."

#. type: Plain text
#: upstream/_guides/cdi.adoc:405
#, fuzzy
msgid "An interceptor may inject dependencies."
msgstr "Una instancia de interceptor puede ser el objetivo de la inyección de dependencia."

#. type: Plain text
#: upstream/_guides/cdi.adoc:406
#, fuzzy
msgid "`AroundInvoke` denotes a method that interposes on business methods."
msgstr "`AroundInvoke` denota un método que se interpone a los métodos empresariales."

#. type: Plain text
#: upstream/_guides/cdi.adoc:407
#, fuzzy
msgid "Proceed to the next interceptor in the interceptor chain or invoke the intercepted business method."
msgstr "Proceder al siguiente interceptor en la cadena de interceptores o invocar el método de negocio interceptado."

#. type: Plain text
#: upstream/_guides/cdi.adoc:409
#, fuzzy
msgid "Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepted bean."
msgstr "Las instancias de los interceptores son objetos dependientes de la instancia del bean que interceptan, es decir, se crea una nueva instancia del interceptor para cada bean interceptado."

#. type: Block title
#: upstream/_guides/cdi.adoc:410
#, fuzzy, no-wrap
msgid "Simple Example of Interceptor Usage"
msgstr "Ejemplo de interceptor simple"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:414
#, fuzzy, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr "`@javax.enterprise.context.ApplicationScoped`"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:422
#, no-wrap
msgid ""
"@Logged // <1> <2>\n"
"@ApplicationScoped\n"
"public class MyService {\n"
"   void doSomething() {\n"
"       ...\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:425
#, fuzzy
msgid "The interceptor binding annotation is put on a bean class so that all business methods are intercepted.  The annotation can also be put on individual methods, in which case, only the annotated methods are intercepted."
msgstr "La anotación de enlace interceptor se pone en una clase de frijol para que todos los métodos de negocio sean interceptados. La anotación también se puede poner en métodos individuales, en cuyo caso, sólo se interceptan los métodos anotados."

#. type: Plain text
#: upstream/_guides/cdi.adoc:427
#, fuzzy
msgid "Remember that the `@Logged` annotation is `@Inherited`.  If there's a bean class that inherits from `MyService`, the `LoggingInterceptor` will also apply to it."
msgstr "Recuerda que la anotación `@Logged` es `@Inherited`. Si hay una clase bean que hereda de `MyService`, la `LoggingInterceptor` también se aplicará a ella."

#. type: Title ===
#: upstream/_guides/cdi.adoc:429
#, fuzzy, no-wrap
msgid "Decorators"
msgstr "Decoradores"

#. type: Plain text
#: upstream/_guides/cdi.adoc:432
#, fuzzy
msgid "Decorators are similar to interceptors, but because they implement interfaces with business semantics, they are able to implement business logic."
msgstr "Los decoradores son similares a los interceptores, pero como implementan interfaces con semántica de negocio, son capaces de implementar la lógica de negocio."

#. type: Block title
#: upstream/_guides/cdi.adoc:433
#, fuzzy, no-wrap
msgid "Simple Decorator Example"
msgstr "Ejemplo de decorador simple"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:441
#, no-wrap
msgid ""
"import jakarta.decorator.Decorator;\n"
"import jakarta.decorator.Delegate;\n"
"import jakarta.annotation.Priority;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.enterprise.inject.Any;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:445
#, no-wrap
msgid ""
"public interface Account {\n"
"   void withdraw(BigDecimal amount);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:449
#, no-wrap
msgid ""
"@Priority(10) <1>\n"
"@Decorator <2>\n"
"public class LargeTxAccount implements Account { <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:454
#, no-wrap
msgid ""
"   @Inject\n"
"   @Any\n"
"   @Delegate\n"
"   Account delegate; <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:457
#, no-wrap
msgid ""
"   @Inject\n"
"   LogService logService; <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:464
#, no-wrap
msgid ""
"   void withdraw(BigDecimal amount) {\n"
"      delegate.withdraw(amount); <6>\n"
"      if (amount.compareTo(1000) > 0) {\n"
"         logService.logWithdrawal(delegate, amount);\n"
"      }\n"
"   }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:468
#, fuzzy
msgid "`@Priority` enables the decorator. Decorators with smaller priority values are called first."
msgstr "`@Priority` habilita el decorador. Los decoradores con valores de prioridad menores son llamados primero."

#. type: Plain text
#: upstream/_guides/cdi.adoc:469
#, fuzzy
msgid "`@Decorator` marks a decorator component."
msgstr "`@Decorator` marca un componente de decoración."

#. type: Plain text
#: upstream/_guides/cdi.adoc:470
#, fuzzy
msgid "The set of decorated types includes all bean types which are Java interfaces, except for `java.io.Serializable`."
msgstr "El conjunto de tipos decorados incluye todos los tipos de bean que son interfaces de Java, excepto `java.io.Serializable`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:471
#, fuzzy
msgid "Each decorator must declare exactly one _delegate injection point_. The decorator applies to beans that are assignable to this delegate injection point."
msgstr "Cada decorador debe declarar exactamente un punto de inyección de _delegado_. El decorador se aplica a los beans que son asignables a este punto de inyección de delegado."

#. type: Plain text
#: upstream/_guides/cdi.adoc:472
#, fuzzy
msgid "Decorators can inject other beans."
msgstr "Los decoradores pueden inyectar otras judías."

#. type: Plain text
#: upstream/_guides/cdi.adoc:473
#, fuzzy
msgid "The decorator may invoke any method of the delegate object. And the container invokes either the next decorator in the chain or the business method of the intercepted instance."
msgstr "El decorador puede invocar cualquier método del objeto delegado. Y el contenedor invoca el siguiente decorador de la cadena o el método de negocio de la instancia interceptada."

#. type: Plain text
#: upstream/_guides/cdi.adoc:475
#, fuzzy
msgid "Instances of decorators are dependent objects of the bean instance they intercept, i.e. a new decorator instance is created for each intercepted bean."
msgstr "Las instancias de los decoradores son objetos dependientes de la instancia del bean que interceptan, es decir, se crea una nueva instancia del decorador para cada bean interceptado."

#. type: Title ===
#: upstream/_guides/cdi.adoc:476
#, fuzzy, no-wrap
msgid "Events and Observers"
msgstr "Eventos y observadores"

#. type: Plain text
#: upstream/_guides/cdi.adoc:481
#, fuzzy
msgid "Beans may also produce and consume events to interact in a completely decoupled fashion.  Any Java object can serve as an event payload.  The optional qualifiers act as topic selectors."
msgstr "Los beans también pueden producir y consumir eventos para interactuar de forma completamente desacoplada. Cualquier objeto Java puede servir como carga útil de un evento. Los calificadores opcionales actúan como selectores de temas."

#. type: Block title
#: upstream/_guides/cdi.adoc:482
#, fuzzy, no-wrap
msgid "Simple Event Example"
msgstr "Ejemplo de evento simple"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:489
#, no-wrap
msgid ""
"class TaskCompleted {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:492
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class ComplicatedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:495
#, no-wrap
msgid ""
"   @Inject\n"
"   Event<TaskCompleted> event; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:500
#, no-wrap
msgid ""
"   void doSomething() {\n"
"      // ...\n"
"      event.fire(new TaskCompleted()); <2>\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:505
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class Logger {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:509
#, no-wrap
msgid ""
"   void onTaskCompleted(@Observes TaskCompleted task) { <3>\n"
"      // ...log the task\n"
"   }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:513
#, fuzzy
msgid "`jakarta.enterprise.event.Event` is used to fire events."
msgstr "`javax.enterprise.event.Event` se utiliza para disparar eventos."

#. type: Plain text
#: upstream/_guides/cdi.adoc:514
#, fuzzy
msgid "Fire the event synchronously."
msgstr "Dispara el evento de forma sincronizada."

#. type: Plain text
#: upstream/_guides/cdi.adoc:515
#, fuzzy
msgid "This method is notified when a `TaskCompleted` event is fired."
msgstr "Este método es notificado cuando se dispara un evento `TaskCompleted`."

#. type: Plain text
#: upstream/_guides/cdi.adoc:517
#, fuzzy
msgid "For more info about events/observers visit https://docs.jboss.org/weld/reference/latest/en-US/html/events.html[Weld docs, window=\"_blank\"]."
msgstr "Para más información sobre los eventos/observadores, visita  link:https://docs.jboss.org/weld/reference/latest/en-US/html/events.html[los documentos de Weld, window=_blank]."

#. type: Title ==
#: upstream/_guides/cdi.adoc:518
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "Conclusión"

#. type: Plain text
#: upstream/_guides/cdi.adoc:524
#, fuzzy
msgid "In this guide, we've covered some basic topics of the Quarkus programming model that is based on the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html[Jakarta Contexts and Dependency Injection 4.0, window=\"_blank\"] specification.  Quarkus implements the CDI Lite specification, but not CDI Full.  See also xref:cdi-reference.adoc#supported_features[the list of supported features] and xref:cdi-reference.adoc#limitations[the list of limitations].  There are also quite a few xref:cdi-reference.adoc#nonstandard_features[non-standard features] and xref:cdi-reference.adoc#build_time_apis[Quarkus-specific APIs]."
msgstr "En esta guía, hemos cubierto algunos de los temas básicos del modelo de programación Quarkus que se basa en la especificación  link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Contexts and Dependency Injection for Java 2.0, window=_blank]. Sin embargo, no se utiliza una implementación completa de CDI bajo el capó. Quarkus sólo implementa un subconjunto de las características de CDI - véase también  link:cdi-reference.html#supported_features[la lista de características soportadas] y  link:cdi-reference.html#limitations[la lista de limitaciones]. Por otro lado, hay bastantes  link:cdi-reference.html#nonstandard_features[características no estándar] y  link:cdi-reference.html#build_time_apis[APIs específicas de] Quarkus. Creemos que nuestros esfuerzos impulsarán la innovación de la especificación CDI hacia las pilas de desarrolladores orientadas al tiempo de construcción en el futuro."

#. type: Plain text
#: upstream/_guides/cdi.adoc:526
#, fuzzy
msgid "If you wish to learn more about Quarkus-specific features and limitations there is a Quarkus xref:cdi-reference.adoc[CDI Reference Guide].  We also recommend you to read the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html[CDI specification] and the https://docs.jboss.org/weld/reference/latest/en-US/html/[Weld documentation] (Weld is a CDI Reference Implementation) to get acquainted with more complex topics."
msgstr "Si desea aprender más sobre las características y limitaciones específicas de Quarkus, existe una  link:cdi-reference.html[Guía de Referencia CDI] de Quarkus. También le recomendamos que lea la  link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[especificación CDI] y la  link:https://docs.jboss.org/weld/reference/latest/en-US/html/[documentación de Weld] (Weld es una implementación de referencia CDI) para familiarizarse con temas más complejos."
