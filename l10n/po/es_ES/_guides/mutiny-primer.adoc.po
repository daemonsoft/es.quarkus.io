# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny - Async for bare mortal"
msgstr "Motín - Async para los mortales desnudos"

#: _guides/mutiny-primer.adoc
msgid ""
"https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, reactive programming library.\n"
"It is the primary model to write reactive applications with Quarkus."
msgstr ""

#. type: Title ==
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "An event-driven reactive programming API"
msgstr "Una API de programación reactiva basada en eventos"

#: _guides/mutiny-primer.adoc
msgid ""
"Mutiny is very different from the other reactive programming libraries.\n"
"It takes a different approach to design your program.\n"
"With Mutiny everything is event-driven: you receive events, and you react to them.\n"
"This event-driven aspect embraces the asynchronous nature of distributed systems and provides an elegant and precise way to express continuation."
msgstr ""

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "Mutiny offers two types that are both event-driven and lazy:"
msgstr "Mutiny ofrece dos tipos que se basan en eventos y son perezosos:"

#: _guides/mutiny-primer.adoc
msgid ""
"A `Uni` emits a single event (an item or a failure).\n"
"Unis are convenient to represent asynchronous actions that return 0 or 1 result.\n"
"A good example is the result of sending a message to a message broker queue."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"A `Multi` emits multiple events (n items, 1 failure or 1 completion).\n"
"Multis can represent streams of items, potentially unbounded.\n"
"A good example is receiving messages from a message broker queue."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"These two types allow representing any type of interactions.\n"
"They are event sources.\n"
"You observe them (_subscription_) and you get notified when they emit an item, a failure, or, in the case of a bounded Multi, a completion event.\n"
"When you (the subscriber) receive the event, you can process it (e.g., transform it, filter it).\n"
"With Mutiny, you are going to write code like _onX().action()_, which reads as “on item X do action”."
msgstr ""

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "If you want to know more about Mutiny, and the concepts behind it, check https://smallrye.io/smallrye-mutiny/latest/reference/why-is-asynchronous-important[the Mutiny Reference documentation]."
msgstr "Si quiere saber más sobre el motín y los conceptos que lo sustentan, consulte  link:https://smallrye.io/smallrye-mutiny/pages/philosophy[la filosofía del motín]."

#. type: Title ==
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny in Quarkus"
msgstr "Motín en Quarkus"

#: _guides/mutiny-primer.adoc
msgid ""
"Mutiny is the primary API when dealing with the reactive features from Quarkus.\n"
"It means that most extensions support Mutiny either by exposing an API returning Unis and Multis (such as reactive data sources or rest clients) or understanding when your methods return a Uni or a Multi (such as RESTEasy Reactive or Reactive Messaging)."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"These integrations make Mutiny a prominent and cohesive model for every reactive application developed with Quarkus.\n"
"In addition, Mutiny architecture allows fine-grain dead-code elimination which improves the memory usage when compiled to native (such as with Quarkus native mode or GraalVM native image compiler)."
msgstr ""

#. type: Title ==
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Why another reactive programming API?"
msgstr "¿Por qué otra API de programación reactiva?"

#: _guides/mutiny-primer.adoc
msgid ""
"Seasoned reactive developers may wonder why Quarkus introduced yet another reactive programming APIs while there are existing ones.\n"
"Mutiny is taking a very different angle:"
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"**Event-Driven** -\n"
"Mutiny places events at the core of its design.\n"
"With Mutiny, you observe events, react to them, and create elegant and readable processing pipelines.\n"
"A Ph.D. in functional programming is not required."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"**Navigable** - Even with intelligent code completion, classes with hundreds of methods are confusing.\n"
"Mutiny provides a navigable and explicit API driving you towards the operator you need."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"**Non-Blocking I/O** - Mutiny is the perfect companion to tame the asynchronous nature of applications with non-blocking I/O (which powers xref:quarkus-reactive-architecture.adoc[Quarkus]).\n"
"Declaratively compose operations, transform data, enforce progress, recover from failures, and more."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid "**Made for an asynchronous world** - Mutiny can be used in any asynchronous application such as event-driven microservices, message-based applications, network utilities, data stream processing, and of course... reactive applications!"
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"**Reactive Streams and Converters Built-In** - Mutiny is based on the https://www.reactive-streams.org/[Reactive Streams] specification, and so it can be integrated with any other reactive programming library.\n"
"In addition, it proposes converters to interact with other popular libraries."
msgstr ""

#. type: Title ==
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny and the I/O Threads"
msgstr "El motín y los hilos de E/S"

#: _guides/mutiny-primer.adoc
msgid ""
"Quarkus is powered by a xref:quarkus-reactive-architecture.adoc#engine[reactive engine], and when developing a reactive application, your code is executed on one of the few I/O threads.\n"
"Remember, you must never block these threads, and the model would collapse if you do.\n"
"So, you can't use blocking I/O.\n"
"Instead, you need to schedule the I/O operation and pass a continuation."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"The Mutiny event-driven paradigm is tailored for this.\n"
"When the I/O operation completes successfully, the Uni that represents it emits an item event.\n"
"When it fails, it emits a failure event.\n"
"The continuation is simply and naturally expressed using the event-driven API."
msgstr ""

#. type: Title ==
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny through Examples"
msgstr "El motín a través de los ejemplos"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "Many Quarkus extensions expose Mutiny APIs. In this section, we use the MongoDB extension to illustrate how to use Mutiny."
msgstr "Muchas extensiones de Quarkus exponen las APIs de Mutiny. En esta sección, utilizamos la extensión MongoDB para ilustrar cómo utilizar Mutiny."

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "Let's imagine a simple structure representing an element from the https://en.wikipedia.org/wiki/Periodic_table[periodic table]:"
msgstr "Imaginemos una estructura sencilla que represente un elemento de la  link:https://en.wikipedia.org/wiki/Periodic_table[tabla periódica]:"

#: _guides/mutiny-primer.adoc
msgid ""
"This structure contains the name, symbol, and position of the element.\n"
"To retrieve and store elements into a Mongo collection, you can use the following code:"
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"First, the Mongo client is injected.\n"
"Note that it uses the reactive variant (`io.quarkus.mongodb.reactive.ReactiveMongoClient`).\n"
"In the initialize method, we retrieve and store the collection in which elements will be inserted."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"The `add` method inserts an element in the collection.\n"
"It receives the element as a parameter and uses the reactive API of the collection.\n"
"Interacting with the database involves I/Os.\n"
"The reactive principles forbid blocking while waiting for the interaction to complete.\n"
"Instead, we schedule the operation and pass a continuation.\n"
"The `insertOne` method returns a Uni, i.e., an asynchronous operation.\n"
"That's the scheduled I/O. We now need to express the continuation, which is done using the `.onItem()` method.\n"
"`.onItem()` allows configuring what needs to happen when the observed Uni emits an item, in our case when the scheduled I/Os completes.\n"
"In this example, we extract the inserted document id.\n"
"The final step is the subscription.\n"
"Without it, nothing would ever happen. Subscribing triggers the operation.\n"
"The subscription method can also define handlers:  the `id` value on success, or a failure when the insertion fails."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"Let's now look at the second method.\n"
"It retrieves all the stored elements.\n"
"In this case, it returns multiple items (one per stored element), so we are using a `Multi`.\n"
"As for the insertion, getting the stored elements involves I/Os.\n"
"The `find` is our operation.\n"
"As for Uni, you need to subscribe to trigger the operation.\n"
"The subscriber receives item events, a failure event, or a completion event when all the elements have been received."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"Subscribing to a Uni or a Multi is essential, as without it, the operation is never executed.\n"
"In Quarkus some extensions deal with the subscription for you.\n"
"For example, in RESTEasy Reactive your HTTP methods can return a Uni or a Multi, and RESTEasy Reactive handles the subscription."
msgstr ""

#. type: Title ==
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny Patterns"
msgstr "Patrones de motín"

#: _guides/mutiny-primer.adoc
msgid ""
"The example from the last section was simplistic on purpose.\n"
"Let's have a look at a few common patterns."
msgstr ""

#. type: Title ===
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Observing events"
msgstr "Observación de eventos"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "You can observe the various kind of events using:"
msgstr "Puedes observar los distintos tipos de eventos utilizando:"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "`on{event}().invoke(ev -> System.out.println(ev));`"
msgstr "`on{event}().invoke(ev → System.out.println(ev));`"

#: _guides/mutiny-primer.adoc
msgid ""
"For example, for items use:\n"
"`onItem().invoke(item -> ...);`"
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"For failure, use:\n"
"`onFailure().invoke(failure -> ...)`"
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"The `invoke` method is synchronous.\n"
"Sometimes you need to execute an asynchronous action.\n"
"In this case use `call`, as in: `onItem().call(item -> someAsyncAction(item))`.\n"
"Note that `call` does not change the item, it just calls an asynchronous action, and when this one completes, it emits the original item downstream."
msgstr ""

#. type: Title ===
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Transforming item"
msgstr "Elemento transformador"

#: _guides/mutiny-primer.adoc
msgid ""
"The first instrumental pattern consists of transforming the item events you receive.\n"
"As we have seen in the previous section, it could indicate the successful insertion, or the elements stored in the database."
msgstr ""

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "Transforming an item is done using: `onItem().transform(item -> ....)`."
msgstr "La transformación de un elemento se realiza mediante: `onItem().transform(item → …​.)`."

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items/[Mutiny documentation]."
msgstr "Puede encontrar más detalles sobre la transformación en la  link:https://smallrye.io/smallrye-mutiny/getting-started/transforming-items[documentación de Mutiny]."

#. type: Title ===
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Sequential composition"
msgstr "Composición secuencial"

#: _guides/mutiny-primer.adoc
msgid ""
"Sequential composition allows chaining dependent asynchronous operations. This is achieved using `onItem().transformToUni(item -> ...)`.\n"
"Unlike `transform`, the function passed to `transformToUni` returns a Uni."
msgstr ""

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about asynchronous transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items-asynchronously/[Mutiny documentation]."
msgstr "Puede encontrar más detalles sobre la transformación asíncrona en la  link:https://smallrye.io/smallrye-mutiny/getting-started/transforming-items-async[documentación de Mutiny]."

#. type: Title ===
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Failure handling"
msgstr "Gestión de fallos"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "So far we only handle the item events, but handling failure is essential. You can handle failures using `onFailure()`."
msgstr "Hasta ahora sólo manejamos los eventos de los artículos, pero manejar los fallos es esencial. Puedes manejar los fallos usando `onFailure()`."

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "For example, you can recover with a fallback item using `onFailure().recoverWithItem(fallback)`:"
msgstr "Por ejemplo, puede recuperarse con un elemento de reserva utilizando `onFailure().recoverWithItem(fallback)`:"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "You can also retry the operation such as in:"
msgstr "También puedes reintentar la operación como en:"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "More info about failure recovery can be found on https://smallrye.io/smallrye-mutiny/latest/tutorials/handling-failures/[the handling failure documentation] and https://smallrye.io/smallrye-mutiny/latest/tutorials/retrying/[the retrying on failures documentation]."
msgstr "Puede encontrar más información sobre la recuperación de fallos en  link:https://smallrye.io/smallrye-mutiny/getting-started/handling-failures[la documentación sobre gestión de fallos] y en la  link:https://smallrye.io/smallrye-mutiny/getting-started/retry[documentación sobre reintentos]."

#. type: Title ==
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Events and Actions"
msgstr "Eventos y acciones"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "The following tables list the events that you can receive for Uni and Multi. Each of them is associated with its own group (onX). The second table lists the classic action you can do upon an event. Note that some groups offer more possibilities."
msgstr "Las siguientes tablas enumeran los eventos que se pueden recibir para Uni y Multi. Cada uno de ellos está asociado a su propio grupo (onX). La segunda tabla enumera la acción clásica que puede realizar ante un evento. Tenga en cuenta que algunos grupos ofrecen más posibilidades."

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Events from the upstream"
msgstr "Acontecimientos de la corriente ascendente"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Events from the downstream"
msgstr "Eventos de la corriente descendente"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Uni"
msgstr "Uni"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Subscription (1), Item (0..1), failure (0..1)"
msgstr "Suscripción (1), Artículo (0..1), fallo (0..1)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Cancellation"
msgstr "Anulación"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Multi"
msgstr "Multi"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Subscription (1), Item (0..n), failure (0..1), completion (0..1)"
msgstr "Suscripción (1), Artículo (0..n), fracaso (0..1), finalización (0..1)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Cancellation, Request"
msgstr "Anulación, solicitud"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "Check the full list of events on https://smallrye.io/smallrye-mutiny/latest/tutorials/observing-events/[the event documentation]."
msgstr "Consulte la lista completa de eventos en  link:https://smallrye.io/smallrye-mutiny/getting-started/observing-events[la documentación del evento]."

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Action"
msgstr "Acción"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "API"
msgstr "API"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Comment"
msgstr "Comentario"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "transform"
msgstr "transformar"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().transform(Function<I, O> function);`"
msgstr "`onItem().transform(Function&amp;lt;I, O&amp;gt; function);`"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid ""
"Transform the event into another event using a synchronous function.\n"
"The downstream receives the result of the function (or a failure if the transformation failed)."
msgstr "Transformar el evento en otro evento mediante una función sincrónica. El flujo descendente recibe el resultado de la función (o un fallo si la transformación ha fallado)."

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "transformToUni"
msgstr "transformToUni"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().transformToUni(Function<I, Uni<O>> function);`"
msgstr "`onItem().transformToUni(Function&amp;lt;I, Uni&amp;lt;O&amp;gt;&amp;gt; function);`"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Transform the event into another event using an asynchronous function. The downstream receives the item emitted by the produced Uni (or a failure if the transformation failed). If the produced Uni emits a failure, that failure is passed to the downstream."
msgstr "Transforma el evento en otro evento utilizando una función asíncrona. El flujo descendente recibe el elemento emitido por la Uni producida (o un fallo si la transformación ha fallado). Si la Uni producida emite un fallo, ese fallo se transmite al flujo descendente."

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "invoke"
msgstr "invocar"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().invoke(Consumer<I> consumer)`"
msgstr "`onItem().invoke(Consumer&amp;lt;I&amp;gt; consumer)`"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Invokes the synchronous consumer. This is particularly convenient to execute side effects actions. The downstream receives the original event, or a failure if the consumer throws an exception"
msgstr "Invoca al consumidor sincrónico. Esto es particularmente conveniente para ejecutar acciones de efectos secundarios. El flujo descendente recibe el evento original, o un fallo si el consumidor lanza una excepción"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "call"
msgstr "llame a"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().call(Function<I, Uni<?>>)`"
msgstr "`onItem().call(Function&amp;lt;I, Uni&amp;lt;?&amp;gt;&amp;gt;)`"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Invokes the asynchronous function. This is particularly convenient to execute asynchronous side effect actions.The downstream receives the original event, or a failure if the consumer throws an exception or if the produced Uni emits a failure."
msgstr "Invoca la función asíncrona. Esto es particularmente conveniente para ejecutar acciones asíncronas de efecto secundario.El flujo descendente recibe el evento original, o un fallo si el consumidor lanza una excepción o si la Uni producida emite un fallo."

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "fail"
msgstr "falla"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().failWith(Function<I, Throwable>)`"
msgstr "`onItem().failWith(Function&amp;lt;I, Throwable&amp;gt;)`"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Emits a failure when it receives the event."
msgstr "Emite un fallo cuando recibe el evento."

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "complete (Multi only)"
msgstr "completo (sólo para Multi)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().complete()`"
msgstr "`onItem().complete()`"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Emits the completion event when it receives the event."
msgstr "Emite el evento de finalización cuando recibe el evento."

#. type: Title ===
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Other patterns"
msgstr "Otros modelos"

#: _guides/mutiny-primer.adoc
msgid ""
"Mutiny provides lots of other features.\n"
"Head over to the https://smallrye.io/smallrye-mutiny[Mutiny documentation] to see many more examples, including the whole list of events and how to handle them."
msgstr ""

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "Some frequently asked guides are the following:"
msgstr "Algunas de las guías más frecuentes son las siguientes:"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "merge vs. concatenation - https://smallrye.io/smallrye-mutiny/latest/guides/merging-and-concatenating-streams/"
msgstr "fusión vs. concatenación -  https://smallrye.io/smallrye-mutiny/guides/merge-concat"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "controlling the emission thread - https://smallrye.io/smallrye-mutiny/latest/guides/emit-on-vs-run-subscription-on/"
msgstr "control del hilo de emisión -  https://smallrye.io/smallrye-mutiny/guides/emit-subscription"

#: _guides/mutiny-primer.adoc
msgid "explicit blocking  - https://smallrye.io/smallrye-mutiny/latest/guides/imperative-to-reactive/"
msgstr ""

#. type: Title ==
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Shortcuts"
msgstr "Atajos"

#: _guides/mutiny-primer.adoc
msgid ""
"When using Uni, having to write `onItem()` can be cumbersome.\n"
"Fortunately, Mutiny provides a set of shortcut to make your code more concise:"
msgstr ""

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Shortcut"
msgstr "Atajo"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Equivalent"
msgstr "Equivalente"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.map(x -> y)`"
msgstr "uni.map(x → y)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().transform(x -> y)`"
msgstr "uni.onItem().transform(x → y)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.flatMap(x -> uni2)`"
msgstr "uni.flatMap(x → uni2)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().transformToUni(x -> uni2)`"
msgstr "uni.onItem().transformToUni(x → uni2)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.chain(x -> uni2)`"
msgstr "uni.chain(x → uni2)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.invoke(x -> System.out.println(x))`"
msgstr "uni.invoke(x → System.out.println(x))"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().invoke(x -> System.out.println(x))`"
msgstr "uni.onItem().invoke(x → System.out.println(x))"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.call(x -> uni2)`"
msgstr "uni.call(x → uni2)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().call(x -> uni2)`"
msgstr "uni.onItem().call(x → uni2)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.eventually\\(() -> System.out.println(\"eventually\"))`"
msgstr "uni.eventualmente) → System.out.println(\"eventualmente\""

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItemOrFailure().invoke\\((ignoredItem, ignoredException) -> System.out.println(\"eventually\"))`"
msgstr "uni.onItemOrFailure().invokeignoredItem, ignoredException) → System.out.println(\"eventualmente\""

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.eventually(() -> uni2)`"
msgstr "uni.eventualmente(() → uni2)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItemOrFailure().call((ignoredItem, ignoredException) -> uni2)`"
msgstr "uni.onItemOrFailure().call((ignoredItem, ignoredException) → uni2)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.replaceWith(x)`"
msgstr "`uni.replaceWith(x)`"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().transform(ignored -> x)`"
msgstr "uni.onItem().transformToUni(ignorado → uni2)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.replaceWith(uni2)`"
msgstr "`uni.replaceWith(uni2)`"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().transformToUni(ignored -> uni2)`"
msgstr "uni.onItem().transformToUni(ignorado → uni2)"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.replaceIfNullWith(x)`"
msgstr "`uni.replaceIfNullWith(x)`"

#. type: Table
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().ifNull().continueWith(x)`"
msgstr "`uni.onItem().ifNull().continueWith(x)`"

#. type: Title ==
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Reactive Streams"
msgstr "Flujos reactivos"

#: _guides/mutiny-primer.adoc
msgid ""
"Mutiny uses https://www.reactive-streams.org/[Reactive Streams].\n"
"`Multi` implements `Publisher` and enforces the back-pressure protocol.\n"
"Emissions are constrained by the request emitted from the downstream subscribers.\n"
"Thus, it does not overload the subscribers.\n"
"Note that in some cases, you can’t follow this protocol (because the Multi emits events that can’t be controlled, such as time, or measures sensors).\n"
"In this case, Mutiny provides a way to control the overflow using `onOverflow()`."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"`Uni` does not implement Reactive Streams `Publisher`.\n"
"A `Uni` can only emit one event, so subscribing to the `Uni` is enough to express your intent to use the result and does not need the request protocol ceremony."
msgstr ""

#. type: Title ==
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny and Vert.x"
msgstr "Motín y Vert.x"

#: _guides/mutiny-primer.adoc
msgid ""
"Vert.x is a toolkit to build reactive applications and systems.\n"
"It provides a huge ecosystem of libraries following the reactive principles (i.e., non-blocking and asynchronous).\n"
"Vert.x is an essential part of Quarkus, as it provides its reactive capabilities."
msgstr ""

#: _guides/mutiny-primer.adoc
msgid ""
"In addition, the whole Vert.x API can be used with Quarkus.\n"
"To provide a cohesive experience, the Vert.x API is also available using a Mutiny variant, i.e., returns Uni and Multi."
msgstr ""

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about this API can be found on: https://quarkus.io/blog/mutiny-vertx/."
msgstr "Puede encontrar más detalles sobre esta API en:  https://quarkus.io/blog/mutiny-vertx/"

#. type: Title ==
#: _guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny Integration in Quarkus"
msgstr "Integración del motín en Quarkus"

#: _guides/mutiny-primer.adoc
msgid ""
"The integration of Mutiny in Quarkus goes beyond just the library.\n"
"Mutiny exposes hooks that allow Quarkus and Mutiny to be closely integrated:"
msgstr ""

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "Calling `await` or `toIterable` would fail if you are running on an I/O thread, preventing blocking the I/O thread;"
msgstr "Llamar a `await` o `toIterable` fallaría si se está ejecutando en un hilo de E/S, evitando el bloqueo del hilo de E/S;"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "The `log()` operator use the Quarkus logger;"
msgstr "El operador `log()` utiliza el registrador Quarkus;"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "The default Mutiny thread pool is the Quarkus worker thread pool;"
msgstr "El pool de hilos por defecto de Mutiny es el pool de hilos de trabajadores de Quarkus;"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "Context Propagation is enabled by default when using Mutiny Uni and Multi"
msgstr "La Propagación de Contexto está activada por defecto cuando se utiliza Mutiny Uni y Multi"

#. type: Plain text
#: _guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about the infrastructure integration can be found on https://smallrye.io/smallrye-mutiny/latest/guides/framework-integration/."
msgstr "Puede encontrar más detalles sobre la integración de la infraestructura en  https://smallrye.io/smallrye-mutiny/guides/infrastructure"
