msgid ""
msgstr ""
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Testing components"
msgstr "Componentes de prueba"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"The component model of Quarkus is built on top xref:cdi-reference.adoc[CDI].\n"
"Therefore, Quarkus provides `QuarkusComponentTestExtension` - a JUnit extension that makes it easy to test the components/CDI beans and mock their dependencies.\n"
"Unlike `@QuarkusTest` this extension does not start a full Quarkus application but merely the CDI container and the configuration service.\n"
"You can find more details in the <<lifecycle>> section."
msgstr "El modelo de componentes de Quarkus está construido sobre xref:cdi-reference.adoc[CDI] . Por lo tanto, Quarkus proporciona `QuarkusComponentTestExtension` - una extensión de JUnit que facilita la prueba de los componentes / beans CDI y simula sus dependencias. A diferencia de `@QuarkusTest` , esta extensión no inicia una aplicación Quarkus completa, sino simplemente el contenedor CDI y el servicio de configuración. Encontrará más detalles en la sección <<lifecycle>> ."

#: _guides/testing-components.adoc
#, fuzzy
msgid "This extension is available in the `quarkus-junit5-component` dependency."
msgstr "Esta extensión está disponible en la dependencia `quarkus-junit5-component` ."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Basic example"
msgstr "Ejemplo básico"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Let's have a component `Foo` - a CDI bean with two injection points."
msgstr "Tengamos un componente `Foo` - un frijol CDI con dos puntos de inyección."

#: _guides/testing-components.adoc
#, fuzzy
msgid "`Foo` component"
msgstr "`Foo` componente"

#: _guides/testing-components.adoc
#, fuzzy
msgid "`Foo` is an `@ApplicationScoped` CDI bean."
msgstr "`Foo` es un frijol CDI de `@ApplicationScoped`."

#: _guides/testing-components.adoc
#, fuzzy
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr "`Foo` depende de `Charlie` que declara un método `ping()`."

#: _guides/testing-components.adoc
#, fuzzy
msgid "`Foo` depends on the config property `bar`. `@Inject` is not needed for this injection point because it also declares a CDI qualifier - this is a Quarkus-specific feature."
msgstr "`Foo` depende de la propiedad config `bar` . `@Inject` no es necesaria para este punto de inyección porque también declara un calificador CDI - esta es una característica específica de Quarkus."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Then a component test could look like:"
msgstr "Un ejemplo de uso podría ser así:"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Simple component test"
msgstr "Prueba de componentes simple"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The `QuarkusComponentTest` annotation registers the JUnit extension."
msgstr "La anotación `QuarkusComponentTest` registra la extensión JUnit."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Sets a configuration property for the test."
msgstr "Establece una propiedad de configuración para la prueba."

#: _guides/testing-components.adoc
#, fuzzy
msgid "The test injects the component under the test. The types of all fields annotated with `@Inject` are considered the component types under test. You can also specify additional component classes via `@QuarkusComponentTest#value()`. Furthermore, the static nested classes declared on the test class are components too."
msgstr "La prueba inyecta el componente sometido a prueba. Los tipos de todos los campos anotados con `@Inject` se consideran los tipos del componente bajo prueba. También puede especificar clases de componentes adicionales a través de `@QuarkusComponentTest#value()`."

#: _guides/testing-components.adoc
#, fuzzy
msgid "The test also injects a mock for `Charlie`. `Charlie` is an _unsatisfied_ dependency for which a synthetic `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "La prueba también inyecta un mock para `Charlie` . `Charlie` es una dependencia _no satisfecha_ para la que se registra automáticamente un bean sintético `@Singleton` . La referencia inyectada es un mockito de Mockito \"no configurado\"."

#: _guides/testing-components.adoc
#, fuzzy
msgid "We can leverage the Mockito API in a test method to configure the behavior."
msgstr "Podemos aprovechar la API de Mockito en un método de prueba para configurar el comportamiento."

#: _guides/testing-components.adoc
#, fuzzy
msgid "`QuarkusComponentTestExtension` also resolves parameters of test methods and injects matching beans."
msgstr "`QuarkusComponentTestExtension` también resuelve los parámetros de los métodos de prueba e inyecta los frijoles correspondientes."

#: _guides/testing-components.adoc
#, fuzzy
msgid "So the code snippet above can be rewritten as:"
msgstr "Así que el fragmento de código anterior puede reescribirse como:"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Simple component test with test method parameters"
msgstr "Prueba de componente simple con parámetros del método de prueba"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Parameters annotated with `@io.quarkus.test.component.SkipInject` are never resolved by this extension."
msgstr "Los parámetros anotados con `@io.quarkus.test.component.SkipInject` nunca son resueltos por esta extensión."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Furthermore, if you need the full control over the `QuarkusComponentTestExtension` configuration then you can use the `@RegisterExtension` annotation and configure the extension programmatically."
msgstr "Además, si necesita un control total sobre la configuración de `QuarkusComponentTestExtension` , puede utilizar la anotación `@RegisterExtension` y configurar la extensión mediante programación."

#: _guides/testing-components.adoc
#, fuzzy
msgid "The original test could be rewritten like:"
msgstr "La prueba original podría reescribirse como:"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Simple component test with programmatic configuration"
msgstr "Prueba de componentes simple con configuración programática"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The `QuarkusComponentTestExtension` is configured in a static field of the test class."
msgstr "La dirección `QuarkusComponentTestExtension` se configura en un campo estático."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Lifecycle"
msgstr "Ciclo de vida"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"So what exactly does the `QuarkusComponentTest` do?\n"
"It starts the CDI container and registers a dedicated xref:config-reference.adoc[configuration object]."
msgstr "¿Qué hace exactamente `QuarkusComponentTest` ? Inicia el contenedor CDI y registra un xref:config-reference.adoc[objeto de configuración] dedicado."

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"If the test instance lifecycle is `Lifecycle#PER_METHOD` (default) then the container is started during the `before each` test phase and stopped during the `after each` test phase.\n"
"However, if  the test instance lifecycle is `Lifecycle#PER_CLASS` then the container is started during the `before all` test phase and stopped during the `after all` test phase."
msgstr "Si el ciclo de vida de la instancia de prueba es `Lifecycle#PER_METHOD` (por defecto) entonces el contenedor se inicia durante la fase de prueba `before each` y se detiene durante la fase de prueba `after each` . Sin embargo, si el ciclo de vida de la instancia de prueba es `Lifecycle#PER_CLASS` entonces el contenedor se inicia durante la fase de prueba `before all` y se detiene durante la fase de prueba `after all` ."

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.\n"
"The parameters of a test method for which a matching bean exists are resolved (unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`) when a test method is executed.\n"
"Finally, the CDI request context is activated and terminated per each test method."
msgstr "Los campos anotados con `@Inject` y `@InjectMock` se inyectan después de crear una instancia de prueba. Los parámetros de un método de prueba para los que existe un frijol coincidente se resuelven (a menos que estén anotados con `@io.quarkus.test.component.SkipInject` o `@org.mockito.Mock` ) cuando se ejecuta un método de prueba. Por último, el contexto de solicitud CDI se activa y finaliza por cada método de prueba."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Injection"
msgstr "Inyección"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"Fields of the test class that are annotated with `@jakarta.inject.Inject` and `@io.quarkus.test.InjectMock` are injected after a test instance is created.\n"
"Furthermore, the parameters of a test method for which a matching bean exists are resolved unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`.\n"
"There are also some JUnit built-in parameters, such as `RepetitionInfo` and `TestInfo`, which are skipped automatically."
msgstr "Los campos de la clase de prueba anotados con `@jakarta.inject.Inject` y `@io.quarkus.test.InjectMock` se inyectan después de crear una instancia de prueba. Además, los parámetros de un método de prueba para los que existe un bean coincidente se resuelven a menos que estén anotados con `@io.quarkus.test.component.SkipInject` o `@org.mockito.Mock` . También hay algunos parámetros incorporados en JUnit, como `RepetitionInfo` y `TestInfo` , que se omiten automáticamente."

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"An `@Inject` injection point receives the contextual instance of a CDI bean - the real component under test.\n"
"An `@InjectMock` injection point receives an \"unconfigured\" Mockito mock that was created for an <<auto_mocking,unsatisfied dependency automatically>>."
msgstr "Un punto de inyección `@Inject` recibe la instancia contextual de un bean CDI - el componente real bajo prueba. Un punto de inyección `@InjectMock` recibe un mockito \"no configurado\" de Mockito que se creó para una xref:auto_mocking[dependencia no satisfecha automáticamente] ."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Dependent beans injected into the fields and test method arguments are correctly destroyed before a test instance is destroyed and after the test method completes, respectively."
msgstr "Los beans dependientes inyectados en los campos y argumentos del método de prueba se destruyen correctamente antes de que se destruya una instancia de prueba y después de que finalice el método de prueba, respectivamente."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Arguments of a `@ParameterizedTest` method that are provided by an `ArgumentsProvider`, for example with `@org.junit.jupiter.params.provider.ValueArgumentsProvider`, must be annotated with `@SkipInject`."
msgstr "Los argumentos de un método `@ParameterizedTest` que sean proporcionados por un `ArgumentsProvider` , por ejemplo con `@org.junit.jupiter.params.provider.ValueArgumentsProvider` , deben ser anotados con `@SkipInject` ."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Tested components"
msgstr "Componentes probados"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The initial set of tested components is derived from the test class:"
msgstr "El conjunto inicial de componentes probados se deriva de la clase de prueba:"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The types of all fields annotated with `@jakarta.inject.Inject` are considered the component types."
msgstr "Los tipos de todos los campos anotados con `@jakarta.inject.Inject` se consideran los tipos de los componentes."

#: _guides/testing-components.adoc
#, fuzzy
msgid "The types of test methods parameters that are not annotated with `@InjectMock`, `@SkipInject`, or `@org.mockito.Mock` are also considered the component types."
msgstr "Los tipos de parámetros de métodos de ensayo que no están anotados con `@InjectMock` , `@SkipInject` , o `@org.mockito.Mock` también se consideran los tipos de componentes."

#: _guides/testing-components.adoc
#, fuzzy
msgid "If `@QuarkusComponentTest#addNestedClassesAsComponents()` is set to `true` (default) then all static nested classes declared on the test class are components too."
msgstr "Si `@QuarkusComponentTest#addNestedClassesAsComponents()` se establece en `true` (por defecto) entonces todas las clases estáticas anidadas declaradas en la clase de prueba son componentes también."

#: _guides/testing-components.adoc
#, fuzzy
msgid "`@Inject Instance<T>` and `@Inject @All List<T>` injection points are handled specifically. The actual type argument is registered as a component. However, if the type argument is an interface the implementations _are not registered_ automatically."
msgstr "`@Inject Instance<T>` y `@Inject @All List<T>` los puntos de inyección se gestionan de forma específica. El argumento de tipo real se registra como un componente. Sin embargo, si el argumento de tipo es una interfaz _,_ las implementaciones _no se registran_ automáticamente."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Additional component classes can be set using `@QuarkusComponentTest#value()` or `QuarkusComponentTestExtensionBuilder#addComponentClasses()`."
msgstr "Se pueden establecer clases de componentes adicionales utilizando `@QuarkusComponentTest#value()` o `QuarkusComponentTestExtensionBuilder#addComponentClasses()` ."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Auto Mocking Unsatisfied Dependencies"
msgstr "Simulación automática de dependencias no satisfechas"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"Unlike in regular CDI environments the test does not fail if a component injects an unsatisfied dependency.\n"
"Instead, a synthetic bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.\n"
"The bean has the `@Singleton` scope so it's shared across all injection points with the same required type and qualifiers.\n"
"The injected reference is an _unconfigured_ Mockito mock.\n"
"You can inject the mock in your test using the `io.quarkus.test.InjectMock` annotation and leverage the Mockito API to configure the behavior."
msgstr "A diferencia de los entornos CDI normales, la prueba no falla si un componente inyecta una dependencia no satisfecha. En su lugar, se registra automáticamente un bean sintético para cada combinación de tipo requerido y calificadores de un punto de inyección que resuelva una dependencia no satisfecha. El bean tiene el ámbito `@Singleton` , por lo que se comparte en todos los puntos de inyección con el mismo tipo requerido y los mismos calificadores. La referencia inyectada es un simulacro de Mockito _no configurado_ . Puede inyectar el mock en su prueba utilizando la anotación `io.quarkus.test.InjectMock` y aprovechar la API de Mockito para configurar el comportamiento."

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"`@InjectMock` is not intended as a universal replacement for functionality provided by the Mockito JUnit extension.\n"
"It's meant to be used for configuration of unsatisfied dependencies of CDI beans.\n"
"You can use the `QuarkusComponentTest` and `MockitoExtension` side by side."
msgstr "`@InjectMock` no pretende ser un sustituto universal de la funcionalidad proporcionada por la extensión JUnit de Mockito. Está pensada para ser utilizada en la configuración de dependencias no satisfechas de beans CDI. Puede utilizar `QuarkusComponentTest` y `MockitoExtension` uno al lado del otro."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Custom Mocks For Unsatisfied Dependencies"
msgstr "Mocks personalizados para dependencias no satisfechas"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"Sometimes you need the full control over the bean attributes and maybe even configure the default mock behavior.\n"
"You can use the mock configurator API via the `QuarkusComponentTestExtensionBuilder#mock()` method."
msgstr "A veces necesita el control total sobre los atributos del bean y quizás incluso configurar el comportamiento del mock por defecto. Puede utilizar la API del configurador de simulacros a través del método `QuarkusComponentTestExtensionBuilder#mock()` ."

#: _guides/testing-components.adoc
msgid "Configuration"
msgstr "Configuración"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"You can set the configuration properties for a test with the `@io.quarkus.test.component.TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method.\n"
"If you only need to use the default values for missing config properties, then the `@QuarkusComponentTest#useDefaultConfigProperties()` or `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` might come in useful."
msgstr "Puede establecer las propiedades de configuración de una prueba con la anotación `@io.quarkus.test.component.TestConfigProperty` o con el método `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` . Si sólo necesita utilizar los valores predeterminados para las propiedades de configuración que faltan, entonces los métodos `@QuarkusComponentTest#useDefaultConfigProperties()` o `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` pueden resultarle útiles."

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"It is also possible to set configuration properties for a test method with the `@io.quarkus.test.component.TestConfigProperty` annotation.\n"
"However, if the test instance lifecycle is `Lifecycle#_PER_CLASS` this annotation can only be used on the test class and is ignored on test methods."
msgstr "También es posible establecer propiedades de configuración para un método de prueba con la anotación `@io.quarkus.test.component.TestConfigProperty` . Sin embargo, si el ciclo de vida de la instancia de prueba es `Lifecycle#_PER_CLASS` , esta anotación sólo puede utilizarse en la clase de prueba y se ignora en los métodos de prueba."

#: _guides/testing-components.adoc
#, fuzzy
msgid "CDI beans are also automatically registered for all injected https://smallrye.io/smallrye-config/Main/config/mappings/[Config Mappings]. The mappings are populated with the test configuration properties."
msgstr "Los beans CDI también se registran automáticamente para todos los  link:https://smallrye.io/smallrye-config/Main/config/mappings/[Config Mappings] inyectados. Los mapeos se rellenan con las propiedades de configuración de prueba."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Mocking CDI Interceptors"
msgstr "Burlarse de los interceptores CDI"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"If a tested component class declares an interceptor binding then you might need to mock the interception too.\n"
"There are two ways to accomplish this task.\n"
"First, you can define an interceptor class as a static nested class of the test class."
msgstr "Si una clase componente probada declara un enlace interceptor, puede que necesite burlarse también de la intercepción. Hay dos formas de llevar a cabo esta tarea. En primer lugar, puede definir una clase interceptora como una clase estática anidada de la clase de prueba."

#: _guides/testing-components.adoc
#, fuzzy
msgid "`@SimpleBinding` is an interceptor binding."
msgstr "`@SimpleBinding` es un enlace interceptor."

#: _guides/testing-components.adoc
#, fuzzy
msgid "The interceptor class is automatically considered a tested component."
msgstr "La clase interceptora se considera automáticamente un componente probado."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Static nested classes declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr "Las clases estáticas anidadas declaradas en una clase de prueba que esté anotada con `@QuarkusComponentTest` se excluyen del descubrimiento de alubias cuando se ejecuta un `@QuarkusTest` para evitar conflictos CDI involuntarios."

#: _guides/testing-components.adoc
#, fuzzy
msgid "The second option is to declare an interceptor method directly in the test class; the method is then invoked in the relevant interception phase."
msgstr "La segunda opción consiste en declarar un método interceptor directamente en la clase de prueba; a continuación, el método se invoca en la fase de interceptación correspondiente."

#: _guides/testing-components.adoc
#, fuzzy
msgid "The interceptor bindings of the resulting interceptor are specified by annotating the method with the interceptor binding types."
msgstr "Las vinculaciones del interceptor resultante se especifican anotando el método con los tipos de vinculación del interceptor."

#: _guides/testing-components.adoc
#, fuzzy
msgid "Defines the interception type."
msgstr "Define el tipo de interceptación."
