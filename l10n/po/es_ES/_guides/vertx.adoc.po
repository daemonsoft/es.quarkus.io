# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-10 08:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Using Eclipse Vert.x API from a Quarkus Application"
msgstr "Uso de la API de Eclipse Vert.x desde una aplicación de Quarkus"

#: _guides/vertx.adoc
msgid ""
"https://vertx.io[Vert.x] is a toolkit for building reactive applications.\n"
"As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr ""

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "Quarkus applications can access and use the Vert.x APIs."
msgstr "Las aplicaciones de Quarkus pueden acceder y utilizar las API de Vert.x."

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "This guide presents how you can build a Quarkus application using:"
msgstr "Esta guía presenta cómo se puede construir una aplicación Quarkus utilizando:"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "the managed instance of Vert.x"
msgstr "la instancia gestionada de Vert.x"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "the Vert.x event bus"
msgstr "el bus de eventos Vert.x"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "the Vert.x Web Client"
msgstr "el cliente web Vert.x"

#: _guides/vertx.adoc
msgid ""
"It's an introductory guide.\n"
"The xref:vertx-reference.adoc[Vert.x reference guide] covers more advanced features such as verticles, and native transports."
msgstr ""

#. type: Title ==
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "Arquitectura"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "We are going to build a simple application exposing four HTTP endpoints:"
msgstr "Vamos a construir una aplicación sencilla que exponga cuatro endpoints HTTP:"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "`/vertx/lorem` returns the content from a small file"
msgstr "`/vertx/lorem` devuelve el contenido de un pequeño archivo"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "`/vertx/book` returns the content from a large file (a book)"
msgstr "`/vertx/book` devuelve el contenido de un archivo grande (un libro)"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "`/vertx/hello` uses the Vert.x event bus to produce the response"
msgstr "`/vertx/hello` utiliza el bus de eventos de Vert.x para producir la respuesta"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "`/vertx/web` uses the Vert.x Web Client to retrieve data from Wikipedia"
msgstr "`/vertx/web` utiliza el cliente web Vert.x para recuperar datos de Wikipedia"

#. type: Title ==
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solución"

#: _guides/vertx.adoc
msgid ""
"We recommend that you follow the instructions in the following sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clone el repositorio Git: `git clone {quickstarts-clone-url}` o descargue un {quickstarts-archive-url}[archivo]."

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "The solution is located in the `vertx-quickstart` link:{quickstarts-tree-url}/vertx-quickstart[directory]."
msgstr "La solución se encuentra en el `vertx-quickstart` {quickstarts-tree-url}/vertx-quickstart[directorio]."

#. type: Block title
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "Motín"

#: _guides/vertx.adoc
msgid ""
"This guide uses the Mutiny API.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive, reactive programming library]."
msgstr ""

#. type: Title ==
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Bootstrapping the application"
msgstr "Arranque de la aplicación"

#: _guides/vertx.adoc
msgid ""
"Click on https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=resteasy-reactive-jackson&e=vertx[this link] to configure your application.\n"
"It selected a few extensions:"
msgstr ""

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "`resteasy-reactive-jackson`, which also brings `resteasy-reactive`. We are going to use it to expose our HTTP endpoints."
msgstr "`resteasy-reactive-jackson`, que también trae `resteasy-reactive`. Vamos a utilizarlo para exponer nuestros puntos finales HTTP."

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "`vertx`, which provides access to the underlying managed Vert.x"
msgstr "`vertx`que proporciona acceso al Vert gestionado subyacente.x"

#: _guides/vertx.adoc
msgid ""
"Click on the `Generate your application` button, download the zip file and unzip it.\n"
"Then, open the project in your favorite IDE."
msgstr ""

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "If you open the generated build file, you can see the selected extensions:"
msgstr "Si abre el archivo de construcción generado, podrá ver las extensiones seleccionadas:"

#. type: Block title
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "While you are in your build file, add the following dependency:"
msgstr "Mientras está en su archivo de construcción, añada la siguiente dependencia:"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "This dependency provides the Vert.x Web Client, which we will be using to implement the `/web` endpoint."
msgstr "Esta dependencia proporciona el cliente web Vert.x, que utilizaremos para implementar el punto final `/web`."

#. type: Title ==
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Accessing the managed Vert.x instance"
msgstr "Acceso a la instancia gestionada de Vert.x"

#: _guides/vertx.adoc
msgid ""
"Create the `src/main/java/org/acme/VertxResource.java` file.\n"
"It will contain our HTTP endpoints."
msgstr ""

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "In this file, copy the following code:"
msgstr "En este archivo, copie el siguiente código:"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "Declare the root HTTP path."
msgstr "Declara la ruta HTTP raíz."

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "We use constructor injection to receive the managed Vert.x instance. Field injection works too."
msgstr "Utilizamos la inyección del constructor para recibir la instancia gestionada de Vert.x. La inyección de campos también funciona."

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "Receives the Vert.x instance as a constructor parameter"
msgstr "Recibe la instancia de Vert.x como parámetro del constructor"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "Store the managed Vert.x instance into a field."
msgstr "Almacena la instancia gestionada de Vert.x en un campo."

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "With this, we can start implementing the endpoints."
msgstr "Con esto, podemos empezar a implementar los puntos finales."

#. type: Title ==
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Using Vert.x Core API"
msgstr "Uso de la API central de Vert.x"

#: _guides/vertx.adoc
msgid ""
"The injected Vert.x instance provides a set of APIs you can use.\n"
"The one we are going to use in this section is the Vert.x File System.\n"
"It provides a non-blocking API to access files."
msgstr ""

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "In the `src/main/resource` directory, create a `lorem.txt` file with the following content:"
msgstr "En el directorio `src/main/resource`, cree un archivo `lorem.txt` con el siguiente contenido:"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "Then, in the `VertxResource` file add the following method:"
msgstr "A continuación, en el archivo `VertxResource` añada el siguiente método:"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "This endpoint handles HTTP `GET` request on path `/lorem` (so the full path will be `vertx/lorem`)"
msgstr "Este endpoint gestiona la petición HTTP `GET` en la ruta `/lorem` (por lo que la ruta completa será `vertx/lorem`)"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "As the Vert.x API is asynchronous, our method returns a `Uni`. The content is written into the HTTP response when the asynchronous operation represented by the Uni completes."
msgstr "Como la API de Vert.x es asíncrona, nuestro método devuelve un `Uni`. El contenido se escribe en la respuesta HTTP cuando se completa la operación asíncrona representada por la Uni."

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "We use the Vert.x file system API to read the created file"
msgstr "Utilizamos la API del sistema de archivos Vert.x para leer el archivo creado"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "Once the file is read, the content is stored in an in-memory buffer.  We transform this buffer into a String."
msgstr "Una vez leído el archivo, el contenido se almacena en un buffer en memoria. Transformamos este búfer en un String."

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "In a terminal, navigate to the root of the project and run:"
msgstr "En un terminal, navegue hasta la raíz del proyecto y ejecute:"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "In another terminal, run:"
msgstr "En otra terminal, ejecute:"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "You should see the content of the file printed in the console."
msgstr "Debería ver el contenido del archivo impreso en la consola."

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "Quarkus provides other ways to serve static files. This is an example made for the guide."
msgstr "Quarkus proporciona otras formas de servir archivos estáticos. Este es un ejemplo hecho para la guía."

#. type: Title ==
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Using Vert.x stream capability"
msgstr "Uso de la capacidad de flujo de Vert.x"

#: _guides/vertx.adoc
msgid ""
"Reading a file and storing the content in memory works for small files, but not big ones.\n"
"In this section, we will see how you can use Vert.x streaming capability."
msgstr ""

#: _guides/vertx.adoc
msgid ""
"First, download https://www.gutenberg.org/files/2600/2600-0.txt[War and Peace] and store it in `src/main/resources/book.txt`.\n"
"It's a 3.2 Mb file, which, while not being huge, illustrates the purpose of streams.\n"
"This time, we will not accumulate the file's content in memory and write it in one batch, but read it chunk by chunk and write these chunks into the HTTP response one by one."
msgstr ""

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "So, you should have the following files in your project:"
msgstr "Por lo tanto, debe tener los siguientes archivos en su proyecto:"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "Add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr "Añade el siguiente método a la clase `VertxResource`:"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "Add the following method to the `VertxResource` class:"
msgstr "Añade el siguiente método a la clase `VertxResource`:"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "This time, we return a Multi as we want to stream the chunks"
msgstr "Esta vez, devolvemos un Multi ya que queremos transmitir los trozos"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "We open the file using the `open` method. It returns a `Uni<AsyncFile>`"
msgstr "Abrimos el archivo con el método `open`. Éste devuelve un `Uni&amp;lt;AsyncFile&amp;gt;`"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "When the file is opened, we retrieve a `Multi` which will contain the chunks."
msgstr "Cuando se abre el archivo, recuperamos un `Multi` que contendrá los chunks."

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "For each chunk, we produce a String"
msgstr "Para cada trozo, producimos una cadena"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "To visually see the chunks in the response, we append a separator"
msgstr "Para ver los trozos en la respuesta, añadimos un separador"

#. type: Plain text
#: _guides/vertx.adoc
#, fuzzy
msgid "Then, in a terminal, run:"
msgstr "Luego, en un terminal, ejecute:"

#: _guides/vertx.adoc
msgid ""
"It should retrieve the book content.\n"
"In the output you should see the separator like:"
msgstr ""

#. type: Title ==
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Using the event bus"
msgstr "Uso del bus de eventos"

#: _guides/vertx.adoc
msgid ""
"One of the core features of Vert.x is the https://vertx.io/docs/vertx-core/java/#event_bus[event bus].\n"
"It provides a message-based backbone to your application.\n"
"So, you can have components interacting using asynchronous message passing, and so decouple your components.\n"
"You can send a message to a single consumer, or dispatch to multiple consumers, or implement a request-reply interaction, where you send a message (request) and expect a response.\n"
"This is what we are going to use in this section.\n"
"Our `VertxResource` will send a message containing a name to the `greetings` address.\n"
"Another component will receive the message and produce the \"hello $name\" response.\n"
"The `VertxResource` will receive the response and return it as the HTTP response."
msgstr ""

#. type: delimited block -
#: _guides/vertx.adoc
#, fuzzy
msgid "So, first, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr "Añade el siguiente método a la clase `VertxResource`:"

#: _guides/vertx.adoc
msgid "Next, let's extend our `VertxResource` class with the following code:"
msgstr ""

#: _guides/vertx.adoc
msgid "Inject the event bus. Alternatively you can use `vertx.eventBus()`."
msgstr ""

#: _guides/vertx.adoc
msgid "We receive a _name_ as a query parameter"
msgstr ""

#: _guides/vertx.adoc
msgid "We use the `request` method to initiate the request-reply interaction. We send the name to the \"greetings\" address."
msgstr ""

#: _guides/vertx.adoc
msgid "When the response is received, we extract the body and return it as the HTTP response"
msgstr ""

#: _guides/vertx.adoc
msgid ""
"Now, we need the other side: the component receiving the name and replying.\n"
"Create the `src/main/java/org/acme/GreetingService.java` file with the following content:"
msgstr ""

#: _guides/vertx.adoc
msgid "Declaring a CDI Bean in the Application scope. Quarkus will create a single instance of this class."
msgstr ""

#: _guides/vertx.adoc
msgid "Use the `@ConsumeEvent` annotation to declare a consumer. It is possible to use the Vert.x API https://vertx.io/docs/vertx-core/java/#_acknowledging_messages_sending_replies[directly] too."
msgstr ""

#: _guides/vertx.adoc
msgid "Receive the message payload as a method parameter. The returned object will be the reply."
msgstr ""

#: _guides/vertx.adoc
msgid "Return the response. This response is sent back to the `VertxResource` class"
msgstr ""

#: _guides/vertx.adoc
msgid ""
"Let's try this.\n"
"In a terminal, run:"
msgstr ""

#: _guides/vertx.adoc
msgid "You should get the expected `Hello bob` message back."
msgstr ""

#. type: Title ==
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Using Vert.x Clients"
msgstr "Uso de clientes Vert.x"

#: _guides/vertx.adoc
msgid ""
"So far, we have used the Vert.x Core API.\n"
"Vert.x offers much more.\n"
"It provides a vast ecosystem.\n"
"In this section, we will see how you can use the Vert.x Web Client, a reactive HTTP client."
msgstr ""

#: _guides/vertx.adoc
msgid ""
"Note that some Quarkus extensions are wrapping Vert.x clients and manage them for you.\n"
"That's the case for the reactive data sources, Redis, mail...\n"
"That's not the case with the Web Client."
msgstr ""

#: _guides/vertx.adoc
msgid ""
"Remember, at the beginning of the guide,  we added the `smallrye-mutiny-vertx-web-client` dependency to our `pom.xml` file.\n"
"It's now time to use it."
msgstr ""

#. type: delimited block -
#: _guides/vertx.adoc
#, fuzzy
msgid "First, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr "Añade el siguiente método a la clase `VertxResource`:"

#: _guides/vertx.adoc
msgid ""
"Next, we need to create an instance of `WebClient`.\n"
"Extend the `VertxResource` class with the `client` field and the creation of the web client in the constructor:"
msgstr ""

#: _guides/vertx.adoc
msgid "Store the `WebClient`, so we will be able to use it in our HTTP endpoint"
msgstr ""

#: _guides/vertx.adoc
msgid "Create the `WebClient`. Be sure to use the `io.vertx.mutiny.ext.web.client.WebClient` class"
msgstr ""

#: _guides/vertx.adoc
msgid ""
"Let's now implement a new HTTP endpoint that queries the Wikipedia API to retrieve the pages about Quarkus in the different languages.\n"
"Add the following method to the `VertxResource` class:"
msgstr ""

#: _guides/vertx.adoc
msgid "This endpoint returns a JSON Array. Vert.x provides a convenient way to manipulate JSON Object and Array. More details about these in xref:vertx-reference.adoc#using-vert-x-json[the reference guide]."
msgstr ""

#: _guides/vertx.adoc
msgid "Send a `GET` request to the Wikipedia API"
msgstr ""

#: _guides/vertx.adoc
msgid "Once the response is received, extract it as a JSON Object"
msgstr ""

#: _guides/vertx.adoc
msgid "Extract the `langlinks` array from the response."
msgstr ""

#: _guides/vertx.adoc
msgid "Then, invoke the endpoint using:"
msgstr ""

#: _guides/vertx.adoc
msgid "The response indicates that, in addition to the English page, there are a German and a French page about Quarkus on wikipedia."
msgstr ""

#. type: Title ==
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Executing Asynchronous Code From a Blocking Thread"
msgstr "Ejecución de Código Asíncrono desde un Hilo Bloqueante"

#: _guides/vertx.adoc
msgid ""
"Sometimes it's necessary to execute an asynchronous code from a blocking thread.\n"
"Specifically, to execute the code on a Vert.x thread with an isolated/duplicated Vert.x context.\n"
"A typical example is an asynchronous code that needs to leverage the Hibernate Reactive API during application startup.\n"
"Quarkus provides the `VertxContextSupport#subscribeAndAwait()` method which subscribes to the supplied `io.smallrye.mutiny.Uni` on a Vert.x duplicated context, then blocks the current thread and waits for the result."
msgstr ""

#: _guides/vertx.adoc
msgid "If necessary, the CDI request context is activated during execution of the asynchronous code."
msgstr ""

#: _guides/vertx.adoc
msgid "`VertxContextSupport#subscribeAndAwait()` must not be called on an event loop!"
msgstr ""

#: _guides/vertx.adoc
msgid ""
"It is also possible to subscribe to a supplied `io.smallrye.mutiny.Multi` on a Vert.x duplicated context.\n"
"In this case, the current thread is not blocked and the supplied subscription logic is used to consume the events."
msgstr ""

#. type: Title ==
#: _guides/vertx.adoc
#, fuzzy, no-wrap
msgid "Going further"
msgstr "Ir más allá"

#: _guides/vertx.adoc
msgid ""
"This guide introduced how you can use Vert.x APIs from a Quarkus application.\n"
"It's just a brief overview.\n"
"If you want to know more, check the xref:vertx-reference.adoc[reference guide about Vert.x in Quarkus]."
msgstr ""

#: _guides/vertx.adoc
msgid ""
"As we have seen, the event bus is the connecting tissue of Vert.x applications.\n"
"Quarkus integrates it so different beans can interact with asynchronous messages.\n"
"This part is covered in the xref:reactive-event-bus.adoc[event bus documentation]."
msgstr ""

#. type: delimited block -
#: _guides/vertx.adoc
msgid "Learn how to implement highly performant, low-overhead database applications on Quarkus with the xref:reactive-sql-clients.adoc[Reactive SQL Clients]."
msgstr ""
