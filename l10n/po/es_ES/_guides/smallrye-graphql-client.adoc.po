# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/smallrye-graphql-client.adoc:6
#, fuzzy, no-wrap
msgid "SmallRye GraphQL Client"
msgstr "Cliente SmallRye GraphQL"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:18
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can use the GraphQL client library.  The client is implemented by the https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL] project.  This guide is specifically geared towards the client side, so if you need an introduction to GraphQL in general, first refer to the xref:smallrye-graphql.adoc[SmallRye GraphQL guide], which provides an introduction to the GraphQL query language, general concepts and server-side development."
msgstr "Esta guía demuestra cómo su aplicación Quarkus puede utilizar la biblioteca del cliente GraphQL. El cliente es implementado por el proyecto SmallRye  link:https://github.com/smallrye/smallrye-graphql/[GraphQL]. Esta guía está orientada específicamente al lado del cliente, por lo que si necesitas una introducción a GraphQL en general, primero consulta la  link:smallrye-graphql.html[guía de SmallRye GraphQL], que proporciona una introducción al lenguaje de consulta GraphQL, los conceptos generales y el desarrollo del lado del servidor."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:23
#, fuzzy
msgid "The guide will walk you through developing and running a simple application that uses both supported types of GraphQL clients to retrieve data from a remote resource, that being a database related to Star Wars.  It's available at https://graphql.org/swapi-graphql[this webpage] if you want to experiment with it manually.  The web UI allows you to write and execute GraphQL queries against it."
msgstr "La guía te guiará a través del desarrollo y ejecución de una sencilla aplicación que utiliza los dos tipos de clientes GraphQL soportados para recuperar datos de un recurso remoto, que es una base de datos relacionada con Star Wars. Está disponible en  link:https://graphql.org/swapi-graphql[esta página] web si quieres experimentar con ella manualmente. La interfaz web te permite escribir y ejecutar consultas GraphQL contra ella."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:24
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Requisitos previos"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:28
#, fuzzy, no-wrap
msgid "GraphQL client types introduction"
msgstr "Introducción a los tipos de cliente GraphQL"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:31
#, fuzzy
msgid "Two types of GraphQL clients are supported."
msgstr "Se admiten dos tipos de clientes GraphQL."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:37
#, fuzzy
msgid "The *typesafe* client works very much like the MicroProfile REST Client adjusted for calling GraphQL endpoints.  A client instance is basically a proxy that you can call like a regular Java object, but under the hood, the call will be translated to a GraphQL operation. It works with domain classes directly.  Any input and output objects for the operation will be translated to/from their representations in the GraphQL query language."
msgstr "El cliente *typesafe* funciona de forma muy parecida al cliente REST de MicroProfile ajustado para llamar a los puntos finales de GraphQL. Una instancia de cliente es básicamente un proxy que puede llamar como un objeto Java normal, pero bajo el capó, la llamada se traducirá a una operación GraphQL. Funciona con las clases de dominio directamente. Cualquier objeto de entrada y salida para la operación será traducido a/desde sus representaciones en el lenguaje de consulta GraphQL."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:43
#, fuzzy
msgid "The *dynamic* client, on the other hand, works rather like an equivalent of the Jakarta REST client from the `jakarta.ws.rs.client` package. It does not require the domain classes to work, it works with abstract representations of GraphQL documents instead. Documents are built using a domain-specific language (DSL).  The exchanged objects are treated as an abstract `JsonObject`, but, when necessary, it is possible to convert them to concrete model objects (if suitable model classes are available)."
msgstr "El cliente *dinámico*, por otro lado, funciona más bien como un equivalente del cliente JAX-RS del paquete `javax.ws.rs.client`. No requiere las clases de dominio para funcionar, en su lugar trabaja con representaciones abstractas de documentos GraphQL. Los documentos se construyen utilizando un lenguaje específico del dominio (DSL). Los objetos intercambiados se tratan como un abstracto `JsonObject`, pero, cuando es necesario, es posible convertirlos en objetos modelo concretos (si se dispone de clases modelo adecuadas)."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:47
#, fuzzy
msgid "The typesafe client can be viewed as a rather high-level and more declarative approach designed for ease of use, whereas the dynamic client is lower-level, more imperative, somewhat more verbose to use, but allows finer grained control over operations and responses."
msgstr "El cliente de tipo seguro puede ser visto como un enfoque de alto nivel y más declarativo diseñado para facilitar su uso, mientras que el cliente dinámico es de menor nivel, más imperativo, algo más verboso de usar, pero permite un control más fino sobre las operaciones y las respuestas."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:48
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solución"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:52
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Le recomendamos que siga las instrucciones de las siguientes secciones y cree la aplicación paso a paso. Sin embargo, puede ir directamente al ejemplo completado."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:54
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clone el repositorio Git: `git clone {quickstarts-clone-url}` o descargue un {quickstarts-archive-url}[archivo]."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:56
#, fuzzy
msgid "The solution is located in the `microprofile-graphql-client-quickstart` link:{quickstarts-tree-url}/microprofile-graphql-client-quickstart[directory]."
msgstr "La solución se encuentra en el `microprofile-graphql-client-quickstart` {quickstarts-tree-url}/microprofile-graphql-client-quickstart[directorio]."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:57
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "Creación del proyecto Maven"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:60
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "En primer lugar, necesitamos un nuevo proyecto. Cree un nuevo proyecto con el siguiente comando:"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:68
#, fuzzy
msgid "This command generates a project, importing the `smallrye-graphql-client` extension, and also the `resteasy-reactive` extension, because we will use that too - a REST endpoint will be the entrypoint to allow you to manually trigger the GraphQL client to do its work."
msgstr "Este comando genera un proyecto, importando la extensión `smallrye-graphql-client`, y también la extensión `resteasy-reactive`, porque la usaremos también - un punto final REST será el punto de entrada para permitirte activar manualmente el cliente GraphQL para que haga su trabajo."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:71
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `smallrye-graphql-client` extension to your project by running the following command in your project base directory:"
msgstr "Si ya tienes configurado tu proyecto Quarkus, puedes añadir la extensión `smallrye-graphql-client` a tu proyecto ejecutando el siguiente comando en el directorio base de tu proyecto:"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:76
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "Esto añadirá lo siguiente a su archivo de construcción:"

#. type: Block title
#: upstream/_guides/smallrye-graphql-client.adoc:78
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:84
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-graphql-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/smallrye-graphql-client.adoc:87
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:90
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-graphql-client\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:92
#, fuzzy, no-wrap
msgid "The application"
msgstr "La aplicación"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:98
#, fuzzy
msgid "The application we will build makes use of both types of GraphQL clients. In both cases, they will connect to the Star Wars service at https://graphql.org/swapi-graphql[SWAPI] and query it for a list of Star Wars films, and, for each film, the names of the planets which appear in that film."
msgstr "La aplicación que construiremos hace uso de ambos tipos de clientes GraphQL. En ambos casos, se conectarán al servicio de Star Wars en  link:https://graphql.org/swapi-graphql[SWAPI] y lo consultarán para obtener una lista de películas de Star Wars y, para cada película, los nombres de los planetas que aparecen en ella."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:100
#, fuzzy
msgid "The corresponding GraphQL query looks like this:"
msgstr "La consulta GraphQL correspondiente tiene el siguiente aspecto:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:115
#, no-wrap
msgid ""
"{\n"
"  allFilms {\n"
"    films {\n"
"      title\n"
"      planetConnection {\n"
"        planets {\n"
"          name\n"
"        }\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:118
#, fuzzy
msgid "You may go to https://graphql.org/swapi-graphql[the webpage] to execute this query manually."
msgstr "Puede ir a  link:https://graphql.org/swapi-graphql[la página web] para ejecutar esta consulta manualmente."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:119
#, fuzzy, no-wrap
msgid "Using the Typesafe client"
msgstr "Uso del cliente Typesafe"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:126
#, fuzzy
msgid "To use the typesafe client, we need the corresponding model classes that are compatible with the schema. There are two ways to obtain them. First is to use the client generator offered by SmallRye GraphQL, which generates classes from the schema document and a list of queries. This generator is considered highly experimental for now, and is not covered in this example. If interested, refer to the https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[Client Generator] and its documentation."
msgstr "Para utilizar el cliente typesafe, necesitamos las correspondientes clases de modelo compatibles con el esquema. Hay dos formas de obtenerlas. La primera es utilizar el generador de clientes que ofrece SmallRye GraphQL, que genera las clases a partir del documento del esquema y una lista de consultas. Este generador se considera altamente experimental por ahora, y no está cubierto en este ejemplo. Si está interesado, consulte el generador de  link:https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[clientes] y su documentación."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:131
#, fuzzy
msgid "In this example, we will create a slimmed down version of the model classes manually, with only the fields that we need, and ignore all the stuff that we don't need. We will need the classes for `Film` and `Planet`.  But, the service is also using specific wrappers named `FilmConnection` and `PlanetConnection`, which, for our purpose, will serve just to contain the actual list of `Film` and `Planet` instances, respectively."
msgstr "En este ejemplo, crearemos una versión reducida de las clases del modelo manualmente, con sólo los campos que necesitamos, e ignoraremos todo lo que no necesitamos. Necesitaremos las clases para `Film` y `Planet`. Pero, el servicio también utiliza envoltorios específicos llamados `FilmConnection` y `PlanetConnection`, que, para nuestro propósito, servirán sólo para contener la lista real de instancias de `Film` y `Planet`, respectivamente."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:133
#, fuzzy
msgid "Let's create all the model classes and put them into the `org.acme.microprofile.graphql.client.model` package:"
msgstr "Vamos a crear todas las clases del modelo y ponerlas en el paquete `org.acme.microprofile.graphql.client.model`:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:137
#, no-wrap
msgid "public class FilmConnection {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:139
#, no-wrap
msgid "    private List<Film> films;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:143
#, no-wrap
msgid ""
"    public List<Film> getFilms() {\n"
"        return films;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:148
#, no-wrap
msgid ""
"    public void setFilms(List<Film> films) {\n"
"        this.films = films;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:150
#, no-wrap
msgid "public class Film {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:152
#, no-wrap
msgid "    private String title;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:154
#, no-wrap
msgid "    private PlanetConnection planetConnection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:158
#, no-wrap
msgid ""
"    public String getTitle() {\n"
"        return title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:162
#, no-wrap
msgid ""
"    public void setTitle(String title) {\n"
"        this.title = title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:166
#, no-wrap
msgid ""
"    public PlanetConnection getPlanetConnection() {\n"
"        return planetConnection;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:171
#, no-wrap
msgid ""
"    public void setPlanetConnection(PlanetConnection planetConnection) {\n"
"        this.planetConnection = planetConnection;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:173
#, no-wrap
msgid "public class PlanetConnection {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:175
#, no-wrap
msgid "    private List<Planet> planets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:179
#, no-wrap
msgid ""
"    public List<Planet> getPlanets() {\n"
"        return planets;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:183
#, no-wrap
msgid ""
"    public void setPlanets(List<Planet> planets) {\n"
"        this.planets = planets;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:185
#: upstream/_guides/smallrye-graphql-client.adoc:210
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:187
#, no-wrap
msgid "public class Planet {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:189
#, no-wrap
msgid "    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:193
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:198
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:202
#, fuzzy
msgid "Now that we have the model classes, we can create the interface that represents the actual set of operations we want to call on the remote GraphQL service."
msgstr "Ahora que tenemos las clases del modelo, podemos crear la interfaz que representa el conjunto real de operaciones que queremos llamar en el servicio remoto GraphQL."

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:206
#, no-wrap
msgid ""
"@GraphQLClientApi(configKey = \"star-wars-typesafe\")\n"
"public interface StarWarsClientApi {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:208
#, no-wrap
msgid "    FilmConnection allFilms();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:216
#, fuzzy
msgid "For simplicity, we're only calling the query named `allFilms`. We named our corresponding method `allFilms` too. If we named the method differently, we would need to annotate it with `@Query(value=\"allFilms\")` to specify the name of the query that should be executed when this method is called."
msgstr "Para simplificar, sólo llamamos a la consulta denominada `allFilms`. También hemos llamado a nuestro método correspondiente `allFilms`. Si nombráramos el método de otra manera, tendríamos que anotarlo con `@Query(value=\"allFilms\")` para especificar el nombre de la consulta que debe ejecutarse cuando se llama a este método."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:220
#, fuzzy
msgid "The client also needs some configuration, namely at least the URL of the remote service. We can either specify that within the `@GraphQLClientApi` annotation (by setting the `endpoint` parameter), or move this over to the configuration file, `application.properties`:"
msgstr "El cliente también necesita alguna configuración, en concreto, al menos la URL del servicio remoto. Podemos especificar esto dentro de la anotación `@GraphQLClientApi` (estableciendo el parámetro `endpoint` ), o trasladar esto al archivo de configuración, `application.properties`:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:223
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-typesafe.url=https://swapi-graphql.netlify.app/.netlify/functions/index\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:229
#, fuzzy
msgid "During *tests only*, the URL is an optional property, and if it's not specified, Quarkus will assume that the target of the client is the application that is being tested (typically, `http://localhost:8081/graphql`).  This is useful if your application contains a GraphQL server-side API as well as a GraphQL client that is used for testing the API."
msgstr "*Sólo* durante las *pruebas*, la URL es una propiedad opcional, y si no se especifica, Quarkus asumirá que el objetivo del cliente es la aplicación que se está probando (normalmente, `&lt;a href=\"http://localhost:8081/graphql\" class=\"bare\"&gt;http://localhost:8081/graphql&lt;/a&gt;`). Esto es útil si su aplicación contiene una API del lado del servidor GraphQL así como un cliente GraphQL que se utiliza para probar la API."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:233
#, fuzzy
msgid "`star-wars-typesafe` is the name of the configured client instance, and corresponds to the `configKey` in the `@GraphQLClientApi` annotation. If you don't want to specify a custom name, you can leave out the `configKey`, and then refer to it by using the fully qualified name of the interface."
msgstr "`star-wars-typesafe` es el nombre de la instancia de cliente configurada, y corresponde a `configKey` en la anotación `@GraphQLClientApi`. Si no quieres especificar un nombre personalizado, puedes omitir el `configKey`, y luego referirte a él utilizando el nombre completo de la interfaz."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:237
#, fuzzy
msgid "Now that we have the client instance properly configured, we need a way to have it perform something when we start the application. For that, we will use a REST endpoint that, when called by a user, obtains the client instance and lets it execute the query."
msgstr "Ahora que tenemos la instancia del cliente correctamente configurada, necesitamos una forma de hacer que realice algo cuando iniciemos la aplicación. Para ello, utilizaremos un endpoint REST que, al ser llamado por un usuario, obtenga la instancia del cliente y le permita ejecutar la consulta."

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:244
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"public class StarWarsResource {\n"
"    @Inject\n"
"    StarWarsClientApi typesafeClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:253
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/typesafe\")\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Blocking\n"
"    public List<Film> getAllFilmsUsingTypesafeClient() {\n"
"        return typesafeClient.allFilms().getFilms();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:258
#, fuzzy
msgid "With this REST endpoint included in your application, you can simply send a GET request to `/typesafe`, and the application will use an injected typesafe client instance to call the remote service, obtain the films and planets, and return the JSON representation of the resulting list."
msgstr "Con este punto final REST incluido en su aplicación, puede simplemente enviar una solicitud GET a `/typesafe`, y la aplicación utilizará una instancia de cliente typesafe inyectada para llamar al servicio remoto, obtener las películas y los planetas, y devolver la representación JSON de la lista resultante."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:259
#, fuzzy, no-wrap
msgid "Using the Dynamic client"
msgstr "Uso del cliente dinámico"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:263
#, fuzzy
msgid "For the dynamic client, the model classes are optional, because we can work with abstract representations of the GraphQL types and documents. The client API interface is not needed at all."
msgstr "Para el cliente dinámico, las clases del modelo son opcionales, porque podemos trabajar con representaciones abstractas de los tipos y documentos de GraphQL. La interfaz de la API del cliente no es necesaria en absoluto."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:265
#, fuzzy
msgid "We still need to configure the URL for the client, so let's put this into `application.properties`:"
msgstr "Todavía tenemos que configurar la URL para el cliente, así que vamos a poner esto en `application.properties`:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:267
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.url=https://swapi-graphql.netlify.app/.netlify/functions/index\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:271
#, fuzzy
msgid "We decided to name the client `star-wars-dynamic`. We will use this name when injecting a dynamic client to properly qualify the injection point."
msgstr "Decidimos llamar al cliente `star-wars-dynamic`. Utilizaremos este nombre cuando inyectemos un cliente dinámico para calificar adecuadamente el punto de inyección."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:274
#, fuzzy
msgid "If you need to add an authorization header, or any other custom HTTP header (in our case it's not required), this can be done by:"
msgstr "Si necesita añadir una cabecera de autorización, o cualquier otra cabecera HTTP personalizada (en nuestro caso no es necesaria), puede hacerlo:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:276
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.header.HEADER-KEY=HEADER-VALUE\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:279
#, fuzzy
msgid "Add this to the `StarWarsResource` created earlier:"
msgstr "Añade esto a la página `StarWarsResource` creada anteriormente:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:285
#, no-wrap
msgid ""
"import static io.smallrye.graphql.client.core.Document.document;\n"
"import static io.smallrye.graphql.client.core.Field.field;\n"
"import static io.smallrye.graphql.client.core.Operation.operation;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:287
#, no-wrap
msgid "// ....\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:291
#, no-wrap
msgid ""
"@Inject\n"
"@GraphQLClient(\"star-wars-dynamic\")    // <1>\n"
"DynamicGraphQLClient dynamicClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:314
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/dynamic\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Blocking\n"
"public List<Film> getAllFilmsUsingDynamicClient() throws Exception {\n"
"    Document query = document(   // <2>\n"
"        operation(\n"
"            field(\"allFilms\",\n"
"                field(\"films\",\n"
"                    field(\"title\"),\n"
"                    field(\"planetConnection\",\n"
"                        field(\"planets\",\n"
"                            field(\"name\")\n"
"                        )\n"
"                    )\n"
"                )\n"
"            )\n"
"        )\n"
"    );\n"
"    Response response = dynamicClient.executeSync(query);   <3>\n"
"    return response.getObject(FilmConnection.class, \"allFilms\").getFilms();  <4>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:317
#, fuzzy
msgid "Qualifies the injection point so that we know which named client needs to be injected here."
msgstr "Califica el punto de inyección para que sepamos qué cliente con nombre debe ser inyectado aquí."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:321
#, fuzzy
msgid "Here we build a document representing the GraphQL query, using the provided DSL language.  We use static imports to make the code easier to read. The DSL is designed in a way that it looks quite similar to writing a GraphQL query as a string."
msgstr "Aquí construimos un documento que representa la consulta GraphQL, utilizando el lenguaje DSL proporcionado. Utilizamos importaciones estáticas para facilitar la lectura del código. El DSL está diseñado de manera que se parece bastante a escribir una consulta GraphQL como una cadena."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:324
#, fuzzy
msgid "Execute the query and block while waiting for the response. There is also an asynchronous variant that returns a `Uni<Response>`."
msgstr "Ejecuta la consulta y se bloquea mientras espera la respuesta. También existe una variante asíncrona que devuelve un `Uni&amp;lt;Response&amp;gt;`."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:329
#, fuzzy
msgid "Here we did the optional step of converting the response to instances of our model classes, because we have the classes available. If you don't have the classes available or don't want to use them, simply calling `response.getData()` would get you a `JsonObject` representing all the returned data."
msgstr "Aquí hicimos el paso opcional de convertir la respuesta en instancias de nuestras clases modelo, porque tenemos las clases disponibles. Si no tienes las clases disponibles o no quieres usarlas, simplemente llamando a `response.getData()` obtendrás un `JsonObject` que representa todos los datos devueltos."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:330
#, fuzzy, no-wrap
msgid "Running the application"
msgstr "Ejecución de la aplicación"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:333
#, fuzzy
msgid "Launch the application in dev mode using:"
msgstr "Inicie la aplicación en modo dev con:"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:337
#, fuzzy
msgid "To execute the queries, you need to send GET requests to our REST endpoint:"
msgstr "Para ejecutar las consultas, es necesario enviar solicitudes GET a nuestro punto final REST:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:341
#, no-wrap
msgid ""
"curl -s http://localhost:8080/dynamic # to use the dynamic client\n"
"curl -s http://localhost:8080/typesafe # to use the typesafe client\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:346
#, fuzzy
msgid "Whether you use dynamic or typesafe, the result should be the same.  If the JSON document is hard to read, you might want to run it through a tool that formats it for better readability by humans, for example by piping the output through `jq`."
msgstr "Tanto si se utiliza el método dinámico como el de tipo seguro, el resultado debería ser el mismo. Si el documento JSON es difícil de leer, es posible que desee ejecutarlo a través de una herramienta que lo formatea para una mejor legibilidad por los seres humanos, por ejemplo, mediante la canalización de la salida a través de `jq`."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:347
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "Conclusión"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:350
#, fuzzy
msgid "This example showed how to use both the dynamic and typesafe GraphQL clients to call an external GraphQL service and explained the difference between the client types."
msgstr "Este ejemplo muestra cómo utilizar tanto los clientes GraphQL dinámicos como los de tipo seguro para llamar a un servicio GraphQL externo y explica la diferencia entre los tipos de cliente."

#, fuzzy
#~ msgid "The typesafe GraphQL client depends on REST client, thus we included the `rest-client-reactive` extension in the `extensions` list. You may also switch to the traditional non-reactive `rest-client` if the rest of your application depends on the non-reactive RESTEasy stack (you can't mix reactive and non-reactive RESTEasy).  If you're only going to use the dynamic GraphQL client and don't use RESTEasy in your application, you may leave out the REST client dependency completely.  This command generates a project, importing the `smallrye-graphql-client` extension."
#~ msgstr "El cliente GraphQL de tipo seguro depende del cliente REST, por lo que incluimos la extensión `rest-client-reactive` en la lista `extensions`. También puedes cambiar al tradicional `rest-client` no reactivo si el resto de tu aplicación depende de la pila RESTEasy no reactiva (no puedes mezclar RESTEasy reactivo y no reactivo). Si sólo vas a utilizar el cliente GraphQL dinámico y no utilizas RESTEasy en tu aplicación, puedes omitir por completo la dependencia del cliente REST. Este comando genera un proyecto, importando la extensión `smallrye-graphql-client`."

#, fuzzy
#~ msgid "Again, you may leave out `rest-client-reactive` if you're only going to use the dynamic client."
#~ msgstr "De nuevo, puedes omitir `rest-client-reactive` si sólo vas a utilizar el cliente dinámico."
