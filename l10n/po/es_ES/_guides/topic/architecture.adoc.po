# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-22 09:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_guides/topic/architecture.adoc:2
#, fuzzy, no-wrap
msgid "{project-name} - Architecture"
msgstr "{nombre del proyecto} - Arquitectura"

#. type: Plain text
#: upstream/_guides/topic/architecture.adoc:5
#, fuzzy
msgid "image::images/architecture-phases.png"
msgstr "image::images/architecture-phases.png"

#. type: Plain text
#: upstream/_guides/topic/architecture.adoc:9
#, fuzzy
msgid "{project-name} has an architecture that does as much processing as possible at build time. Annotations and other descriptors are processed as early as possible, and then {project-name} will generate bytecode based on this information. This results in lower memory usage and faster startup speeds at runtime."
msgstr "{nombre-del-proyecto} tiene una arquitectura que hace todo el procesamiento posible en tiempo de construcción. Las anotaciones y otros descriptores se procesan tan pronto como sea posible, y luego {nombre-del-proyecto} generará el código de bytes basado en esta información. Esto resulta en un menor uso de la memoria y una mayor velocidad de arranque en tiempo de ejecución."

#. type: Title ==
#: upstream/_guides/topic/architecture.adoc:10
#, fuzzy, no-wrap
msgid "Application Architecture"
msgstr "Arquitectura de la aplicación"

#. type: Plain text
#: upstream/_guides/topic/architecture.adoc:14
#, fuzzy
msgid "This means that a {project-name} based application will go through a few different distinct phases, each of which can potentially be executed in a different JVM. These phases are:"
msgstr "Esto significa que una aplicación basada en {project-name} pasará por varias fases distintas, cada una de las cuales puede ser ejecutada en una JVM diferente. Estas fases son:"

#. type: Labeled list
#: upstream/_guides/topic/architecture.adoc:15
#, fuzzy, no-wrap
msgid "Augmentation"
msgstr "Aumento"

#. type: Plain text
#: upstream/_guides/topic/architecture.adoc:22
#, fuzzy
msgid "This involves processing all the metadata that is present in the application and its libraries, such as annotations, descriptors etc, and processing this information to create bytecode that is executable at runtime. This generated bytecode will directly start the runtime services that were represented by the metadata. For example if your application contains a `@WebServlet` annotation this phase will output the bytecode required to start Undertow and register this Servlet.  The end result of this phase is a runnable application that should be equivalent to manually wiring up the runtime services you require, without any of the deployment time code present."
msgstr "Esto implica el procesamiento de todos los metadatos presentes en la aplicación y sus bibliotecas, como anotaciones, descriptores, etc., y el procesamiento de esta información para crear bytecode ejecutable en tiempo de ejecución. Este bytecode generado iniciará directamente los servicios en tiempo de ejecución que fueron representados por los metadatos. Por ejemplo, si su aplicación contiene una anotación `@WebServlet`, esta fase generará el bytecode necesario para iniciar Undertow y registrar este Servlet. El resultado final de esta fase es una aplicación ejecutable que debería ser equivalente a la conexión manual de los servicios de tiempo de ejecución que necesitas, sin ningún código de tiempo de despliegue presente."

#. type: Labeled list
#: upstream/_guides/topic/architecture.adoc:23
#, fuzzy, no-wrap
msgid "JVM Startup"
msgstr "Inicio de la JVM"

#. type: Plain text
#: upstream/_guides/topic/architecture.adoc:29
#, fuzzy
msgid "When running as a normal JVM application the bytecode generated in the augmentation phase will be executed to start the runtime services needed by the application. In production mode this will generally be in a different JVM instance, which means that none of the classes needed by the augmentation phase will be loaded at runtime, resulting in a smaller memory footprint and faster startup time. In development mode this will be the same JVM, allowing for the application to be quickly restarted when changes are made."
msgstr "Cuando se ejecuta como una aplicación JVM normal, el bytecode generado en la fase de aumento se ejecutará para iniciar los servicios de tiempo de ejecución que necesita la aplicación. En el modo de producción esto será generalmente en una instancia JVM diferente, lo que significa que ninguna de las clases necesarias para la fase de aumento se cargará en tiempo de ejecución, lo que resulta en una menor huella de memoria y un tiempo de inicio más rápido. En el modo de desarrollo esta será la misma JVM, permitiendo que la aplicación se reinicie rápidamente cuando se realicen cambios."

#. type: Labeled list
#: upstream/_guides/topic/architecture.adoc:30
#, fuzzy, no-wrap
msgid "Native Image Build"
msgstr "Creación de imágenes nativas"

#. type: Plain text
#: upstream/_guides/topic/architecture.adoc:38
#, fuzzy
msgid "When building a native image with SubstrateVM any code that is part of a static initializer is run as part of the native image build process, and the results are directly stored in memory. {project-name} takes advantage of this by generating some of the startup code in static initializer blocks, so they are run as part of the image build process rather than on image startup. This has multiple advantages, as the image build is a standard JVM it is still possible to use JVM features such as reflection and dynamic proxy generation that do not work out of the box on Substrate. As most of the startup is done in this phase the native image will start even faster, as it effectively contains a serialized image of an already started application."
msgstr "Cuando se construye una imagen nativa con SubstrateVM, cualquier código que forme parte de un inicializador estático se ejecuta como parte del proceso de construcción de la imagen nativa, y los resultados se almacenan directamente en la memoria. {nombre-del-proyecto} se aprovecha de esto generando parte del código de inicio en bloques inicializadores estáticos, de modo que se ejecutan como parte del proceso de construcción de la imagen en lugar de al iniciar la imagen. Esto tiene múltiples ventajas, ya que la construcción de la imagen es una JVM estándar que todavía es posible utilizar las características de la JVM como la reflexión y la generación de proxy dinámico que no funcionan fuera de la caja en Substrate. Como la mayor parte del arranque se realiza en esta fase, la imagen nativa se iniciará aún más rápido, ya que contiene efectivamente una imagen serializada de una aplicación ya iniciada."

#. type: Labeled list
#: upstream/_guides/topic/architecture.adoc:39
#, fuzzy, no-wrap
msgid "Native Image Start"
msgstr "Inicio de imagen nativa"

#. type: Plain text
#: upstream/_guides/topic/architecture.adoc:42
#, fuzzy
msgid "As most of the work has been done in the image build the actual native image startup will generally only contain tasks that can't be done in advance, such as opening sockets and connecting to databases."
msgstr "Dado que la mayor parte del trabajo se ha realizado en la construcción de la imagen, el inicio real de la imagen nativa generalmente sólo contendrá tareas que no se pueden hacer por adelantado, como la apertura de sockets y la conexión a bases de datos."

#. type: Title ==
#: upstream/_guides/topic/architecture.adoc:43
#, fuzzy, no-wrap
msgid "Extension Architecture"
msgstr "Arquitectura de la extensión"

#. type: Plain text
#: upstream/_guides/topic/architecture.adoc:50
#, fuzzy
msgid "As a result of this architecture every extension will provide two artifacts, one that handles build time processing (the `-deployment` artifacts), and another `-runtime` artifact that contains the classes needed at runtime. Only the runtime artifact will end up in the final application. The end result of the deployment process is some generated bytecode that can directly start any runtime services required by the application (but don't worry, you don't have to know anything about bytecode to write a {project-name} extension)."
msgstr "Como resultado de esta arquitectura, cada extensión proporcionará dos artefactos, uno que maneja el procesamiento en tiempo de construcción (los artefactos `-deployment` ), y otro artefacto `-runtime` que contiene las clases necesarias en tiempo de ejecución. Sólo el artefacto en tiempo de ejecución terminará en la aplicación final. El resultado final del proceso de despliegue es algún bytecode generado que puede iniciar directamente cualquier servicio de tiempo de ejecución requerido por la aplicación (pero no te preocupes, no tienes que saber nada sobre bytecode para escribir una extensión de {nombre-de-proyecto})."

#. type: Plain text
#: upstream/_guides/topic/architecture.adoc:56
#, fuzzy
msgid "{project-name} uses a novel technique for writing bytecode that we are calling _Bytecode Recording_. Basically at augment time extensions can inject instances of classes that contain the runtime logic to start services, and invoke these instances as if they were directly starting the service. These injected instances are actually proxies, that override all the public methods and record exactly which invocations have been made, what the parameters are, and the order they were made in. They then generate bytecode to perform this exact same sequence of invocations when the application starts up."
msgstr "{nombre-del-proyecto} utiliza una técnica novedosa para escribir bytecode que llamamos _Bytecode Recording_. Básicamente, en tiempo de aumento, las extensiones pueden inyectar instancias de clases que contienen la lógica de tiempo de ejecución para iniciar servicios, e invocar estas instancias como si estuvieran iniciando directamente el servicio. Estas instancias inyectadas son en realidad proxies, que sobrescriben todos los métodos públicos y registran exactamente qué invocaciones se han hecho, cuáles son los parámetros y el orden en que se hicieron. A continuación, generan código de bytes para realizar esta misma secuencia de invocaciones cuando la aplicación se inicia."

#. type: Plain text
#: upstream/_guides/topic/architecture.adoc:60
#, fuzzy
msgid "This means that from the point of view of an extension developer it looks like they are making invocations that directly start the application, when in fact they are recording bytecode that will be used to start the application later."
msgstr "Esto significa que desde el punto de vista de un desarrollador de extensiones parece que están haciendo invocaciones que inician directamente la aplicación, cuando en realidad están grabando bytecode que se utilizará para iniciar la aplicación más tarde."

#. type: Plain text
#: upstream/_guides/topic/architecture.adoc:62
#, fuzzy
msgid "The `-deployment` artifacts work by defining `@BuildStep` methods, that produce and consume `BuildItem` instances, and can also record bytecode if required."
msgstr "Los artefactos de `-deployment` funcionan definiendo métodos de `@BuildStep`, que producen y consumen instancias de `BuildItem`, y también pueden grabar bytecode si es necesario."
