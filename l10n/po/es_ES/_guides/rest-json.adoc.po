# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/rest-json.adoc:6
#, fuzzy, no-wrap
msgid "Writing JSON REST Services"
msgstr "Escribir servicios JSON REST"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:14
#, fuzzy
msgid "JSON is now the _lingua franca_ between microservices."
msgstr "JSON es ahora la _lengua franca_ entre los microservicios."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:16
#, fuzzy
msgid "In this guide, we see how you can get your REST services to consume and produce JSON payloads."
msgstr "En esta guía, veremos cómo puede hacer que sus servicios REST consuman y produzcan cargas útiles JSON."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:18
#, fuzzy
msgid "there is another guide if you need a xref:rest-client-reactive.adoc[REST client] (including support for JSON)."
msgstr "hay otra guía si necesitas un  link:rest-client-reactive.html[cliente REST] (incluyendo soporte para JSON)."

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:23
#, fuzzy
msgid "This is an introduction to writing JSON REST services with Quarkus.  A more detailed guide about RESTEasy Reactive is available xref:resteasy-reactive.adoc[here]."
msgstr "Esta es una introducción a la escritura de servicios JSON REST con Quarkus. Una guía más detallada sobre RESTEasy Reactive está disponible  link:resteasy-reactive.html[aquí]."

#. type: Title ==
#: upstream/_guides/rest-json.adoc:25
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Requisitos previos"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:29
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "Arquitectura"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:32
#, fuzzy
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "La aplicación construida en esta guía es bastante sencilla: el usuario puede añadir elementos en una lista mediante un formulario y la lista se actualiza."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:34
#, fuzzy
msgid "All the information between the browser and the server are formatted as JSON."
msgstr "Toda la información entre el navegador y el servidor se formatea como JSON."

#. type: Title ==
#: upstream/_guides/rest-json.adoc:35
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solución"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:39
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Le recomendamos que siga las instrucciones de las siguientes secciones y cree la aplicación paso a paso. Sin embargo, puede ir directamente al ejemplo completado."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:41
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clone el repositorio Git: `git clone {quickstarts-clone-url}` o descargue un {quickstarts-archive-url}[archivo]."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:43
#, fuzzy
msgid "The solution is located in the `rest-json-quickstart` link:{quickstarts-tree-url}/rest-json-quickstart[directory]."
msgstr "La solución se encuentra en el `rest-json-quickstart` {quickstarts-tree-url}/rest-json-quickstart[directorio]."

#. type: Title ==
#: upstream/_guides/rest-json.adoc:44
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "Creación del proyecto Maven"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:47
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "En primer lugar, necesitamos un nuevo proyecto. Cree un nuevo proyecto con el siguiente comando:"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:54
#, fuzzy
msgid "This command generates a new project importing the RESTEasy Reactive/Jakarta REST and https://github.com/FasterXML/jackson[Jackson] extensions, and in particular adds the following dependency:"
msgstr "Este comando genera un nuevo proyecto que importa las extensiones RESTEasy Reactive/JAX-RS y  link:https://github.com/FasterXML/jackson[Jackson], y en particular añade la siguiente dependencia:"

#. type: Block title
#: upstream/_guides/rest-json.adoc:56 upstream/_guides/rest-json.adoc:85
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:62
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/rest-json.adoc:65 upstream/_guides/rest-json.adoc:94
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:68
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive-jackson\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:73
#, fuzzy
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need to do it manually."
msgstr "Para mejorar la experiencia del usuario, Quarkus registra los tres  link:https://github.com/FasterXML/jackson-modules-java8[módulos] Jackson  link:https://github.com/FasterXML/jackson-modules-java8[Java] 8 para que no tengas que hacerlo manualmente."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:76
#, fuzzy
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] so, if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy Reactive JSON-B extension instead:"
msgstr "Quarkus también es compatible con  link:https://eclipse-ee4j.github.io/jsonb-api/[JSON-B], por lo que, si prefieres JSON-B a Jackson, puedes crear un proyecto basado en la extensión RESTEasy Reactive JSON-B:"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:83
#, fuzzy
msgid "This command generates a new project importing the RESTEasy Reactive/Jakarta REST and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions, and in particular adds the following dependency:"
msgstr "Este comando genera un nuevo proyecto que importa las extensiones RESTEasy Reactive/JAX-RS y  link:https://eclipse-ee4j.github.io/jsonb-api/[JSON-B], y en particular añade la siguiente dependencia:"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:91
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-jsonb</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:97
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive-jsonb\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:102
#, fuzzy
msgid "While named \"reactive\", RESTEasy Reactive supports equally well both traditional blocking patterns and reactive patterns."
msgstr "Aunque se denomina \"reactivo\", RESTEasy Reactive admite igualmente bien tanto los patrones de bloqueo tradicionales como los reactivos."

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:104
#, fuzzy
msgid "For more information about RESTEasy Reactive, please refer to the xref:resteasy-reactive.adoc[dedicated guide]."
msgstr "Para más información sobre RESTEasy Reactive, consulte la  link:resteasy-reactive.html[guía dedicada]."

#. type: Title ==
#: upstream/_guides/rest-json.adoc:106
#, fuzzy, no-wrap
msgid "Creating your first JSON REST service"
msgstr "Creación de su primer servicio JSON REST"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:109
#, fuzzy
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "En este ejemplo, crearemos una aplicación para gestionar una lista de frutas."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:111
#, fuzzy
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "En primer lugar, vamos a crear el frijol `Fruit` como sigue:"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:115 upstream/_guides/rest-json.adoc:138
#: upstream/_guides/rest-json.adoc:397 upstream/_guides/rest-json.adoc:420
#, no-wrap
msgid "package org.acme.rest.json;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:117
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:120 upstream/_guides/rest-json.adoc:402
#, no-wrap
msgid ""
"    public String name;\n"
"    public String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:123
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:129
#, no-wrap
msgid ""
"    public Fruit(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:132
#, fuzzy
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "No es nada del otro mundo. Una cosa importante a tener en cuenta es que tener un constructor por defecto es requerido por la capa de serialización JSON."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:134
#, fuzzy
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr "Ahora, cree la clase `org.acme.rest.json.FruitResource` como sigue:"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:142
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashMap;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:147
#, no-wrap
msgid ""
"import jakarta.ws.rs.DELETE;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:150
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:152
#, no-wrap
msgid "    private Set<Fruit> fruits = Collections.newSetFromMap(Collections.synchronizedMap(new LinkedHashMap<>()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:157
#, no-wrap
msgid ""
"    public FruitResource() {\n"
"        fruits.add(new Fruit(\"Apple\", \"Winter fruit\"));\n"
"        fruits.add(new Fruit(\"Pineapple\", \"Tropical fruit\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:162
#, no-wrap
msgid ""
"    @GET\n"
"    public Set<Fruit> list() {\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:168
#, no-wrap
msgid ""
"    @POST\n"
"    public Set<Fruit> add(Fruit fruit) {\n"
"        fruits.add(fruit);\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:175
#, no-wrap
msgid ""
"    @DELETE\n"
"    public Set<Fruit> delete(Fruit fruit) {\n"
"        fruits.removeIf(existingFruit -> existingFruit.name.contentEquals(fruit.name));\n"
"        return fruits;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:178
#, fuzzy
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the Jakarta REST annotations."
msgstr "La implementación es bastante sencilla y sólo hay que definir los puntos finales utilizando las anotaciones JAX-RS."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:181
#, fuzzy
msgid "The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson], depending on the extension you chose when initializing the project."
msgstr "Los objetos de `Fruit` se serializarán/deserializarán automáticamente mediante  link:https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] o  link:https://github.com/FasterXML/jackson[Jackson], dependiendo de la extensión que hayas elegido al inicializar el proyecto."

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:188
#, fuzzy
msgid "When a JSON extension is installed such as `quarkus-resteasy-reactive-jackson` or `quarkus-resteasy-reactive-jsonb`, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream` respectively)."
msgstr "Cuando se instala una extensión JSON como `quarkus-resteasy-reactive-jackson` o `quarkus-resteasy-reactive-jsonb`, Quarkus utilizará el tipo de medio `application/json` por defecto para la mayoría de los valores de retorno, a menos que el tipo de medio se establezca explícitamente a través de las anotaciones `@Produces` o `@Consumes` (hay algunas excepciones para tipos bien conocidos, como `String` y `File`, que por defecto son `text/plain` y `application/octet-stream` respectivamente)."

#. type: Title ===
#: upstream/_guides/rest-json.adoc:191
#, fuzzy, no-wrap
msgid "Configuring JSON support"
msgstr "Configuración de la compatibilidad con JSON"

#. type: Title ====
#: upstream/_guides/rest-json.adoc:193
#, fuzzy, no-wrap
msgid "Jackson"
msgstr "Jackson"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:197
#, fuzzy
msgid "In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (and consumed by the Quarkus extensions) is configured to ignore unknown properties (by disabling the `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` feature)."
msgstr "En Quarkus, el Jackson `ObjectMapper` por defecto obtenido a través de CDI (y consumido por las extensiones de Quarkus) está configurado para ignorar las propiedades desconocidas (desactivando la característica `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` )."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:200
#, fuzzy
msgid "You can restore the default behavior of Jackson by setting `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties` or on a per-class basis via `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr "Puede restablecer el comportamiento por defecto de Jackson configurando `quarkus.jackson.fail-on-unknown-properties=true` en su `application.properties` o por clase a través de `@JsonIgnoreProperties(ignoreUnknown = false)`."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:203
#, fuzzy
msgid "Furthermore, the `ObjectMapper` is configured to format dates and time in ISO-8601 (by disabling the `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` feature)."
msgstr "Además, el `ObjectMapper` está configurado para formatear las fechas y la hora en ISO-8601 (desactivando la función `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` )."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:207
#, fuzzy
msgid "The default behaviour of Jackson can be restored by setting `quarkus.jackson.write-dates-as-timestamps=true` in your `application.properties`. If you want to change the format for a single field, you can use the `@JsonFormat` annotation."
msgstr "El comportamiento por defecto de Jackson puede restaurarse configurando `quarkus.jackson.write-dates-as-timestamps=true` en su `application.properties`. Si desea cambiar el formato de un solo campo, puede utilizar la anotación `@JsonFormat`."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:211
#, fuzzy
msgid "Also, Quarkus makes it very easy to configure various Jackson settings via CDI beans.  The simplest (and suggested) approach is to define a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer` inside of which any Jackson configuration can be applied."
msgstr "Además, Quarkus hace que sea muy fácil configurar varios ajustes de Jackson a través de beans CDI. El enfoque más sencillo (y sugerido) es definir un bean CDI de tipo `io.quarkus.jackson.ObjectMapperCustomizer` dentro del cual se puede aplicar cualquier configuración de Jackson."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:213
#, fuzzy
msgid "An example where a custom module needs to be registered would look like so:"
msgstr "Un ejemplo en el que hay que registrar un módulo personalizado sería el siguiente"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:219
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
"import jakarta.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:222
#, no-wrap
msgid ""
"@Singleton\n"
"public class RegisterCustomModuleCustomizer implements ObjectMapperCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:227
#, no-wrap
msgid ""
"    public void customize(ObjectMapper mapper) {\n"
"        mapper.registerModule(new CustomModule());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:232
#, fuzzy
msgid "Users can even provide their own `ObjectMapper` bean if they so choose.  If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.  Failure to do so will prevent Jackson specific customizations provided by various extensions from being applied."
msgstr "Los usuarios pueden incluso proporcionar su propio frijol `ObjectMapper` si así lo desean. Si se hace esto, es muy importante inyectar y aplicar manualmente todos los beans `io.quarkus.jackson.ObjectMapperCustomizer` en el productor CDI que produce `ObjectMapper`. Si no se hace así, se evitará que se apliquen las personalizaciones específicas de Jackson proporcionadas por varias extensiones."

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:240
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.arc.All;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
"import java.util.List;\n"
"import jakarta.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:242
#, no-wrap
msgid "public class CustomObjectMapper {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:248
#, no-wrap
msgid ""
"    // Replaces the CDI producer for ObjectMapper built into Quarkus\n"
"    @Singleton\n"
"    @Produces\n"
"    ObjectMapper objectMapper(@All List<ObjectMapperCustomizer> customizers) {\n"
"        ObjectMapper mapper = myObjectMapper(); // Custom `ObjectMapper`\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:253
#, no-wrap
msgid ""
"        // Apply all ObjectMapperCustomizer beans (incl. Quarkus)\n"
"        for (ObjectMapperCustomizer customizer : customizers) {\n"
"            customizer.customize(mapper);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:257
#, no-wrap
msgid ""
"        return mapper;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title =====
#: upstream/_guides/rest-json.adoc:259
#, fuzzy, no-wrap
msgid "Mixin support"
msgstr "Soporte de Mixin"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:264
#, fuzzy
msgid "Quarkus automates the registration of Jackson's Mixin support, via the `io.quarkus.jackson.JacksonMixin` annotation.  This annotation can be placed on classes that are meant to be used as Jackson mixins while the classes they are meant to customize are defined as the value of the annotation."
msgstr "Quarkus automatiza el registro del soporte de Mixin de Jackson, a través de la anotación `io.quarkus.jackson.JacksonMixin`. Esta anotación se puede colocar en las clases que están destinadas a ser utilizadas como mixins de Jackson, mientras que las clases que están destinadas a personalizar se definen como el valor de la anotación."

#. type: Title ====
#: upstream/_guides/rest-json.adoc:265
#, fuzzy, no-wrap
msgid "JSON-B"
msgstr "JSON-B"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:268
#, fuzzy
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr "Como ya se ha dicho, Quarkus ofrece la opción de utilizar JSON-B en lugar de Jackson mediante el uso de la extensión `quarkus-resteasy-jsonb`."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:270
#, fuzzy
msgid "Following the same approach as described in the previous section, JSON-B can be configured using a `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr "Siguiendo el mismo enfoque descrito en la sección anterior, JSON-B puede ser configurado utilizando un bean `io.quarkus.jsonb.JsonbConfigCustomizer`."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:272
#, fuzzy
msgid "If for example a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr "Si por ejemplo un serializador personalizado llamado `FooSerializer` para el tipo `com.example.Foo` necesita ser registrado con JSON-B, la adición de un bean como el siguiente sería suficiente:"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:279
#, no-wrap
msgid ""
"import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
"import jakarta.inject.Singleton;\n"
"import jakarta.json.bind.JsonbConfig;\n"
"import jakarta.json.bind.serializer.JsonbSerializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:282
#, no-wrap
msgid ""
"@Singleton\n"
"public class FooSerializerRegistrationCustomizer implements JsonbConfigCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:287
#, no-wrap
msgid ""
"    public void customize(JsonbConfig config) {\n"
"        config.withSerializers(new FooSerializer());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:292
#, fuzzy
msgid "A more advanced option would be to directly provide a bean of `jakarta.json.bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to provide a bean of type `jakarta.json.bind.Jsonb` (with a `Singleton` scope).  If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `jakarta.json.bind.Jsonb`.  Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr "Una opción más avanzada sería proporcionar directamente un bean de `javax.json.bind.JsonbConfig` (con un ámbito `Dependent` ) o, en el caso extremo, proporcionar un bean de tipo `javax.json.bind.Jsonb` (con un ámbito `Singleton` ). Si se aprovecha este último enfoque, es muy importante inyectar y aplicar manualmente todos los beans de `io.quarkus.jsonb.JsonbConfigCustomizer` en el productor CDI que produce `javax.json.bind.Jsonb`. Si no se hace así, se evitará que se apliquen las personalizaciones específicas de JSON-B proporcionadas por varias extensiones."

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:296
#, no-wrap
msgid "import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:300
#, no-wrap
msgid ""
"import jakarta.enterprise.context.Dependent;\n"
"import jakarta.enterprise.inject.Instance;\n"
"import jakarta.json.bind.JsonbConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:302
#, no-wrap
msgid "public class CustomJsonbConfig {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:307
#, no-wrap
msgid ""
"    // Replaces the CDI producer for JsonbConfig built into Quarkus\n"
"    @Dependent\n"
"    JsonbConfig jsonConfig(Instance<JsonbConfigCustomizer> customizers) {\n"
"        JsonbConfig config = myJsonbConfig(); // Custom `JsonbConfig`\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:312
#, no-wrap
msgid ""
"        // Apply all JsonbConfigCustomizer beans (incl. Quarkus)\n"
"        for (JsonbConfigCustomizer customizer : customizers) {\n"
"            customizer.customize(config);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:316
#, no-wrap
msgid ""
"        return config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-json.adoc:319
#, fuzzy, no-wrap
msgid "Creating a frontend"
msgstr "Creación de un frontend"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:324
#, fuzzy
msgid "Now let's add a simple web page to interact with our `FruitResource`.  Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this link:{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr "Ahora vamos a añadir una simple página web para interactuar con nuestro `FruitResource`. Quarkus sirve automáticamente recursos estáticos ubicados en el directorio `META-INF/resources`. En el directorio `src/main/resources/META-INF/resources`, añade un archivo `fruits.html` con el contenido de este archivo {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html]."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:326
#, fuzzy
msgid "You can now interact with your REST service:"
msgstr "Ahora puede interactuar con su servicio REST:"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:330
#, fuzzy
msgid "start Quarkus with:"
msgstr "con el que empezar a Quarkus:"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:333
#, fuzzy
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "abrir un navegador para `&lt;a href=\"http://localhost:8080/fruits.html\" class=\"bare\"&gt;http://localhost:8080/fruits.html&lt;/a&gt;`"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:334
#, fuzzy
msgid "add new fruits to the list via the form"
msgstr "añadir nuevas frutas a la lista a través del formulario"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:337
#, fuzzy, no-wrap
msgid "Building a native executable"
msgstr "Construir un ejecutable nativo"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:340
#, fuzzy
msgid "You can build a native executable with the usual command:"
msgstr "Puedes construir un ejecutable nativo con el comando habitual:"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:344
#, fuzzy
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "Ejecutarlo es tan sencillo como ejecutar `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:346
#, fuzzy
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "A continuación, puede dirigir su navegador a `&lt;a href=\"http://localhost:8080/fruits.html\" class=\"bare\"&gt;http://localhost:8080/fruits.html&lt;/a&gt;` y utilizar su aplicación."

#. type: Title ==
#: upstream/_guides/rest-json.adoc:347
#, fuzzy, no-wrap
msgid "About serialization"
msgstr "Sobre la serialización"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:350
#, fuzzy
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr "Las bibliotecas de serialización JSON utilizan Java reflection para obtener las propiedades de un objeto y serializarlas."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:354
#, fuzzy
msgid "When using native executables with GraalVM, all classes that will be used with reflection need to be registered.  The good news is that Quarkus does that work for you most of the time.  So far, we haven't registered any class, not even `Fruit`, for reflection usage and everything is working fine."
msgstr "Cuando se utilizan ejecutables nativos con GraalVM, todas las clases que se utilizarán con la reflexión deben ser registradas. La buena noticia es que Quarkus hace ese trabajo por ti la mayor parte del tiempo. Hasta ahora, no hemos registrado ninguna clase, ni siquiera `Fruit`, para el uso de reflection y todo funciona bien."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:357
#, fuzzy
msgid "Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.  When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr "Quarkus realiza algo de magia cuando es capaz de inferir los tipos serializados a partir de los métodos REST. Cuando se tiene el siguiente método REST, Quarkus determina que `Fruit` será serializado:"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:364
#, no-wrap
msgid ""
"@GET\n"
"public List<Fruit> list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:368
#, fuzzy
msgid "Quarkus does that for you automatically by analyzing the REST methods at build time and that's why we didn't need any reflection registration in the first part of this guide."
msgstr "Quarkus lo hace por ti de forma automática analizando los métodos REST en tiempo de compilación y es por eso que no necesitamos ningún registro de reflexión en la primera parte de esta guía."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:371
#, fuzzy
msgid "Another common pattern in the Jakarta REST world is to use the `Response` object.  `Response` comes with some nice perks:"
msgstr "Otro patrón común en el mundo de JAX-RS es utilizar el objeto `Response`. `Response` tiene algunas ventajas:"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:373
#, fuzzy
msgid "you can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance);"
msgstr "puede devolver diferentes tipos de entidad dependiendo de lo que ocurra en su método (un `Legume` o un `Error` por ejemplo);"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:374
#, fuzzy
msgid "you can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr "puede establecer los atributos de la página `Response` (el estado viene a cuento en el caso de un error)."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:376
#, fuzzy
msgid "Your REST method then looks like this:"
msgstr "Su método REST tiene entonces el siguiente aspecto:"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:383
#, no-wrap
msgid ""
"@GET\n"
"public Response list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:387
#, fuzzy
msgid "It is not possible for Quarkus to determine at build time the type included in the `Response` as the information is not available.  In this case, Quarkus won't be able to automatically register for reflection the required classes."
msgstr "No es posible para Quarkus determinar en tiempo de construcción la clase incluida en el `Response` ya que la información no está disponible. En este caso, Quarkus no podrá registrar automáticamente para la reflexión las clases requeridas."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:389
#, fuzzy
msgid "This leads us to our next section."
msgstr "Esto nos lleva a la siguiente sección."

#. type: Title ==
#: upstream/_guides/rest-json.adoc:390
#, fuzzy, no-wrap
msgid "Using Response"
msgstr "Uso de la respuesta"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:393
#, fuzzy
msgid "Let's create the `Legume` class which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr "Vamos a crear la clase `Legume` que se serializará como JSON, siguiendo el mismo modelo que para nuestra clase `Fruit`:"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:399
#, no-wrap
msgid "public class Legume {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:405
#, no-wrap
msgid ""
"    public Legume() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:411
#, no-wrap
msgid ""
"    public Legume(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:414
#, fuzzy
msgid "Now let's create a `LegumeResource` REST service with only one method which returns the list of legumes."
msgstr "Ahora vamos a crear un servicio REST `LegumeResource` con un solo método que devuelva la lista de legumbres."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:416
#, fuzzy
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr "Este método devuelve un `Response` y no una lista de `Legume`."

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:424
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashSet;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:428
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:431
#, no-wrap
msgid ""
"@Path(\"/legumes\")\n"
"public class LegumeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:433
#, no-wrap
msgid "    private Set<Legume> legumes = Collections.synchronizedSet(new LinkedHashSet<>());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:438
#, no-wrap
msgid ""
"    public LegumeResource() {\n"
"        legumes.add(new Legume(\"Carrot\", \"Root vegetable, usually orange\"));\n"
"        legumes.add(new Legume(\"Zucchini\", \"Summer squash\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:444
#, no-wrap
msgid ""
"    @GET\n"
"    public Response list() {\n"
"        return Response.ok(legumes).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:449
#, fuzzy
msgid "Now let's add a simple web page to display our list of legumes.  In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr "Ahora vamos a añadir una página web sencilla para mostrar nuestra lista de legumbres. En el directorio `src/main/resources/META-INF/resources`, añade un archivo `legumes.html` con el contenido de este archivo {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html]."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:451
#, fuzzy
msgid "Open a browser to http://localhost:8080/legumes.html, and you will see our list of legumes."
msgstr "Abra un navegador a  http://localhost:8080/legumes.html  y verá nuestra lista de legumbres."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:453
#, fuzzy
msgid "The interesting part starts when running the application as a native executable:"
msgstr "La parte interesante comienza cuando se ejecuta la aplicación como un ejecutable nativo:"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:457 upstream/_guides/rest-json.adoc:496
#, fuzzy
msgid "create the native executable with:"
msgstr "crear el ejecutable nativo con:"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:460 upstream/_guides/rest-json.adoc:499
#, fuzzy
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr "ejecutarlo con `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:461 upstream/_guides/rest-json.adoc:500
#, fuzzy
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr "abra un navegador y vaya a  http://localhost:8080/legumes.html"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:465
#, fuzzy
msgid "No legumes there."
msgstr "Allí no hay legumbres."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:468
#, fuzzy
msgid "As mentioned above, the issue is that Quarkus was not able to determine the `Legume` class will require some reflection by analyzing the REST endpoints.  The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list, so it does not serialize the fields' data."
msgstr "Como se mencionó anteriormente, el problema es que Quarkus no fue capaz de determinar la clase `Legume` requerirá alguna reflexión mediante el análisis de los puntos finales REST. La biblioteca de serialización JSON intenta obtener la lista de campos de `Legume` y obtiene una lista vacía, por lo que no serializa los datos de los campos."

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:473
#, fuzzy
msgid "At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.  GraalVM will simply return an empty list of fields."
msgstr "Actualmente, cuando JSON-B o Jackson intentan obtener la lista de campos de una clase, si la clase no está registrada para reflexión, no se lanzará ninguna excepción. GraalVM simplemente devolverá una lista de campos vacía."

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:475
#, fuzzy
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr "Esperemos que esto cambie en el futuro y que el error sea más evidente."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:478
#, fuzzy
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr "Podemos registrar `Legume` para la reflexión manualmente añadiendo la anotación `@RegisterForReflection` en nuestra clase `Legume`:"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:481
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:486
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Legume {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:489
#, fuzzy
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "La anotación `@RegisterForReflection` indica a Quarkus que mantenga la clase y sus miembros durante la compilación nativa. Se pueden encontrar más detalles sobre la anotación `@RegisterForReflection` en la página de  link:writing-native-applications-tips.html#registerForReflection[consejos para aplicaciones] nativas."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:491
#, fuzzy
msgid "Let's do that and follow the same steps as before:"
msgstr "Hagámoslo y sigamos los mismos pasos que antes:"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:495
#, fuzzy
msgid "hit `Ctrl+C` to stop the application"
msgstr "pulse `Ctrl+C` para detener la aplicación"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:504
#, fuzzy
msgid "This time, you can see our list of legumes."
msgstr "Esta vez, puedes ver nuestra lista de legumbres."

#. type: Title ==
#: upstream/_guides/rest-json.adoc:506
#, fuzzy, no-wrap
msgid "Being reactive"
msgstr "Ser reactivo"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:510
#, fuzzy
msgid "You can return _reactive types_ to handle asynchronous processing.  Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr "Puedes devolver _tipos reactivos_ para manejar el procesamiento asíncrono. Quarkus recomienda el uso de  link:https://smallrye.io/smallrye-mutiny[Mutiny] para escribir código reactivo y asíncrono."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:512
#, fuzzy
msgid "RESTEasy Reactive is naturally integrated with Mutiny."
msgstr "RESTEasy Reactive se integra de forma natural con Mutiny."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:514
#, fuzzy
msgid "Your endpoints can return `Uni` or `Multi` instances:"
msgstr "Sus puntos finales pueden devolver instancias de `Uni` o `Multi`:"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:523
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{name}\")\n"
"public Uni<Fruit> getOne(String name) {\n"
"    return findByName(name);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:528
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> getAll() {\n"
"    return findAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:532
#, fuzzy
msgid "Use `Uni` when you have a single result.  Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr "Utilice `Uni` cuando tenga un único resultado. Utilice `Multi` cuando tenga varios elementos que puedan ser emitidos de forma asíncrona."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:534
#, fuzzy
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr "Puede utilizar `Uni` y `Response` para devolver respuestas HTTP asíncronas: `Uni&amp;lt;Response&amp;gt;`."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:536
#, fuzzy
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Puede encontrar más detalles sobre Mutiny en  link:mutiny-primer.html[Mutiny - an intuitive reactive programming library]."

#. type: Title ==
#: upstream/_guides/rest-json.adoc:537
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "Conclusión"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:540
#, fuzzy
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well known technologies."
msgstr "Crear servicios JSON REST con Quarkus es fácil, ya que se basa en tecnologías probadas y bien conocidas."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:542
#, fuzzy
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr "Como es habitual, Quarkus simplifica aún más las cosas bajo el capó al ejecutar su aplicación como un ejecutable nativo."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:543
#, fuzzy
msgid "There is only one thing to remember: if you use `Response` and Quarkus can't determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr "Sólo hay que recordar una cosa: si usas `Response` y Quarkus no puede determinar los beans que se serializan, tienes que anotarlos con `@RegisterForReflection`."
