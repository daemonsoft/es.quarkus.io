msgid ""
msgstr ""
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/funqy.adoc
msgid "Funqy"
msgstr ""

#: _versions/3.27/guides/funqy.adoc
#, fuzzy
msgid ""
"Quarkus Funqy is part of Quarkus's serverless strategy and aims to provide a portable Java API to write functions\n"
"deployable to various FaaS environments like AWS Lambda, Azure Functions, Google Cloud Functions, Knative, and Knative Events (Cloud Events).\n"
"It is also usable as a standalone service."
msgstr "Quarkus Funqy forma parte de la estrategia sin servidor de Quarkus y tiene como objetivo proporcionar una API Java portátil para escribir funciones desplegables en varios entornos FaaS como AWS Lambda, Azure Functions, Google Cloud Functions, Knative y Knative Events (Cloud Events). También se puede utilizar como un servicio independiente."

#: _versions/3.27/guides/funqy.adoc
#, fuzzy
msgid ""
"Because Funqy is an abstraction that spans multiple different cloud/function providers\n"
"and protocols it has to be a very simple API and thus, might not have all the features you are used\n"
"to in other remoting abstractions.  A nice side effect though is that Funqy is as optimized and\n"
"as small as possible.  This means that because Funqy sacrifices a little on flexibility, you'll\n"
"get a framework that has little to no overhead."
msgstr "Debido a que Funqy es una abstracción que abarca múltiples proveedores de nubes/funciones y protocolos diferentes, tiene que ser una API muy simple y, por lo tanto, puede que no tenga todas las características a las que está acostumbrado en otras abstracciones remotas. Sin embargo, un agradable efecto secundario es que Funqy está tan optimizado y es tan pequeño como es posible. Esto significa que debido a que Funqy sacrifica un poco en flexibilidad, obtendrá un marco de trabajo que tiene poca o ninguna sobrecarga."

#: _versions/3.27/guides/funqy.adoc
msgid "Funqy Basics"
msgstr ""

#: _versions/3.27/guides/funqy.adoc
#, fuzzy
msgid ""
"The Funqy API is simple.  Annotate a method with `@Funq`.  This method may only have one optional input parameter\n"
"and may or may not return a response."
msgstr "La API de Funqy es sencilla. Anote un método con `@Funq` . Este método sólo puede tener un parámetro de entrada opcional y puede o no devolver una respuesta."

#: _versions/3.27/guides/funqy.adoc
#, fuzzy
msgid ""
"Java classes can also be used as input and output and must follow the Java bean convention and have\n"
"a default constructor.  The Java type that is declared as the parameter or return type is the type that will be\n"
"expected by the Funqy runtime.  Funqy does type introspection at build time to speed up boot time, so any derived types\n"
"will not be noticed by the Funqy marshalling layer at runtime."
msgstr "Las clases Java también se pueden utilizar como entrada y salida y deben seguir la convención Java bean y tener un constructor por defecto. El tipo Java que se declara como parámetro o tipo de retorno es el tipo que esperará el tiempo de ejecución de Funqy. Funqy hace una introspección de tipos en tiempo de construcción para acelerar el tiempo de arranque, por lo que cualquier tipo derivado no será notado por la capa de marshalling de Funqy en tiempo de ejecución."

#: _versions/3.27/guides/funqy.adoc
msgid "Here's an example of using a POJO as input and output types."
msgstr ""

#: _versions/3.27/guides/funqy.adoc
msgid "Async Reactive Types"
msgstr ""

#: _versions/3.27/guides/funqy.adoc
#, fuzzy
msgid ""
"Funqy supports the https://smallrye.io/smallrye-mutiny[SmallRye Mutiny] `Uni` reactive type as a return type.  The only requirement is that\n"
"the `Uni` must fill out the generic type."
msgstr "Funqy admite el tipo reactivo link:https://smallrye.io/smallrye-mutiny[SmallRye Mutiny] `Uni` como tipo de retorno. El único requisito es que el `Uni` debe rellenar el tipo genérico."

#: _versions/3.27/guides/funqy.adoc
msgid "Function Names"
msgstr ""

#: _versions/3.27/guides/funqy.adoc
#, fuzzy
msgid ""
"The function name defaults to the method name and is case-sensitive.  If you want your function referenced by a different name,\n"
"parameterize the `@Funq` annotation as follows:"
msgstr "El nombre de la función es por defecto el nombre del método y distingue entre mayúsculas y minúsculas. Si desea que su función sea referenciada por un nombre diferente, parametrice la anotación `@Funq` como sigue:"

#: _versions/3.27/guides/funqy.adoc
msgid "Funqy DI"
msgstr ""

#: _versions/3.27/guides/funqy.adoc
#, fuzzy
msgid ""
"Each Funqy Java class is a Quarkus Arc component and supports dependency injection through\n"
"CDI or Spring DI.  Spring DI requires including the `quarkus-spring-di` dependency in your build."
msgstr "Cada clase Funqy Java es un componente Quarkus Arc y admite la inyección de dependencia a través de CDI o Spring DI. Spring DI requiere incluir la dependencia `quarkus-spring-di` en su compilación."

#: _versions/3.27/guides/funqy.adoc
msgid "The default object lifecycle for a Funqy class is `@Dependent`."
msgstr ""

#: _versions/3.27/guides/funqy.adoc
msgid "Context injection"
msgstr ""

#: _versions/3.27/guides/funqy.adoc
#, fuzzy
msgid ""
"The Funqy API will usually not allow you to inject or use abstractions that\n"
"are specific to a protocol (i.e. HTTP) or function API (i.e. AWS Lambda).  There are\n"
"exceptions to the rule though, and you may be able to inject\n"
"contextual information that is specific to the environment you are deploying in."
msgstr "Por lo general, la API de Funqy no le permitirá inyectar o utilizar abstracciones que sean específicas de un protocolo (es decir, HTTP) o de una función API (es decir, AWS Lambda). Sin embargo, hay excepciones a la regla y es posible que pueda inyectar información contextual que sea específica del entorno en el que está desplegando."

#: _versions/3.27/guides/funqy.adoc
msgid "We do not recommend injecting contextual information specific to a runtime.  Keep your functions portable."
msgstr ""

#: _versions/3.27/guides/funqy.adoc
#, fuzzy
msgid ""
"Contextual information is injected via the `@Context` annotation which can be used on a function parameter\n"
"or a class field.  A good example is the `io.quarkus.funqy.knative.events.CloudEvent` interface that comes with our Funqy\n"
"Knative Cloud Events integration:"
msgstr "La información contextual se inyecta a través de la anotación `@Context` , que puede utilizarse en un parámetro de función o en un campo de clase. Un buen ejemplo es la interfaz `io.quarkus.funqy.knative.events.CloudEvent` que viene con nuestra integración Funqy Knative Cloud Events:"

#: _versions/3.27/guides/funqy.adoc
msgid "Should I Use Funqy?"
msgstr ""

#: _versions/3.27/guides/funqy.adoc
#, fuzzy
msgid ""
"REST over HTTP has become a very common way to write services over the past decade.  While Funqy\n"
"has an HTTP binding it is not a replacement for REST.  Because Funqy has to work across a variety\n"
"of protocols and function cloud platforms, it is very minimalistic and constrained.  For example, if you\n"
"use Funqy you lose the ability to link (think URIs) to the data your functions spit out.  You also\n"
"lose the ability to leverage cool HTTP features like `cache-control` and conditional GETs.  Many\n"
"developers will be ok with that as many won't be using these REST/HTTP features or styles. You'll\n"
"have to make the decision on what camp you are in.  Quarkus does support REST integration (through Jakarta REST,\n"
" Spring MVC, Vert.x Web, and Servlet) with\n"
"various cloud/function providers, but there are some disadvantages of using that approach as well.  For example,\n"
"if you want to do xref:aws-lambda-http.adoc[HTTP with AWS Lambda], this requires you to use the AWS API Gateway which may\n"
"slow down deployment and cold start time or even cost you more."
msgstr "REST sobre HTTP se ha convertido en una forma muy común de escribir servicios en la última década. Mientras Funqy tiene un enlace HTTP no es un sustituto de REST. Debido a que Funqy tiene que trabajar a través de una variedad de protocolos y plataformas de nube de funciones, es muy minimalista y restringido. Por ejemplo, si utiliza Funqy pierde la capacidad de enlazar (piense en URIs) a los datos que sus funciones escupen. También pierde la capacidad de aprovechar funciones HTTP geniales como `cache-control` y GET condicionales. Muchos desarrolladores estarán de acuerdo con eso ya que muchos no utilizarán estas características o estilos REST/HTTP. Usted tendrá que decidir en qué bando se encuentra. Quarkus sí admite la integración REST (a través de Jakarta REST, Spring MVC, Vert.x Web y Servlet) con varios proveedores de nubes/funciones, pero también hay algunas desventajas de utilizar ese enfoque. Por ejemplo, si desea hacer HTTP xref:aws-lambda-http.adoc[con AWS Lambda] , esto requiere que utilice la API Gateway de AWS, lo que puede ralentizar el despliegue y el tiempo de arranque en frío o incluso costarle más."

#: _versions/3.27/guides/funqy.adoc
#, fuzzy
msgid ""
"The purpose of Funqy is to allow you to write cross-provider functions so that you can move\n"
"off of your current function provider if, for instance, they start charging you a lot more for their\n"
"service.  Another reason you might not want to use Funqy is if you need access specific APIs of the\n"
"target function environment.  For example, developers often want access to the AWS Context on\n"
"Lambda.  In this case, we tell them they may be better off using the xref:aws-lambda.adoc[Quarkus AWS Lambda] integration instead."
msgstr "El propósito de Funqy es permitirle escribir funciones entre proveedores para que pueda abandonar a su proveedor de funciones actual si, por ejemplo, empieza a cobrarle mucho más por su servicio. Otra razón por la que podría no querer utilizar Funqy es si necesita acceder a API específicas del entorno de funciones de destino. Por ejemplo, los desarrolladores suelen querer acceder al contexto de AWS en Lambda. En este caso, les decimos que tal vez sea mejor que utilicen la integración xref:aws-lambda.adoc[AWS Lambda de Quarkus] en su lugar."
