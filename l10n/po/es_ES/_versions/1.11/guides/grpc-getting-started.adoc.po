# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-22 09:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:6
#, fuzzy, no-wrap
msgid "Getting Started with gRPC"
msgstr "Primeros pasos con gRPC"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:12
#, fuzzy
msgid "This page explains how to start using gRPC in your Quarkus application.  While this page describes how to configure it with Maven, it is also possible to use Gradle."
msgstr "Esta página explica cómo empezar a utilizar gRPC en su aplicación Quarkus. Aunque esta página describe cómo configurarlo con Maven, también es posible utilizar Gradle."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:15
#, fuzzy
msgid "Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].  The default configuration is enough, but you can also select some extensions if you want."
msgstr "Imaginemos que tiene un proyecto Quarkus normal, generado a partir del link:https://code.quarkus.io[generador de proyectos Quarkus] . La configuración por defecto es suficiente, pero también puede seleccionar algunas extensiones si lo desea."

#. type: Title ==
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:16
#, fuzzy, no-wrap
msgid "Configuring your project"
msgstr "Configurar su proyecto"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:19
#, fuzzy
msgid "Edit the `pom.xml` file to add the Quarkus gRPC extension dependency (just under `<dependencies>`):"
msgstr "Edite el archivo `pom.xml` para añadir la dependencia de la extensión gRPC de Quarkus (justo debajo de `<dependencies>` ):"

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:26
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-grpc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:30
msgid "Make sure you have `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.  If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:52
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus-plugin.version}</version>\n"
"            <extensions>true</extensions>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:56
#, fuzzy
msgid "With this configuration, you can put your service and message definitions in the `src/main/proto` directory.  `quarkus-maven-plugin` will generate Java files from your `proto` files."
msgstr "Con esta configuración, puede colocar sus definiciones de servicios y mensajes en el directorio `src/main/proto` . `quarkus-maven-plugin` generará archivos Java a partir de sus archivos `proto` ."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:58
#, fuzzy
msgid "Alternatively to using the `generate-code` goal of the `quarkus-maven-plugin`, you can use `protobuf-maven-plugin` to generate these files, more in <<Generating Java files from proto with protobuf-maven-plugin>>"
msgstr "Como alternativa al uso del objetivo `generate-code` del `quarkus-maven-plugin` , puede utilizar `protobuf-maven-plugin` para generar estos archivos, más en <<Generating Java files from proto with protobuf-maven-plugin>>"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:61
#, fuzzy
msgid "Let's start with a simple _Hello_ service.  Create the `src/main/proto/helloworld.proto` file with the following content:"
msgstr "Empecemos con un simple servicio _Hola_ . Cree el archivo `src/main/proto/helloworld.proto` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:65
#, no-wrap
msgid "syntax = \"proto3\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:69
#, no-wrap
msgid ""
"option java_multiple_files = true;\n"
"option java_package = \"io.quarkus.example\";\n"
"option java_outer_classname = \"HelloWorldProto\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:71
#, no-wrap
msgid "package helloworld;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:77
#, no-wrap
msgid ""
"// The greeting service definition.\n"
"service Greeter {\n"
"    // Sends a greeting\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:82
#, no-wrap
msgid ""
"// The request message containing the user's name.\n"
"message HelloRequest {\n"
"    string name = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:87
#, no-wrap
msgid ""
"// The response message containing the greetings\n"
"message HelloReply {\n"
"    string message = 1;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:90
#, fuzzy
msgid "This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message)."
msgstr "Este archivo `proto` define una interfaz de servicio simple con un solo método ( `SayHello`), y los mensajes intercambiados ( `HelloRequest` que contiene el nombre y `HelloReply` que contiene el mensaje de saludo)."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:93
#, fuzzy
msgid "Before coding, we need to generate the classes used to implement and consume gRPC services.  In a terminal, run:"
msgstr "Antes de codificar, necesitamos generar las clases utilizadas para implementar y consumir los servicios gRPC. En un terminal, ejecute"

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:97
#, no-wrap
msgid "$ mvn compile\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:100
#, fuzzy
msgid "Once generated, you can look at the `target/generated-sources/grpc` directory:"
msgstr "Una vez generado, puede consultar el directorio `target/generated-sources/grpc`:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:114
#, no-wrap
msgid ""
"target/generated-sources/grpc\n"
"└── io\n"
"    └── quarkus\n"
"        └── example\n"
"            ├── GreeterGrpc.java\n"
"            ├── HelloReply.java\n"
"            ├── HelloReplyOrBuilder.java\n"
"            ├── HelloRequest.java\n"
"            ├── HelloRequestOrBuilder.java\n"
"            ├── HelloWorldProto.java\n"
"            └── MutinyGreeterGrpc.java\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:117
#, fuzzy
msgid "These are the classes we are going to use."
msgstr "Estas son las clases que vamos a utilizar."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:119
msgid "Every time you update the `proto` files, you need to re-generate the classes (using `mvn compile`)."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:120
#, fuzzy, no-wrap
msgid "`proto` files with imports"
msgstr "`proto` archivos con importaciones"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:124
#, fuzzy
msgid "Protocol Buffers specification provides a way to import `proto` files.  The Quarkus code generation mechanism lets you control the scope of dependencies to scan for possible imports by setting the `quarkus.generate-code.grpc.scan-for-imports` property to one of the following:"
msgstr "La especificación Protocol Buffers proporciona una forma de importar archivos `proto` . El mecanismo de generación de código de Quarkus le permite controlar el ámbito de las dependencias a explorar en busca de posibles importaciones estableciendo la propiedad `quarkus.generate-code.grpc.scan-for-imports` en una de las siguientes:"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:126
#, fuzzy
msgid "`all` - scan all the dependencies"
msgstr "`all` - escanear todas las dependencias"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:127
#, fuzzy
msgid "`none` - don't scan the dependencies, use only what is defined in the `src/main/proto` or `src/test/proto`"
msgstr "`none` - no explore las dependencias, utilice sólo lo que está definido en `src/main/proto` o `src/test/proto`"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:128
#, fuzzy
msgid "`groupId1:artifactId1,groupId2:artifactId2` - scan only the dependencies with group id and artifact id in the list."
msgstr "`groupId1:artifactId1,groupId2:artifactId2` - escanear sólo las dependencias con id de grupo e id de artefacto en la lista."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:131
msgid "If not specified, the property is set to `com.google.protobuf:protobuf-java`.  To override it, set the `quarkus.generate-code.grpc.scan-for-imports` property in your pom.xml (or gradle.properties) to the desired value, e.g."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:137
#, no-wrap
msgid ""
"<properties>\n"
"  <quarkus.generate-code.grpc.scan-for-imports>all</quarkus.generate-code.grpc.scan-for-imports>\n"
"</properties>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:139
#, fuzzy, no-wrap
msgid "Implementing a gRPC service"
msgstr "Implementación de un servicio gRPC"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:142
#, fuzzy
msgid "Now that we have the generated classes let's implement our _hello_ service."
msgstr "Ahora que tenemos las clases generadas vamos a implementar nuestro servicio _hello_."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:144
msgid "With Quarkus, implementing a service requires to _extend_ the generated service base implementation and expose it as a `@Singleton` CDI bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:146
msgid "Don't use `@ApplicationScoped` as the gRPC service implementation cannot be proxied."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:147
#, fuzzy, no-wrap
msgid "Implementing a service"
msgstr "Implementación de un servicio"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:150
#, fuzzy
msgid "Create the `src/main/java/org/acme/HelloService.java` file with the following content:"
msgstr "Cree el archivo `src/main/java/org/acme/HelloService.java` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:154
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:188
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:237
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:159
#, no-wrap
msgid ""
"import io.grpc.stub.StreamObserver;\n"
"import io.quarkus.example.GreeterGrpc;\n"
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:161
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:195
#, no-wrap
msgid "import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:164
#, no-wrap
msgid ""
"@Singleton                                                                                    // <1>\n"
"public class HelloService extends GreeterGrpc.GreeterImplBase {                               // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:173
#, no-wrap
msgid ""
"    @Override\n"
"    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) { // <3>\n"
"        String name = request.getName();\n"
"        String message = \"Hello \" + name;\n"
"        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());         // <4>\n"
"        responseObserver.onCompleted();                                                       // <5>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:176
msgid "Expose your implementation as bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:177
#, fuzzy
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr "Extiende la clase `ImplBase`. Esta es una clase generada."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:178
#, fuzzy
msgid "Implement the methods defined in the service definition (here we have a single method)."
msgstr "Implementar los métodos definidos en la definición del servicio (aquí tenemos un único método)."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:179
#, fuzzy
msgid "Build and send the response."
msgstr "Construye y envía la respuesta."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:180
#, fuzzy
msgid "Close the response."
msgstr "Cierra la respuesta."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:184
msgid "Quarkus also provides an additional model with Mutiny, a Reactive Programming API integrated in Quarkus.  Learn more about Mutiny on the link:getting-started-reactive#mutiny[Getting Started with Reactive guide].  A Mutiny implementation of this service would be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:193
#, no-wrap
msgid ""
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.example.MutinyGreeterGrpc;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:198
#, no-wrap
msgid ""
"@Singleton\n"
"public class ReactiveHelloService extends MutinyGreeterGrpc.GreeterImplBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:206
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HelloReply> sayHello(HelloRequest request) {\n"
"        return Uni.createFrom().item(() ->\n"
"                HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build()\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:209
msgid "The main differences are the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:211
msgid "it extends the `ImplBase` from `MutinyGreeterGrpc` instead of `GreeterGrpc`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:212
msgid "the signature of the method is using Mutiny types"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:217
#, fuzzy
msgid "If your service implementation logic is blocking (use blocking I/O for example), annotate your method with `@Blocking`.  The `io.smallrye.common.annotation.Blocking` annotation instructs the framework to invoke the annotated method on a worker thread instead of the I/O thread (event-loop)."
msgstr "Si la lógica de implementación de su servicio es de bloqueo (utilice E/S de bloqueo, por ejemplo), anote su método con `@Blocking` . La anotación `io.smallrye.common.annotation.Blocking` indica al framework que invoque el método anotado en un hilo trabajador en lugar del hilo de E/S (bucle de eventos)."

#. type: Title ===
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:218
#, fuzzy, no-wrap
msgid "The gRPC server"
msgstr "El servidor gRPC"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:222
#, fuzzy
msgid "The services are _served_ by a _server_.  Available services (_CDI beans_) are automatically registered and exposed."
msgstr "Los servicios son _servidos_ por un _servidor_ . Los servicios disponibles _(beans CDI_ ) se registran y exponen automáticamente."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:224
msgid "By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:226
#, fuzzy
msgid "Run the application using: `mvn quarkus:dev`."
msgstr "Ejecute la aplicación con: `mvn quarkus:dev`."

#. type: Title ==
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:227
#, fuzzy, no-wrap
msgid "Consuming a gRPC service"
msgstr "Consumir un servicio gRPC"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:231
#, fuzzy
msgid "In this section, we are going to consume the service we expose.  To simplify, we are going to consume the service from the same application, which in the real world, does not make sense."
msgstr "En esta sección, vamos a consumir el servicio que exponemos. Para simplificar, vamos a consumir el servicio desde la misma aplicación, lo que en el mundo real, no tiene sentido."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:233
#, fuzzy
msgid "Open the existing `org.acme.ExampleResource` class, and edit the content to become:"
msgstr "Abra la clase existente `org.acme.ExampleResource`, y edite el contenido para que sea:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:241
#, no-wrap
msgid ""
"import io.quarkus.example.GreeterGrpc;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.runtime.annotations.GrpcService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:248
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:251
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:255
#, no-wrap
msgid ""
"    @Inject\n"
"    @GrpcService(\"hello\")                     // <1>\n"
"    GreeterGrpc.GreeterBlockingStub client;   // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:261
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:268
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{name}\")\n"
"    public String hello(@PathParam(\"name\") String name) {\n"
"        return client.sayHello(HelloRequest.newBuilder().setName(name).build()).getMessage();  // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:271
msgid "Inject the service and configure its name. This name is used in the application configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:272
msgid "Use the _blocking_ stub (also a generated class)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:273
#, fuzzy
msgid "Invoke the service."
msgstr "Invocar el servicio."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:276
#, fuzzy
msgid "We need to configure the application to indicate where the `hello` service is found.  In the `src/main/resources/application.properties` file, add the following property:"
msgstr "Tenemos que configurar la aplicación para que indique dónde se encuentra el servicio `hello` . En el archivo `src/main/resources/application.properties` , añada la siguiente propiedad:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:280
#, no-wrap
msgid "quarkus.grpc.clients.hello.host=localhost\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:283
msgid "`hello` is the name of the service used in the `@GrpcService` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:284
#, fuzzy
msgid "`host` configures the service host (here it's localhost)."
msgstr "`host` configura el host del servicio (aquí es localhost)."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:286
#, fuzzy
msgid "Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!"
msgstr "¡A continuación, abra  http://localhost:8080/hello/quarkus  en un navegador, y debería obtener `Hello quarkus`!"

#. type: Title ==
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:287
#, fuzzy, no-wrap
msgid "Packaging the application"
msgstr "Empaquetar la aplicación"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:291
#, fuzzy
msgid "Like any other Quarkus applications, you can package it with: `mvn package`.  You can also package the application into a native executable with: `mvn package -Pnative`."
msgstr "Como cualquier otra aplicación de Quarkus, puede empaquetarla con: `mvn package` . También puede empaquetar la aplicación en un ejecutable nativo con: `mvn package -Pnative` ."

#. type: Title ==
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:292
#, fuzzy, no-wrap
msgid "Generating Java files from proto with protobuf-maven-plugin"
msgstr "Generación de archivos Java a partir de proto con protobuf-maven-plugin"

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:296
#, fuzzy
msgid "Alternatively to using Quarkus code generation to generate stubs for `proto` files, you can also use `protobuf-maven-plugin`."
msgstr "Como alternativa al uso de la generación de código Quarkus para generar stubs para los archivos `proto` , también puede utilizar `protobuf-maven-plugin` ."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:298
#, fuzzy
msgid "To do it, first define the 2 following properties in the `<properties>` section:"
msgstr "Para ello, defina primero las 2 propiedades siguientes en la sección `<properties>` :"

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:303
#, no-wrap
msgid ""
"<grpc.version>{grpc-version}</grpc.version>\n"
"<protoc.version>{protoc-version}</protoc.version>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:306
#, fuzzy
msgid "They configure the gRPC version and the `protoc` version."
msgstr "Configuran la versión gRPC y la versión `protoc` ."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:308
#, fuzzy
msgid "Then, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration."
msgstr "A continuación, añada a la sección `build` la extensión `os-maven-plugin` y la configuración `protobuf-maven-plugin` ."

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:319
#, no-wrap
msgid ""
"<build>\n"
"    <extensions>\n"
"        <extension>\n"
"            <groupId>kr.motd.maven</groupId>\n"
"            <artifactId>os-maven-plugin</artifactId>\n"
"            <version>${os-maven-plugin-version}</version>\n"
"        </extension>\n"
"    </extensions>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:356
#, no-wrap
msgid ""
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>org.xolstice.maven.plugins</groupId>\n"
"            <artifactId>protobuf-maven-plugin</artifactId>      // <1>\n"
"            <version>${protobuf-maven-plugin-version}</version>\n"
"            <configuration>\n"
"                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}</protocArtifact> // <2>\n"
"                <pluginId>grpc-java</pluginId>\n"
"                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>\n"
"                <protocPlugins>\n"
"                    <protocPlugin>\n"
"                        <id>quarkus-grpc-protoc-plugin</id>\n"
"                        <groupId>io.quarkus</groupId>\n"
"                        <artifactId>quarkus-grpc-protoc-plugin</artifactId>\n"
"                        <version>{quarkus-version}</version>\n"
"                        <mainClass>io.quarkus.grpc.protoc.plugin.MutinyGrpcGenerator</mainClass>\n"
"                    </protocPlugin>\n"
"                </protocPlugins>\n"
"            </configuration>\n"
"            <executions>\n"
"                <execution>\n"
"                    <id>compile</id>\n"
"                    <goals>\n"
"                        <goal>compile</goal>\n"
"                        <goal>compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"                <execution>\n"
"                    <id>test-compile</id>\n"
"                    <goals>\n"
"                        <goal>test-compile</goal>\n"
"                        <goal>test-compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:360
#, no-wrap
msgid ""
"        <!-- ... -->\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:363
#, fuzzy
msgid "The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files)."
msgstr "El `protobuf-maven-plugin` que genera clases stub a partir de su definición de servicio gRPC (archivos `proto` )."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:365
#, fuzzy
msgid "The class generation uses a tool named `protoc`, which is OS-specific.  That's why we use the `os-maven-plugin` to target the executable compatible with the operating system."
msgstr "La generación de clases utiliza una herramienta llamada `protoc` , que es específica del sistema operativo. Por eso utilizamos `os-maven-plugin` para apuntar al ejecutable compatible con el sistema operativo."

#. type: Plain text
#: upstream/_versions/1.11/guides/grpc-getting-started.adoc:366
#, fuzzy
msgid "This configuration instructs the `protobuf-maven-plugin` to generate the default gRPC classes and classes using Mutiny to fit with the Quarkus development experience."
msgstr "Esta configuración indica a `protobuf-maven-plugin` que genere las clases gRPC y las clases por defecto utilizando Mutiny para adaptarse a la experiencia de desarrollo de Quarkus."
