# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-22 09:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:6
#, no-wrap
msgid "Quarkus - Simplified MongoDB with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:13
#, fuzzy
msgid "MongoDB is a well known NoSQL Database that is widely used, but using its raw API can be cumbersome as you need to express your entities and your queries as a MongoDB link:{mongodb-doc-root-url}/bson/documents/#document[`Document`]."
msgstr "MongoDB es una base de datos NoSQL muy conocida y ampliamente utilizada, pero utilizar su API en bruto puede resultar engorroso ya que necesita expresar sus entidades y sus consultas como un MongoDB link:{mongodb-doc-root-url}/bson/documents/#document[Document] ."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:15
msgid "MongoDB with Panache provides active record style entities (and repositories) like you have in link:hibernate-orm-panache[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:17
msgid "It is built on top of the link:mongodb[MongoDB Client] extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:18
#, fuzzy, no-wrap
msgid "First: an example"
msgstr "Primero: un ejemplo"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:21
#, fuzzy
msgid "Panache allows you to write your MongoDB entities like this:"
msgstr "Panache le permite escribir sus entidades MongoDB de esta manera:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:28
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:257
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:32
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:261
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:36
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:265
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:41
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:270
#, no-wrap
msgid ""
"    public static void deleteLoics(){\n"
"        delete(\"name\", \"Loïc\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:45
#, fuzzy
msgid "You have noticed how much more compact and readable the code is compared to using the MongoDB API? Does this look interesting? Read on!"
msgstr "¿Se ha dado cuenta de lo mucho más compacto y legible que es el código en comparación con el uso de la API de MongoDB? ¿Le parece interesante? Siga leyendo."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:49
#, fuzzy
msgid "the `list()` method might be surprising at first. It takes fragments of PanacheQL queries (subset of JPQL) and contextualizes the rest.  That makes for very concise but yet readable code.  MongoDB native queries are also supported."
msgstr "El método `list()` puede sorprender al principio. Toma fragmentos de consultas PanacheQL (subconjunto de JPQL) y contextualiza el resto. Esto hace que el código sea muy conciso pero a la vez legible. También admite consultas nativas de MongoDB."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:52
#, fuzzy
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  MongoDB with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheMongoRepository`."
msgstr "Lo descrito anteriormente es esencialmente el patrón de registro link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[activo] , a veces denominado simplemente patrón de entidad. MongoDB con Panache también permite utilizar el patrón de link:https://martinfowler.com/eaaCatalog/repository.html[repositorio] más clásico a través de `PanacheMongoRepository` ."

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:53
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solución"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:57
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Le recomendamos que siga las instrucciones de las siguientes secciones y cree la aplicación paso a paso. Sin embargo, puede ir directamente al ejemplo completado."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:59
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clone el repositorio Git: `git clone {quickstarts-clone-url}` o descargue un {quickstarts-archive-url}[archivo]."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:61
#, fuzzy
msgid "The solution is located in the `mongodb-panache-quickstart` {quickstarts-tree-url}/mongodb-panache-quickstart[directory]."
msgstr "La solución se encuentra en `mongodb-panache-quickstart` {quickstarts-tree-url}/mongodb-panache-quickstart[directory]."

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:62
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "Creación del proyecto Maven"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:65
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "En primer lugar, necesitamos un nuevo proyecto. Cree un nuevo proyecto con el siguiente comando:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:75
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=mongodb-panache-quickstart \\\n"
"    -DclassName=\"org.acme.mongodb.panache.PersonResource\" \\\n"
"    -Dpath=\"/persons\" \\\n"
"    -Dextensions=\"resteasy,resteasy-jackson,mongodb-panache\"\n"
"cd mongodb-panache-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:79
msgid "This command generates a Maven structure importing the RESTEasy/JAX-RS, Jackson and MongoDB with Panache extensions.  After this, the `quarkus-mongodb-panache` extension has been added to your `pom.xml`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:81
msgid "If you don't want to generate a new project, add the dependency in your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:88
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-mongodb-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:90
#, fuzzy, no-wrap
msgid "Setting up and configuring MongoDB with Panache"
msgstr "Instalación y configuración de MongoDB con Panache"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:93
#, fuzzy
msgid "To get started:"
msgstr "Para empezar:"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:95
#, fuzzy
msgid "add your settings in `{config-file}`"
msgstr "añada su configuración en `{config-file}`"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:96
#, fuzzy
msgid "Make your entities extend `PanacheMongoEntity` (optional if you are using the repository pattern)"
msgstr "Haga que sus entidades extiendan `PanacheMongoEntity` (opcional si está utilizando el patrón de repositorio)"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:97
#, fuzzy
msgid "Optionally, use the `@MongoEntity` annotation to specify the name of the collection, the name of the database or the name of the client."
msgstr "Opcionalmente, utilice la anotación `@MongoEntity` para especificar el nombre de la colección, el nombre de la base de datos o el nombre del cliente."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:99
#, fuzzy
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "A continuación, añada las propiedades de configuración pertinentes en `{config-file}`."

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:106
#, no-wrap
msgid ""
"# configure the MongoDB client for a replica set of two nodes\n"
"quarkus.mongodb.connection-string = mongodb://mongo1:27017,mongo2:27017\n"
"# mandatory if you don't specify the name of the database using @MongoEntity\n"
"quarkus.mongodb.database = person\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:109
#, fuzzy
msgid "The `quarkus.mongodb.database` property will be used by MongoDB with Panache to determine the name of the database where your entities will be persisted (if not overridden by `@MongoEntity`)."
msgstr "La propiedad `quarkus.mongodb.database` será utilizada por MongoDB con Panache para determinar el nombre de la base de datos donde se persistirán sus entidades (si no es anulada por `@MongoEntity`)."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:111
#, fuzzy
msgid "The `@MongoEntity` annotation allows configuring:"
msgstr "La anotación `@MongoEntity` permite configurar:"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:113
msgid "the name of the client for multi-tenant application, see link:mongodb#multiple-mongodb-clients[Multiple MongoDB Clients]. Otherwise, the default client will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:114
#, fuzzy
msgid "the name of the database, otherwise, the `quarkus.mongodb.database` property will be used."
msgstr "el nombre de la base de datos; en caso contrario, se utilizará la propiedad `quarkus.mongodb.database` ."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:115
#, fuzzy
msgid "the name of the collection, otherwise the simple name of the class will be used."
msgstr "el nombre de la colección, de lo contrario se utilizará el nombre simple de la clase."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:117
msgid "For advanced configuration of the MongoDB client, you can follow the link:mongodb#configuring-the-mongodb-database[Configuring the MongoDB database guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:118
#, fuzzy, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "Solución 1: utilizar el patrón de registro activo"

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:120
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:274
#, fuzzy, no-wrap
msgid "Defining your entity"
msgstr "Definir su entidad"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:124
#, fuzzy
msgid "To define a Panache entity, simply extend `PanacheMongoEntity` and add your columns as public fields.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "Para definir una entidad Panache, sólo tiene que ampliar `PanacheMongoEntity` y añadir sus columnas como campos públicos. Puede añadir la anotación `@MongoEntity` a su entidad si necesita personalizar el nombre de la colección, la base de datos o el cliente."

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:130
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:134
#, no-wrap
msgid ""
"    // will be persisted as a 'birth' field in MongoDB\n"
"    @BsonProperty(\"birth\")\n"
"    public LocalDate birthDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:137
#, no-wrap
msgid ""
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:140
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:291
#, fuzzy
msgid "Annotating with `@MongoEntity` is optional. Here the entity will be stored in the `ThePerson` collection instead of the default `Person` collection."
msgstr "Anotar con `@MongoEntity` es opcional. Aquí la entidad se almacenará en la colección `ThePerson` en lugar de la colección por defecto `Person`."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:142
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:293
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/bson/pojos/[PojoCodecProvider] to map your entities to a MongoDB `Document`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:144
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:295
#, fuzzy
msgid "You will be allowed to use the following annotations to customize this mapping:"
msgstr "Podrá utilizar las siguientes anotaciones para personalizar esta asignación:"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:146
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:297
#, fuzzy
msgid "`@BsonId`: allows you to customize the ID field, see <<custom-ids,Custom IDs>>."
msgstr "`@BsonId` : le permite personalizar el campo ID, véase xref:custom-ids[ID personalizados] ."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:147
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:298
#, fuzzy
msgid "`@BsonProperty`: customize the serialized name of the field."
msgstr "`@BsonProperty`: personaliza el nombre serializado del campo."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:148
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:299
#, fuzzy
msgid "`@BsonIgnore`: ignore a field during the serialization."
msgstr "`@BsonIgnore`: ignorar un campo durante la serialización."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:150
#, fuzzy
msgid "If you need to write accessors, you can:"
msgstr "Si necesitas escribir accesorios, puedes hacerlo:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:154
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:913
#, no-wrap
msgid "public class Person extends PanacheMongoEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:159
#, no-wrap
msgid ""
"    @JsonProperty\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:164
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:797
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:170
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:803
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:174
#, fuzzy
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "Y gracias a nuestra reescritura de accesos a campos, cuando sus usuarios lean `person.name` llamarán en realidad a su accesor `getName()` , y de forma similar para las escrituras de campos y el setter. Esto permite un encapsulamiento adecuado en tiempo de ejecución, ya que todas las llamadas a los campos serán sustituidas por las correspondientes llamadas al getter/setter."

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:175
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:343
#, fuzzy, no-wrap
msgid "Most useful operations"
msgstr "Operaciones más útiles"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:178
#, fuzzy
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "Una vez que haya escrito su entidad, estas son las operaciones más comunes que podrá realizar:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:186
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:354
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Loïc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:189
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:191
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:359
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:823
#, no-wrap
msgid "person.status = Status.Dead;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:194
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:197
#, no-wrap
msgid ""
"// delete it\n"
"person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:200
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:205
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:209
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:212
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:215
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:218
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:221
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:224
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:227
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:230
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = Person.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:233
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:401
msgid "All `list` methods have equivalent `stream` versions."
msgstr "Todos los métodos de `list` tienen versiones equivalentes de `stream`."

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:241
#, no-wrap
msgid ""
"Stream<Person> persons = Person.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:244
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:412
#, fuzzy
msgid "A `persistOrUpdate()` method exist that persist or update an entity in the database, it uses the __upsert__ capability of MongoDB to do it in a single query."
msgstr "Existe un método `persistOrUpdate()` que persiste o actualiza una entidad en la base de datos, utiliza la capacidad de _upsert_ de MongoDB para hacerlo en una sola consulta."

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:245
#, fuzzy, no-wrap
msgid "Adding entity methods"
msgstr "Añadir métodos de entidad"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:250
#, fuzzy
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "Añada consultas personalizadas sobre sus entidades dentro de las propias entidades. De ese modo, usted y sus colaboradores podrán encontrarlas fácilmente, y las consultas estarán ubicadas junto al objeto sobre el que operan. Añadirlas como métodos estáticos en su clase de entidad es la manera Panache Active Record."

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:272
#, fuzzy, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "Solución 2: utilizar el patrón de repositorio"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:278
#, fuzzy
msgid "You can define your entity as regular POJO.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "Puede definir su entidad como un POJO normal. Puede añadir la anotación `@MongoEntity` a su entidad si necesita personalizar el nombre de la colección, la base de datos o el cliente."

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:288
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person  {\n"
"    public ObjectId id; // used by MongoDB for the _id field\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:302
#, fuzzy
msgid "You can use public fields or private fields with getters/setters.  If you don't want to manage the ID by yourself, you can make your entity extends `PanacheMongoEntity`."
msgstr "Puede utilizar campos públicos o campos privados con getters/setters. Si no desea gestionar el ID por sí mismo, puede hacer que su entidad extienda `PanacheMongoEntity` ."

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:303
#, fuzzy, no-wrap
msgid "Defining your repository"
msgstr "Definir el repositorio"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:307
#, fuzzy
msgid "When using Repositories, you can get the exact same convenient methods as wit the active record pattern, injected in your Repository, by making them implements `PanacheMongoRepository`:"
msgstr "Cuando utilice Repositorios, puede obtener exactamente los mismos métodos convenientes que con el patrón de registro activo, inyectados en su Repositorio, haciendo que implementen `PanacheMongoRepository` :"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:312
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:314
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:318
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:322
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:327
#, no-wrap
msgid ""
"   public void deleteLoics(){\n"
"       delete(\"name\", \"Loïc\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:331
#, fuzzy
msgid "All the operations that are defined on `PanacheMongoEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "Todas las operaciones que se definen en `PanacheMongoEntityBase` están disponibles en su repositorio, por lo que utilizarlo es exactamente igual que utilizar el patrón de registro activo, salvo que necesita inyectarlo:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:336
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:341
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:346
#, fuzzy
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "Una vez que haya escrito su repositorio, estas son las operaciones más comunes que podrá realizar:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:357
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:362
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"personRepository.update(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:365
#, no-wrap
msgid ""
"// delete it\n"
"personRepository.delete(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:368
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:373
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:377
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:380
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:383
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:386
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:389
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:392
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:395
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:398
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = personRepository.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:409
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:416
#, fuzzy
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "El resto de la documentación muestra usos basados únicamente en el patrón de registro activo, pero tenga en cuenta que también pueden realizarse con el patrón de repositorio. Los ejemplos del patrón de repositorio se han omitido por brevedad."

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:418
#, fuzzy, no-wrap
msgid "Advanced Query"
msgstr "Consulta avanzada"

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:420
#, fuzzy, no-wrap
msgid "Paging"
msgstr "Paging"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:424
#, fuzzy
msgid "You should only use `list` and `stream` methods if your collection contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "Sólo debe utilizar los métodos `list` y `stream` si su colección contiene conjuntos de datos lo suficientemente pequeños. Para conjuntos de datos más grandes puede utilizar los equivalentes del método `find` , que devuelven un `PanacheQuery` sobre el que puede realizar la paginación:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:429
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:465
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:432
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:435
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:438
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:441
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:444
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:447
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"int count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:453
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:456
#, fuzzy
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "El tipo `PanacheQuery` tiene muchos otros métodos para tratar la paginación y la devolución de flujos."

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:457
#, fuzzy, no-wrap
msgid "Using a range instead of pages"
msgstr "Utilizar un rango en lugar de páginas"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:460
#, fuzzy
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` también permite realizar consultas basadas en rangos."

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:468
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:471
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:474
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:480
#, fuzzy
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "No puede mezclar rangos y páginas: si utiliza un rango, todos los métodos que dependan de tener una página actual lanzarán un `UnsupportedOperationException` ; puede volver a la paginación utilizando `page(Page)` o `page(int, int)` ."

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:482
#, fuzzy, no-wrap
msgid "Sorting"
msgstr "Clasificación"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:485
#, fuzzy
msgid "All methods accepting a query string also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "Todos los métodos que aceptan una cadena de consulta también aceptan un parámetro opcional `Sort`, que permite abstraer la ordenación:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:489
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:492
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:495
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "La clase `Sort` tiene muchos métodos para añadir columnas y especificar la dirección de la ordenación."

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:496
#, fuzzy, no-wrap
msgid "Simplified queries"
msgstr "Consultas simplificadas"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:499
#, fuzzy
msgid "Normally, MongoDB queries are of this form: `{'firstname': 'John', 'lastname':'Doe'}`, this is what we call MongoDB native queries."
msgstr "Normalmente, las consultas a MongoDB son de esta forma: `{'firstname': 'John', 'lastname':'Doe'}`, esto es lo que llamamos consultas nativas de MongoDB."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:502
#, fuzzy
msgid "You can use them if you want, but we also support what we call **PanacheQL** that can be seen as a subset of link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (or link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]) and allows you to easily express a query.  MongoDB with Panache will then map it to a MongoDB native query."
msgstr "Puede utilizarlos si lo desea, pero también soportamos lo que llamamos *PanacheQL* que puede verse como un subconjunto de link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (o link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL] ) y le permite expresar fácilmente una consulta. MongoDB con Panache lo mapeará entonces a una consulta nativa de MongoDB."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:504
#, fuzzy
msgid "If your query does not start with `{`, we will consider it a PanacheQL query:"
msgstr "Si su consulta no comienza con `{`, la consideraremos una consulta PanacheQL:"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:506
#, fuzzy
msgid "`<singlePropertyName>` (and single parameter) which will expand to `{'singleColumnName': '?1'}`"
msgstr "`&amp;lt;singlePropertyName&amp;gt;` (y un solo parámetro) que se expandirá a `{'singleColumnName': '?1'}`"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:507
#, fuzzy
msgid "`<query>` will expand to `{<query>}` where we will map the PanacheQL query to MongoDB native query form. We support the following operators that will be mapped to the corresponding MongoDB operators: 'and', 'or' ( mixing 'and' and 'or' is not currently supported), '=', '>', '>=', '<', '<=', '!=', 'is null', 'is not null', and 'like' that is mapped to the MongoDB `$regex` operator (both String and JavaScript patterns are supported)."
msgstr "`&amp;lt;query&amp;gt;` se expandirá a `{&amp;lt;query&amp;gt;}` donde mapearemos la consulta de PanacheQL a la forma de consulta nativa de MongoDB. Soportamos los siguientes operadores que serán mapeados a los correspondientes operadores de MongoDB: 'and', 'or' ( la mezcla de 'and' y 'or' no está soportada actualmente), '=', '&gt;', '&gt;=', '&lt;', '⇐', '!=', 'is null', 'is not null', y 'like' que se mapea al operador de MongoDB `$regex` (se soportan tanto patrones String como JavaScript)."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:509
#, fuzzy
msgid "Here are some query examples:"
msgstr "He aquí algunos ejemplos de consultas:"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:511
#, fuzzy
msgid "`firstname = ?1 and status = ?2` will be mapped to `{'firstname': ?1, 'status': ?2}`"
msgstr "`firstname = ?1 and status = ?2` se asignará a `{'firstname': ?1, 'status': ?2}`"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:512
#, fuzzy
msgid "`amount > ?1 and firstname != ?2` will be mapped to `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"
msgstr "`amount &amp;gt; ?1 and firstname != ?2` se asignará a `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:513
#, fuzzy
msgid "`lastname like ?1` will be mapped to `{'lastname': {'$regex': ?1}}`. Be careful that this will be link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB regex] support and not SQL like pattern."
msgstr "`lastname like ?1` se asignará a `{'lastname': {'$regex': ?1}}`. Tenga cuidado de que esto será el soporte  link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[regex de MongoDB] y no el patrón SQL."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:514
#, fuzzy
msgid "`lastname is not null` will be mapped to `{'lastname':{'$exists': true}}`"
msgstr "`lastname is not null` se asignará a `{'lastname':{'$exists': true}}`"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:515
#, fuzzy
msgid "`status in ?1` will be mapped to `{'status':{$in: [?1]}}`"
msgstr "`status in ?1` se asignará a `{'status':{$in: [?1]}}`"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:519
msgid "We also handle some basic date type transformations: all fields of type `Date`, `LocalDate`, `LocalDateTime` or `Instant` will be mapped to the link:https://docs.mongodb.com/manual/reference/bson-types/#document-bson-type-date[BSON Date] using the `ISODate` type (UTC datetime).  The MongoDB POJO codec doesn't support `ZonedDateTime` and `OffsetDateTime` so you should convert them prior usage."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:521
#, fuzzy
msgid "MongoDB with Panache also supports extended MongoDB queries by providing a `Document` query, this is supported by the find/list/stream/count/delete methods."
msgstr "MongoDB con Panache también soporta consultas extendidas de MongoDB proporcionando una consulta `Document` , esto es soportado por los métodos find/list/stream/count/delete."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:524
#, fuzzy
msgid "MongoDB with Panache offers operations to update multiple documents based on an update document and a query : `Person.update(\"foo = ?1, bar = ?2\", fooName, barName).where(\"name = ?1\", name)`."
msgstr "MongoDB con Panache ofrece operaciones para actualizar múltiples documentos basadas en un documento de actualización y una consulta : `Person.update(\"foo = ?1, bar = ?2\", fooName, barName).where(\"name = ?1\", name)` ."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:526
#, fuzzy
msgid "For these operations, you can express the update document the same way you express your queries, here are some examples:"
msgstr "Para estas operaciones, puede expresar el documento de actualización de la misma manera que expresa sus consultas, aquí hay algunos ejemplos:"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:528
#, fuzzy
msgid "`<singlePropertyName>` (and single parameter) which will expand to the update document `{'$set' : {'singleColumnName': '?1'}}`"
msgstr "`&amp;lt;singlePropertyName&amp;gt;` (y un único parámetro) que se expandirá al documento de actualización `{'$set' : {'singleColumnName': '?1'}}`"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:529
#, fuzzy
msgid "`firstname = ?1, status = ?2` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`firstname = ?1, status = ?2` se asignará al documento de actualización `{'$set' : {'firstname': ?1, 'status': ?2}}`"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:530
#, fuzzy
msgid "`firstname = :firstname, status = :status` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`firstname = :firstname, status = :status` se asignará al documento de actualización `{'$set' : {'firstname': :firstname, 'status': :status}}`"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:531
#, fuzzy
msgid "`{'firstname' : ?1, 'status' : ?2}` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`{'firstname' : ?1, 'status' : ?2}` se asignará al documento de actualización `{'$set' : {'firstname': ?1, 'status': ?2}}`"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:532
#, fuzzy
msgid "`{'firstname' : firstname, 'status' : :status}` ` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`{'firstname' : firstname, 'status' : :status}` ` se asignará al documento de actualización `{'$set' : {'firstname': :firstname, 'status': :status}}`"

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:533
#, fuzzy, no-wrap
msgid "Query parameters"
msgstr "Parámetros de consulta"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:536
#, fuzzy
msgid "You can pass query parameters, for both native and PanacheQL queries, by index (1-based) as shown below:"
msgstr "Puede pasar los parámetros de consulta, tanto para las consultas nativas como para las de PanacheQL, por índice (basado en 1) como se muestra a continuación:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:541
#, no-wrap
msgid ""
"Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive);\n"
"Person.find(\"{'name': ?1, 'status': ?2}\", \"Loïc\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:544
#, fuzzy
msgid "Or by name using a `Map`:"
msgstr "O por el nombre utilizando un `Map`:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:552
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"Loïc\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
"Person.find(\"{'name': :name, 'status', :status}\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:555
#, fuzzy
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "O utilizando la clase de conveniencia `Parameters` ya sea tal cual o para construir un `Map`:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:561
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"Loïc\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:565
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"{'name': :name, 'status': :status}\",\n"
"         Parameters.with(\"name\", \"Loïc\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:568
#, fuzzy
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "Cada operación de consulta acepta el paso de parámetros por índice ( `Object…​`), o por nombre ( `Map&amp;lt;String,Object&amp;gt;` o `Parameters`)."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:570
#, fuzzy
msgid "When you use query parameters, be careful that PanacheQL queries will refer to the Object parameters name but native queries will refer to MongoDB field names."
msgstr "Cuando utilices parámetros de consulta, ten en cuenta que las consultas de PanacheQL se referirán al nombre de los parámetros del objeto pero las consultas nativas se referirán a los nombres de los campos de MongoDB."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:572
#, fuzzy
msgid "Imagine the following entity:"
msgstr "Imagina la siguiente entidad:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:580
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    @BsonProperty(\"lastname\")\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:584
#, no-wrap
msgid ""
"    public static Person findByNameWithPanacheQLQuery(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:589
#, no-wrap
msgid ""
"    public static Person findByNameWithNativeQuery(String name){\n"
"        return find(\"{'lastname': ?1}\", name).firstResult();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:593
#, fuzzy
msgid "Both `findByNameWithPanacheQLQuery()` and `findByNameWithNativeQuery()` methods will return the same result but query written in PanacheQL will use the entity field name: `name`, and native query will use the MongoDB field name: `lastname`."
msgstr "Ambos métodos `findByNameWithPanacheQLQuery()` y `findByNameWithNativeQuery()` devolverán el mismo resultado, pero la consulta escrita en PanacheQL utilizará el nombre de campo de la entidad: `name` , y la consulta nativa utilizará el nombre de campo de MongoDB: `lastname` ."

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:594
#, fuzzy, no-wrap
msgid "Query projection"
msgstr "Proyección de la consulta"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:597
#, fuzzy
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "La proyección de la consulta puede realizarse con el método `project(Class)` sobre el objeto `PanacheQuery` que es devuelto por los métodos `find()`."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:600
#, fuzzy
msgid "You can use it to restrict which fields will be returned by the database, the ID field will always be returned, but it's not mandatory to include it inside the projection class."
msgstr "Puede utilizarlo para restringir qué campos serán devueltos por la base de datos, el campo ID siempre será devuelto, pero no es obligatorio incluirlo dentro de la clase de proyección."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:604
#, fuzzy
msgid "For this, you need to create a class (a POJO) that will only contain the projected fields.  This POJO needs to be annotated with `@ProjectionFor(Entity.class)` where `Entity` is the name of your entity class.  The field names, or getters, of the projection class will be used to restrict which properties will be loaded from the database."
msgstr "Para ello, necesita crear una clase (un POJO) que sólo contenga los campos proyectados. Este POJO necesita ser anotado con `@ProjectionFor(Entity.class)` donde `Entity` es el nombre de su clase de entidad. Los nombres de los campos, o getters, de la clase de proyección se utilizarán para restringir qué propiedades se cargarán desde la base de datos."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:606
#, fuzzy
msgid "Projection can be done for both PanacheQL and native queries."
msgstr "La proyección puede hacerse tanto para PanacheQL como para las consultas nativas."

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:611
#, no-wrap
msgid ""
"import io.quarkus.mongodb.panache.ProjectionFor;\n"
"import org.bson.codecs.pojo.annotations.BsonProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:617
#, no-wrap
msgid ""
"// using public fields\n"
"@ProjectionFor(Person.class)\n"
"public class PersonName {\n"
"    public String name;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:622
#, no-wrap
msgid ""
"// using getters\n"
"@ProjectionFor(Person.class)\n"
"public class PersonNameWithGetter {\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:626
#, no-wrap
msgid ""
"    public String getName(){\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:631
#, no-wrap
msgid ""
"    public void setName(String name){\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:636
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> shortQuery = Person.find(\"status \", Status.Alive).project(PersonName.class);\n"
"PanacheQuery<PersonName> query = Person.find(\"'status': ?1\", Status.Alive).project(PersonNameWithGetter.class);\n"
"PanacheQuery<PersonName> nativeQuery = Person.find(\"{'status': 'ALIVE'}\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:639
#, fuzzy
msgid "Using `@BsonProperty` is not needed to define custom column mappings, as the mappings from the entity class will be used."
msgstr "El uso de `@BsonProperty` no es necesario para definir mapeos de columna personalizados, ya que se utilizarán los mapeos de la clase de entidad."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:641
#, fuzzy
msgid "You can have your projection class extends from another class. In this case, the parent class also needs to have use `@ProjectionFor` annotation."
msgstr "Puedes hacer que tu clase de proyección extienda de otra clase. En este caso, la clase padre también necesita tener la anotación use `@ProjectionFor`."

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:642
#, fuzzy, no-wrap
msgid "Query debugging"
msgstr "Depuración de consultas"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:645
#, fuzzy
msgid "As MongoDB with Panache allows writing simplified queries, it is sometimes handy to log the generated native queries for debugging purpose."
msgstr "Como MongoDB con Panache permite escribir consultas simplificadas, a veces es útil registrar las consultas nativas generadas con fines de depuración."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:647
#, fuzzy
msgid "This can be achieved by setting to DEBUG the following log category inside your `application.properties`:"
msgstr "Esto se puede lograr estableciendo en DEBUG la siguiente categoría de registro dentro de su `application.properties`:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:651
#, no-wrap
msgid "quarkus.log.category.\"io.quarkus.mongodb.panache.runtime\".level=DEBUG\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:653
#, fuzzy, no-wrap
msgid "Transactions"
msgstr "Transacciones"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:656
msgid "MongoDB offers ACID transactions since version 4.0. MongoDB with Panache doesn't provide support for them."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:657
#, fuzzy, no-wrap
msgid "Custom IDs"
msgstr "Identificaciones personalizadas"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:662
#, fuzzy
msgid "IDs are often a touchy subject. In MongoDB, they are usually auto-generated by the database with an `ObjectId` type.  In MongoDB with Panache the ID are defined by a field named `id` of the `org.bson.types.ObjectId` type, but if you want to customize them, once again we have you covered."
msgstr "Los identificadores suelen ser un tema delicado. En MongoDB, suelen ser autogenerados por la base de datos con un tipo `ObjectId` . En MongoDB con Panache los ID se definen mediante un campo llamado `id` del tipo `org.bson.types.ObjectId` , pero si desea personalizarlos, una vez más le tenemos cubierto."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:665
#, fuzzy
msgid "You can specify your own ID strategy by extending `PanacheMongoEntityBase` instead of `PanacheMongoEntity`. Then you just declare whatever ID you want as a public field by annotating it by `@BsonId`:"
msgstr "Puede especificar su propia estrategia de ID ampliando `PanacheMongoEntityBase` en lugar de `PanacheMongoEntity` . A continuación, sólo tiene que declarar el ID que desee como campo público anotándolo mediante `@BsonId` :"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:670
#, no-wrap
msgid ""
"@MongoEntity\n"
"public class Person extends PanacheMongoEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:673
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Integer myId;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:676
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:680
#, fuzzy
msgid "If you're using repositories, then you will want to extend `PanacheMongoRepositoryBase` instead of `PanacheMongoRepository` and specify your ID type as an extra type parameter:"
msgstr "Si utiliza repositorios, entonces querrá ampliar `PanacheMongoRepositoryBase` en lugar de `PanacheMongoRepository` y especificar su tipo de ID como un parámetro de tipo adicional:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:687
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:693
#, fuzzy
msgid "When using `ObjectId`, MongoDB will automatically provide a value for you, but if you use a custom field type, you need to provide the value by yourself."
msgstr "Si utiliza `ObjectId` , MongoDB le proporcionará automáticamente un valor, pero si utiliza un tipo de campo personalizado, deberá proporcionar el valor usted mismo."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:697
#, fuzzy
msgid "`ObjectId` can be difficult to use if you want to expose its value in your REST service.  So we created Jackson and JSON-B providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on either the RESTEasy Jackson extension or the RESTEasy JSON-B extension."
msgstr "`ObjectId` puede ser difícil de utilizar si desea exponer su valor en su servicio REST. Así que hemos creado proveedores Jackson y JSON-B para serializarlos/deserializarlos como `String` que se registran automáticamente si su proyecto depende de la extensión RESTEasy Jackson o de la extensión RESTEasy JSON-B."

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:701
#, fuzzy
msgid "If you use the standard `ObjectId` ID type, don't forget to retrieve your entity by creating a new `ObjectId` when the identifier comes from a path parameter. For example:"
msgstr "Si utiliza el tipo de identificador estándar `ObjectId`, no olvide recuperar su entidad creando un nuevo `ObjectId` cuando el identificador provenga de un parámetro de ruta. Por ejemplo:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:709
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{id}\")\n"
"public Person findById(@PathParam(\"id\") String id) {\n"
"    return Person.findById(new ObjectId(id));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:712
#, fuzzy, no-wrap
msgid "Working with Kotlin Data classes"
msgstr "Trabajar con clases de datos Kotlin"

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:715
#, fuzzy
msgid "Kotlin data classes are a very convenient way of defining data carrier classes, making them a great match to define an entity class."
msgstr "Las clases de datos de Kotlin son una forma muy conveniente de definir clases portadoras de datos, lo que las convierte en una gran opción para definir una clase de entidad."

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:718
#, fuzzy
msgid "But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked as nullable, and the generated constructor needs to have as parameters all the fields of the data class."
msgstr "Pero este tipo de clase tiene algunas limitaciones: todos los campos deben inicializarse en el momento de la construcción o marcarse como anulables, y el constructor generado debe tener como parámetros todos los campos de la clase de datos."

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:720
msgid "MongoDB with Panache uses the `PojoCodec`, a MongoDB codec which mandates the presence of a parameterless constructor."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:724
#, fuzzy
msgid "Therefore, if you want to use a data class as an entity class, you need a way to make Kotlin generate an empty constructor.  To do so, you need to provide default values for all the fields of your classes.  The following sentence from the Kotlin documentation explains it:"
msgstr "Por lo tanto, si desea utilizar una clase de datos como clase de entidad, necesita una forma de hacer que Kotlin genere un constructor vacío. Para ello, necesita proporcionar valores por defecto para todos los campos de sus clases. La siguiente frase de la documentación de Kotlin lo explica:"

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:726
#, fuzzy
msgid "__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__"
msgstr "_En la JVM, si la clase generada necesita tener un constructor sin parámetros, hay que especificar valores por defecto para todas las propiedades (ver Constructores)._"

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:728
#, fuzzy
msgid "If for whatever reason, the aforementioned solution is deemed unacceptable, there are alternatives."
msgstr "Si, por cualquier motivo, la solución mencionada se considera inaceptable, existen alternativas."

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:731
msgid "First, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the `PojoCodec`.  See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:734
msgid "Another option is to use the `@BsonCreator` annotation to tell the `PojoCodec` to use the Kotlin data class default constructor, in this case all constructor parameters have to be annotated with `@BsonProperty`: see link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:736
#, fuzzy
msgid "This will only work when the entity extends `PanacheMongoEntityBase` and not `PanacheMongoEntity`, as the ID field also needs to be included in the constructor."
msgstr "Esto sólo funcionará cuando la entidad extienda a `PanacheMongoEntityBase` y no a `PanacheMongoEntity`, ya que el campo ID también debe incluirse en el constructor."

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:738
#, fuzzy
msgid "An example of a `Person` class defined as a Kotlin data class would look like:"
msgstr "Un ejemplo de una clase `Person` definida como una clase de datos Kotlin tendría el siguiente aspecto:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:747
#, no-wrap
msgid ""
"data class Person @BsonCreator constructor (\n"
"    @BsonId var id: ObjectId,\n"
"    @BsonProperty(\"name\") var name: String,\n"
"    @BsonProperty(\"birth\") var birth: LocalDate,\n"
"    @BsonProperty(\"status\") var status: Status\n"
"): PanacheMongoEntityBase()\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:752
#, fuzzy
msgid "Here we use `var` but note that `val` can also be used."
msgstr "Aquí utilizamos `var` pero tenga en cuenta que también se puede utilizar `val`."

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:754
#, fuzzy
msgid "The `@BsonId` annotation is used instead of `@BsonProperty(\"_id\")` for brevity's sake, but use of either is valid."
msgstr "La anotación `@BsonId` se utiliza en lugar de `@BsonProperty(\"_id\")` por razones de brevedad, pero el uso de cualquiera de ellas es válido."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:758
#, fuzzy
msgid "The last option is to the use the link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg] compiler plugin.  This plugin is configured with a list of annotations, and the end result is the generation of no-args constructor for each class annotated with them."
msgstr "La última opción es utilizar el plugin de compilador link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-args] . Este plugin se configura con una lista de anotaciones, y el resultado final es la generación de constructores no-args para cada clase anotada con ellas."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:760
#, fuzzy
msgid "For MongoDB with Panache, you could use the `@MongoEntity` annotation on your data class for this:"
msgstr "En el caso de MongoDB con Panache, puede utilizar la anotación `@MongoEntity` en su clase de datos para ello:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:769
#, no-wrap
msgid ""
"@MongoEntity\n"
"data class Person (\n"
"    var name: String,\n"
"    var birth: LocalDate,\n"
"    var status: Status\n"
"): PanacheMongoEntity()\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:772
#, fuzzy, no-wrap
msgid "Reactive Entities and Repositories"
msgstr "Entidades reactivas y repositorios"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:777
#, fuzzy
msgid "MongoDB with Panache allows using reactive style implementation for both entities and repositories.  For this, you need to use the Reactive variants when defining your entities : `ReactivePanacheMongoEntity` or `ReactivePanacheMongoEntityBase`, and when defining your repositories: `ReactivePanacheMongoRepository` or `ReactivePanacheMongoRepositoryBase`."
msgstr "MongoDB con Panache permite utilizar una implementación de estilo reactivo tanto para las entidades como para los repositorios. Para ello, debe utilizar las variantes reactivas al definir sus entidades : `ReactivePanacheMongoEntity` o `ReactivePanacheMongoEntityBase` , y al definir sus repositorios: `ReactivePanacheMongoRepository` o `ReactivePanacheMongoRepositoryBase` ."

#. type: Block title
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:779
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "Motín"

#. type: delimited block =
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:782
msgid "The reactive API of the MongoDB with Panache uses Mutiny reactive types, if you're not familiar with them, read the link:getting-started-reactive#mutiny[Getting Started with Reactive guide] first."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:785
#, fuzzy
msgid "The reactive variant of the `Person` class will be:"
msgstr "La variante reactiva de la clase `Person` será:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:792
#, no-wrap
msgid ""
"public class ReactivePerson extends ReactivePanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:807
#, fuzzy
msgid "You will have access to the same functionalities of the _imperative_ variant inside the reactive one: bson annotations, custom ID, PanacheQL, ...  But the methods on your entities or repositories will all return reactive types."
msgstr "Tendrá acceso a las mismas funcionalidades de la variante _imperativa_ dentro de la reactiva: anotaciones bson, ID personalizado, PanacheQL, ... Pero los métodos sobre sus entidades o repositorios devolverán todos tipos reactivos."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:809
#, fuzzy
msgid "See the equivalent methods from the imperative example with the reactive variant:"
msgstr "Vea los métodos equivalentes del ejemplo imperativo con la variante reactiva:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:817
#, no-wrap
msgid ""
"// creating a person\n"
"ReactivePerson person = new ReactivePerson();\n"
"person.name = \"Loïc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:821
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver,\n"
"// and accessible when uni1 will be resolved\n"
"Uni<Void> uni1 = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:826
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"Uni<Void> uni2 = person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:829
#, no-wrap
msgid ""
"// delete it\n"
"Uni<Void> uni3 = person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:832
#, no-wrap
msgid ""
"// getting a list of all persons\n"
"Uni<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:837
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"Uni<ReactivePerson> personById = ReactivePerson.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:841
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Uni<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n"
"personById = optional.map(o -> o.orElseThrow(() -> new NotFoundException()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:844
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:847
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = ReactivePerson.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:850
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:853
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:856
#, no-wrap
msgid ""
"// delete all persons\n"
"deleteCount = ReactivePerson.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:859
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleted = ReactivePerson.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:862
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Long> updated = ReactivePerson.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:865
#, fuzzy
msgid "If you use MongoDB with Panache in conjunction with RESTEasy, you can directly return a reactive type inside your JAX-RS resource endpoint as long as you include the `quarkus-resteasy-mutiny` extension."
msgstr "Si utiliza MongoDB con Panache junto con RESTEasy, puede devolver directamente un tipo reactivo dentro de su punto final de recursos JAX-RS siempre que incluya la extensión `quarkus-resteasy-mutiny` ."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:867
#, fuzzy
msgid "The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a `Multi` (which implement a reactive stream `Publisher`) instead of a `Stream`."
msgstr "Existe la misma facilidad de consulta para los tipos reactivos, pero los métodos `stream()` actúan de forma diferente: devuelven un `Multi` (que implementa un flujo reactivo `Publisher` ) en lugar de un `Stream` ."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:869
#, fuzzy
msgid "It allows more advanced reactive use cases, for example, you can use it to send server-sent events (SSE) via RESTEasy:"
msgstr "Permite casos de uso reactivo más avanzados, por ejemplo, puede utilizarlo para enviar eventos enviados por el servidor (SSE) a través de RESTEasy:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:877
#, no-wrap
msgid ""
"import org.jboss.resteasy.annotations.SseElementType;\n"
"import org.reactivestreams.Publisher;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:885
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/stream\")\n"
"@Produces(MediaType.SERVER_SENT_EVENTS)\n"
"@SseElementType(MediaType.APPLICATION_JSON)\n"
"public Multi<ReactivePerson> streamPersons() {\n"
"    return ReactivePerson.streamAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:888
#, fuzzy
msgid "`@SseElementType(MediaType.APPLICATION_JSON)` tells RESTEasy to serialize the object in JSON."
msgstr "`@SseElementType(MediaType.APPLICATION_JSON)` indica a RESTEasy que serialice el objeto en JSON."

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:889
#, fuzzy, no-wrap
msgid "Mocking"
msgstr "Burlándose de"

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:891
#, fuzzy, no-wrap
msgid "Using the active-record pattern"
msgstr "Uso del patrón de registro activo"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:896
#, fuzzy
msgid "If you are using the active-record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "Si está utilizando el patrón de registro activo, no puede utilizar Mockito directamente, ya que no admite la burla de métodos estáticos, pero puede utilizar el módulo `quarkus-panache-mock` , que le permite utilizar Mockito para burlarse de todos los métodos estáticos proporcionados, incluidos los suyos propios."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:898
#, fuzzy
msgid "Add this dependency to your `pom.xml`:"
msgstr "Añada esta dependencia a su `pom.xml`:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:906
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:909
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:989
#, fuzzy
msgid "Given this simple entity:"
msgstr "Dada esta simple entidad:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:915
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:920
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:923
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1014
#, fuzzy
msgid "You can write your mocking test like this:"
msgstr "Puedes escribir tu prueba de burla así:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:928
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:932
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:935
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:939
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:943
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:947
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:950
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:956
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:960
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:964
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:970
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:973
#, fuzzy
msgid "Be sure to call your `verify` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "Asegúrese de llamar a sus métodos `verify` en `PanacheMock` en lugar de `Mockito` , de lo contrario no sabrá qué objeto simulado pasar."

#. type: Title ===
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:974
#, fuzzy, no-wrap
msgid "Using the repository pattern"
msgstr "Uso del patrón de repositorio"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:978
#, fuzzy
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "Si está utilizando el patrón de repositorio puede utilizar Mockito directamente, utilizando el módulo `quarkus-junit5-mockito` , lo que hace que mocking beans sea mucho más fácil:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:986
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:993
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:996
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:999
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1002
#, fuzzy
msgid "And this repository:"
msgstr "Y este depósito:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1011
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1021
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1026
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1030
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1034
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1038
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1041
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1047
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1051
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1054
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1061
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1064
#, fuzzy, no-wrap
msgid "How and why we simplify MongoDB API"
msgstr "Cómo y por qué simplificamos la API de MongoDB"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1068
#, fuzzy
msgid "When it comes to writing MongoDB entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "Cuando se trata de escribir entidades MongoDB, hay una serie de cosas molestas con las que los usuarios se han acostumbrado a lidiar a regañadientes, tales como:"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1071
#, fuzzy
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really relevant to your model."
msgstr "Duplicar la lógica del ID: la mayoría de las entidades necesitan un ID, a la mayoría de la gente no le importa cómo se establece, porque no es realmente relevante para su modelo."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1074
#, fuzzy
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr "Getters y setters tontos: como Java carece de soporte para propiedades en el lenguaje, tenemos que crear campos y luego generar getters y setters para esos campos, aunque en realidad no hagan nada más que leer/escribir los campos."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1077
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "Los patrones EE tradicionales aconsejan dividir la definición de la entidad (el modelo) de las operaciones que puede hacer sobre ellas (DAOs, Repositorios), pero realmente eso requiere una división antinatural entre el estado y sus operaciones aunque nunca haríamos algo así para objetos normales en la arquitectura Orientada a Objetos, donde el estado y los métodos están en la misma clase. Además, esto requiere dos clases por entidad, y requiere la inyección de la DAO o Repositorio donde necesite hacer las operaciones de la entidad, lo que rompe su flujo de edición y requiere que salga del código que está escribiendo para establecer un punto de inyección antes de volver a utilizarlo."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1079
#, fuzzy
msgid "MongoDB queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "Las consultas de MongoDB son superpotentes, pero excesivamente prolijas para las operaciones comunes, lo que le obliga a escribir consultas incluso cuando no necesita todas las partes."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1080
#, fuzzy
msgid "MongoDB queries are JSON based, so you will need some String manipulation or using the `Document` type and it will need a lot of boilerplate code."
msgstr "Las consultas de MongoDB se basan en JSON, por lo que necesitará alguna manipulación de cadenas o utilizar el tipo `Document` y necesitará mucho código boilerplate."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1082
#, fuzzy
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Con Panache, adoptamos un enfoque de opinión para abordar todos estos problemas:"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1085
#, fuzzy
msgid "Make your entities extend `PanacheMongoEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheMongoEntityBase` instead and handle the ID yourself."
msgstr "Haga que sus entidades extiendan `PanacheMongoEntity` : tiene un campo ID que se genera automáticamente. Si necesita una estrategia de ID personalizada, puede extender `PanacheMongoEntityBase` en su lugar y gestionar el ID usted mismo."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1088
#, fuzzy
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "Utilice campos públicos. Deshágase de los getter y setters tontos. Bajo el capó, generaremos todos los getters y setters que falten, y reescribiremos todos los accesos a estos campos para que utilicen los métodos accessor. De esta forma podrá seguir escribiendo accesores _útiles_ cuando los necesite, que se utilizarán aunque los usuarios de su entidad sigan utilizando accesos a campos."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1091
#, fuzzy
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "Con el patrón de registro activo: ponga toda su lógica de entidad en métodos estáticos en su clase de entidad y no cree DAOs. Su superclase de entidad viene con un montón de métodos estáticos superútiles, y usted puede añadir los suyos propios en su clase de entidad. Los usuarios pueden simplemente empezar a utilizar su entidad `Person` escribiendo `Person.` y obteniendo la finalización de todas las operaciones en un único lugar."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1093
#, fuzzy
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` or even better `Person.find(\"name\", \"Loïc\")`."
msgstr "No escriba partes de la consulta que no necesite: escriba `Person.find(\"order by name\")` o `Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` o incluso mejor `Person.find(\"name\", \"Loïc\")` ."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1095
#, fuzzy
msgid "That's all there is to it: with Panache, MongoDB has never looked so trim and neat."
msgstr "Eso es todo: con Panache, MongoDB nunca ha tenido un aspecto tan elegante y pulcro."

#. type: Title ==
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1096
#, fuzzy, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "Definición de entidades en proyectos o tarros externos"

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1099
#, fuzzy
msgid "MongoDB with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "MongoDB con Panache se basa en mejoras de bytecode en tiempo de compilación para sus entidades."

#. type: Plain text
#: upstream/_versions/1.11/guides/mongodb-panache.adoc:1104
#, fuzzy
msgid "It attempts to identity archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "Intenta identificar los archivos con entidades Panache (y los consumidores de entidades Panache) por la presencia del archivo marcador `META-INF/panache-archive.marker` . Panache incluye un procesador de anotaciones que creará automáticamente este archivo en los archivos que dependan de Panache (incluso indirectamente). Si ha desactivado los procesadores de anotación, puede que tenga que crear este archivo manualmente en algunos casos."
