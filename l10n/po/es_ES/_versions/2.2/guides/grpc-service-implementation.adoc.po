# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-22 09:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:6
#, fuzzy, no-wrap
msgid "Implementing a gRPC Service"
msgstr "Implementación de un servicio gRPC"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:11
#, fuzzy
msgid "gRPC service implementations exposed as CDI beans are automatically registered and served by quarkus-grpc."
msgstr "Las implementaciones de servicios gRPC expuestas como beans CDI son automáticamente registradas y servidas por quarkus-grpc."

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:14
#, fuzzy
msgid "Implementing a gRPC service requires the gRPC classes to be generated.  Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr "La implementación de un servicio gRPC requiere que se generen las clases gRPC. Coloque sus archivos `proto` en `src/main/proto` y ejecute `mvn compile` ."

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:15
#, fuzzy, no-wrap
msgid "Generated Code"
msgstr "Código generado"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:18
#, fuzzy
msgid "Quarkus generates a few implementation classes for services declared in the `proto` file:"
msgstr "Quarkus genera algunas clases de implementación para los servicios declarados en el archivo `proto`:"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:20
#, fuzzy
msgid "A _service interface_ using the Mutiny API"
msgstr "Una _interfaz de servicio_ que utiliza la API de Mutiny"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:21
#, fuzzy
msgid "the class name is `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}`"
msgstr "el nombre de la clase es `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}`"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:22
#, fuzzy
msgid "An _implementation base_ class using the gRPC API"
msgstr "Una clase _base de implementación_ que utiliza la API gRPC"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:23
#, fuzzy
msgid "the class name is structured as follows: `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`"
msgstr "el nombre de la clase está estructurado de la siguiente manera: `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:25
#, fuzzy
msgid "For example, if you use the following `proto` file snippet:"
msgstr "Por ejemplo, si utiliza el siguiente fragmento de archivo `proto`:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:29
#, no-wrap
msgid "option java_package = \"hello\"; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:33
#, no-wrap
msgid ""
"service Greeter { <2>\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:35
#, fuzzy
msgid "`hello` is the java package for the generated classes."
msgstr "`hello` es el paquete java para las clases generadas."

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:36
#, fuzzy
msgid "`Greeter` is the service name."
msgstr "`Greeter` es el nombre del servicio."

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:38
#, fuzzy
msgid "Then the service interface is `hello.Greeter` and the implementation base is the abstract static nested class: `hello.GreeterGrpc.GreeterImplBase`."
msgstr "Entonces la interfaz del servicio es `hello.Greeter` y la base de implementación es la clase abstracta estática anidada: `hello.GreeterGrpc.GreeterImplBase`."

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:40
#, fuzzy
msgid "You'll need to implement the _service interface_ or extend the _base class_ with your service implementation bean as described in the following sections."
msgstr "Tendrás que implementar la _interfaz de servicio_ o extender la _clase base_ con tu bean de implementación de servicio como se describe en las siguientes secciones."

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:41
#, fuzzy, no-wrap
msgid "Implementing a Service with the Mutiny API"
msgstr "Implementación de un servicio con la API de Mutiny"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:47
#, fuzzy
msgid "To implement a gRPC service using the Mutiny API, create a class that implements the service interface.  Then, implement the methods defined in the service interface.  If you don't want to implement a service method just throw an `java.lang.UnsupportedOperationException` from the method body (the exception will be automatically converted to the appropriate gRPC exception).  Finally, implement the service and add the `@GrpcService` annotation:"
msgstr "Para implementar un servicio gRPC utilizando la API Mutiny, cree una clase que implemente la interfaz del servicio. A continuación, implemente los métodos definidos en la interfaz de servicio. Si no desea implementar un método de servicio, simplemente lance una `java.lang.UnsupportedOperationException` desde el cuerpo del método (la excepción se convertirá automáticamente en la excepción gRPC apropiada). Por último, implemente el servicio y añada la anotación `@GrpcService` :"

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:52
#, no-wrap
msgid ""
"import io.quarkus.grpc.GrpcService;\n"
"import hello.Greeter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:55
#, no-wrap
msgid ""
"@GrpcService <1>\n"
"public class HelloService implements Greeter { <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:63
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HelloReply> sayHello(HelloRequest request) {\n"
"        return Uni.createFrom().item(() ->\n"
"                HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build()\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:65
#, fuzzy
msgid "A gRPC service implementation bean must be annotated with the `@GrpcService` annotation and should not declare any other CDI qualifier. All gRPC services have the `javax.inject.Singleton` scope. Additionally, the request context is always active during a service call."
msgstr "Un bean de implementación de servicio gRPC debe estar anotado con la anotación `@GrpcService` y no debe declarar ningún otro calificador CDI. Todos los servicios gRPC tienen el ámbito `javax.inject.Singleton` . Además, el contexto de solicitud está siempre activo durante una llamada de servicio."

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:66
#, fuzzy
msgid "`hello.Greeter` is the generated service interface."
msgstr "`hello.Greeter` es la interfaz de servicio generada."

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:68
#, fuzzy
msgid "The service implementation bean can also extend the Mutiny implementation base, where the class name is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`."
msgstr "El bean de implementación del servicio también puede extender la base de implementación de Mutiny, donde el nombre de la clase se estructura de la siguiente manera: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`."

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:69
#, fuzzy, no-wrap
msgid "Implementing a Service with the default gRPC API"
msgstr "Implementación de un servicio con la API gRPC por defecto"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:74
#, fuzzy
msgid "To implement a gRPC service using the default gRPC API, create a class that extends the default implementation base.  Then, override the methods defined in the service interface.  Finally, implement the service and add the `@GrpcService` annotation:"
msgstr "Para implementar un servicio gRPC utilizando la API gRPC por defecto, cree una clase que extienda la base de implementación por defecto. A continuación, sobrescriba los métodos definidos en la interfaz del servicio. Por último, implemente el servicio y añada la anotación `@GrpcService` :"

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:78
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:125
#, no-wrap
msgid "import io.quarkus.grpc.GrpcService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:81
#, no-wrap
msgid ""
"@GrpcService\n"
"public class HelloService extends GreeterGrpc.GreeterImplBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:90
#, no-wrap
msgid ""
"    @Override\n"
"    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {\n"
"        String name = request.getName();\n"
"        String message = \"Hello \" + name;\n"
"        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());\n"
"        responseObserver.onCompleted();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:92
#, fuzzy, no-wrap
msgid "Blocking Service Implementation"
msgstr "Implementación del servicio de bloqueo"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:97
#, fuzzy
msgid "By default, all the methods from a gRPC service run on the event loop.  As a consequence, you must **not** block.  If your service logic must block, annotate the method with `io.smallrye.common.annotation.Blocking`:"
msgstr "Por defecto, todos los métodos de un servicio gRPC se ejecutan en el bucle de eventos. En consecuencia, *no* deben bloquearse. Si la lógica de su servicio debe bloquearse, anote el método con `io.smallrye.common.annotation.Blocking` :"

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:105
#, no-wrap
msgid ""
"@Override\n"
"@Blocking\n"
"public Uni<HelloReply> sayHelloBlocking(HelloRequest request) {\n"
"    // Do something blocking before returning the Uni\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:107
#, fuzzy, no-wrap
msgid "Handling Streams"
msgstr "Manejo de flujos"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:110
#, fuzzy
msgid "gRPC allows receiving and returning streams:"
msgstr "gRPC permite recibir y devolver flujos:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:118
#, no-wrap
msgid ""
"service Streaming {\n"
"    rpc Source(Empty) returns (stream Item) {} // Returns a stream\n"
"    rpc Sink(stream Item) returns (Empty) {}   // Reads a stream\n"
"    rpc Pipe(stream Item) returns (stream Item) {}  // Reads a streams and return a streams\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:121
#, fuzzy
msgid "Using Mutiny, you can implement these as follows:"
msgstr "Usando Mutiny, puedes implementarlos de la siguiente manera:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:128
#, no-wrap
msgid ""
"@GrpcService\n"
"public class StreamingService implements Streaming {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:136
#, no-wrap
msgid ""
"    @Override\n"
"    public Multi<Item> source(Empty request) {\n"
"        // Just returns a stream emitting an item every 2ms and stopping after 10 items.\n"
"        return Multi.createFrom().ticks().every(Duration.ofMillis(2))\n"
"                .select().first(10)\n"
"                .map(l -> Item.newBuilder().setValue(Long.toString(l)).build());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:146
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Empty> sink(Multi<Item> request) {\n"
"        // Reads the incoming streams, consume all the items.\n"
"        return request\n"
"                .map(Item::getValue)\n"
"                .map(Long::parseLong)\n"
"                .collect().last()\n"
"                .map(l -> Empty.newBuilder().build());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:158
#, no-wrap
msgid ""
"    @Override\n"
"    public Multi<Item> pipe(Multi<Item> request) {\n"
"        // Reads the incoming stream, compute a sum and return the cumulative results\n"
"        // in the outbound stream.\n"
"        return request\n"
"                .map(Item::getValue)\n"
"                .map(Long::parseLong)\n"
"                .onItem().scan(() -> 0L, Long::sum)\n"
"                .onItem().transform(l -> Item.newBuilder().setValue(Long.toString(l)).build());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:160
#, fuzzy, no-wrap
msgid "Health Check"
msgstr "Chequeo de salud"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:162
#, fuzzy
msgid "For the implemented services, Quarkus gRPC exposes health information in the following format:"
msgstr "Para los servicios implementados, Quarkus gRPC expone la información sanitaria en el siguiente formato:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:165
#, no-wrap
msgid "syntax = \"proto3\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:167
#, no-wrap
msgid "package grpc.health.v1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:171
#, no-wrap
msgid ""
"message HealthCheckRequest {\n"
"  string service = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:180
#, no-wrap
msgid ""
"message HealthCheckResponse {\n"
"  enum ServingStatus {\n"
"    UNKNOWN = 0;\n"
"    SERVING = 1;\n"
"    NOT_SERVING = 2;\n"
"  }\n"
"  ServingStatus status = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:183
#, no-wrap
msgid ""
"service Health {\n"
"  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:186
#, no-wrap
msgid ""
"  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:190
#, fuzzy
msgid "Clients can specify the fully qualified service name to get the health status of a specific service or skip specifying the service name to get the general status of the gRPC server."
msgstr "Los clientes pueden especificar el nombre completo del servicio para obtener el estado de salud de un servicio específico u omitir la especificación del nombre del servicio para obtener el estado general del servidor gRPC."

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:193
#, fuzzy
msgid "For more details, check out the https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC documentation]"
msgstr "Para más detalles, consulte la link:https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[documentación de gRPC]"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:196
#, fuzzy
msgid "Additionally, if Quarkus SmallRye Health is added to the application, a readiness check for the state of the gRPC services will be added to the MicroProfile Health endpoint response, that is `/q/health`."
msgstr "Además, si se añade Quarkus SmallRye Health a la aplicación, se añadirá a la respuesta del punto final MicroProfile Health una comprobación del estado de los servicios gRPC, es decir, `/q/health` ."

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:197
#, fuzzy, no-wrap
msgid "Reflection Service"
msgstr "Servicio de Reflexión"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:201
#, fuzzy
msgid "Quarkus gRPC Server implements the https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflection service].  This service allows tools like https://github.com/fullstorydev/grpcurl[grpcurl] or https://github.com/gusaul/grpcox[grpcox] to interact with your services."
msgstr "El Servidor gRPC de Quarkus implementa el servicio de link:https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflexión] . Este servicio permite a herramientas como link:https://github.com/fullstorydev/grpcurl[grpcurl] o link:https://github.com/gusaul/grpcox[grpcox] interactuar con sus servicios."

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:204
#, fuzzy
msgid "The reflection service is enabled by default in _dev_ mode.  In test or production mode, you need to enable it explicitly by setting `quarkus.grpc.server.enable-reflection-service` to `true`."
msgstr "El servicio de reflexión está habilitado por defecto en modo _dev_ . En modo de prueba o producción, debe habilitarlo explícitamente configurando `quarkus.grpc.server.enable-reflection-service` en `true` ."

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:205
#, fuzzy, no-wrap
msgid "Scaling"
msgstr "Escala"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:207
#, fuzzy
msgid "By default, quarkus-grpc starts a single gRPC server running on a single event loop."
msgstr "Por defecto, quarkus-grpc inicia un único servidor gRPC que se ejecuta en un único bucle de eventos."

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:209
#, fuzzy
msgid "If you wish to scale your server, you can set the number of server instances by setting `quarkus.grpc.server.instances`."
msgstr "Si desea escalar su servidor, puede establecer el número de instancias del servidor configurando `quarkus.grpc.server.instances`."

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:210
#, fuzzy, no-wrap
msgid "Server Configuration"
msgstr "Configuración del servidor"

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:214
#, fuzzy, no-wrap
msgid "Example of Configuration"
msgstr "Ejemplo de configuración"

#. type: Title ===
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:216
#, fuzzy, no-wrap
msgid "Enabling TLS"
msgstr "Activación de TLS"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:219
#, fuzzy
msgid "To enable TLS, use the following configuration."
msgstr "Para habilitar TLS, utilice la siguiente configuración."

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:222
#, fuzzy
msgid "Note that all paths in the configuration may either specify a resource on the classpath (typically from `src/main/resources` or its subfolder) or an external file."
msgstr "Tenga en cuenta que todas las rutas de la configuración pueden especificar un recurso del classpath (normalmente de `src/main/resources` o su subcarpeta) o un archivo externo."

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:227
#, no-wrap
msgid ""
"quarkus.grpc.server.ssl.certificate=tls/server.pem\n"
"quarkus.grpc.server.ssl.key=tls/server.key\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:230
#, fuzzy
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "Cuando se configura SSL/TLS, `plain-text` se desactiva automáticamente."

#. type: Title ===
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:231
#, fuzzy, no-wrap
msgid "TLS with Mutual Auth"
msgstr "TLS con autentificación mutua"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:234
#, fuzzy
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "Para utilizar TLS con autenticación mutua, utilice la siguiente configuración:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:242
#, no-wrap
msgid ""
"quarkus.grpc.server.ssl.certificate=tls/server.pem\n"
"quarkus.grpc.server.ssl.key=tls/server.key\n"
"quarkus.grpc.server.ssl.trust-store=tls/ca.jks\n"
"quarkus.grpc.server.ssl.trust-store-password=*****\n"
"quarkus.grpc.server.ssl.client-auth=REQUIRED\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:244
#, fuzzy, no-wrap
msgid "Server Interceptors"
msgstr "Interceptores de servidores"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:247
msgid "You can implement a gRPC server interceptor by implementing an `@ApplicationScoped` bean implementing `io.grpc.ServerInterceptor`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:252
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyInterceptor implements ServerInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:259
#, no-wrap
msgid ""
"    @Override\n"
"    public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> serverCall,\n"
"            Metadata metadata, ServerCallHandler<ReqT, RespT> serverCallHandler) {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:262
#, fuzzy
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] to properly implement your interceptor."
msgstr "Consulte el  link:https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[JavaDoc de ServerInterceptor] para implementar correctamente su interceptor."

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:264
msgid "When you have multiple server interceptors, you can order them by implementing the `javax.enterprise.inject.spi.Prioritized` interface:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:269
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyInterceptor implements ServerInterceptor, Prioritized {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:275
#, no-wrap
msgid ""
"    @Override\n"
"    public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> serverCall,\n"
"            Metadata metadata, ServerCallHandler<ReqT, RespT> serverCallHandler) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:281
#, no-wrap
msgid ""
"    @Override\n"
"    public int getPriority() {\n"
"        return 10;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:285
#, fuzzy
msgid "Interceptors with the highest priority are called first.  The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr "Los interceptores con la prioridad más alta son llamados en primer lugar. La prioridad por defecto, utilizada si el interceptor no implementa la interfaz `Prioritized` , es `0` ."

#. type: Title ==
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:287
#, fuzzy, no-wrap
msgid "Testing your services"
msgstr "Probar sus servicios"

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:291
msgid "The easiest way to test a gRPC service is to use a gRPC client as described in link:grpc-service-consumption[Consuming a gRPC Service]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:295
#, fuzzy
msgid "Please note that in the case of using a client to test an exposed service that does not use TLS, there is no need to provide any configuration. E.g. to test the `HelloService` defined above, one could create the following test:"
msgstr "Tenga en cuenta que en el caso de utilizar un cliente para probar un servicio expuesto que no utiliza TLS, no es necesario proporcionar ninguna configuración. Por ejemplo, para probar el `HelloService` definido anteriormente, se podría crear la siguiente prueba:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:299
#, no-wrap
msgid "public class HelloServiceTest implements Greeter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:302
#, no-wrap
msgid ""
"    @GrpcClient\n"
"    Greeter client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/grpc-service-implementation.adoc:311
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldReturnHello() throws Exception {\n"
"        CompletableFuture<String> message = new CompletableFuture<>();\n"
"        client.sayHello(HelloRequest.newBuilder().setName(\"Quarkus\").build())\n"
"                .subscribe().with(reply -> message.complete(reply.getMessage()));\n"
"        assertThat(message.get(5, TimeUnit.SECONDS)).isEqualTo(\"Hello Quarkus\");\n"
"    }\n"
"}\n"
msgstr ""
