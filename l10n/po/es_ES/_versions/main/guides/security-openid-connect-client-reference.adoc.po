# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-10 08:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "OpenID Connect (OIDC) and OAuth2 client and filters"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can use Quarkus extensions to acquire and refresh access tokens from OIDC and OAuth 2.0 compliant servers and propagate access tokens."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Here, you can learn how to use `quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant servers such as link:https://www.keycloak.org[Keycloak]."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can also learn how to use `quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "Los tokens de acceso gestionados por estas extensiones pueden utilizarse como tokens de portador de autorización HTTP para acceder a los servicios remotos."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Also see xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr ""

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Add the following dependency:"
msgstr "Añade la siguiente dependencia:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient`, which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` is initialized at build time with the IDP token endpoint URL, which can be auto-discovered or manually configured. `OidcClient` uses this endpoint to acquire access tokens by using token grants such as `client_credentials` or `password` and refresh the tokens by using a `refresh_token` grant."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Token endpoint configuration"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "Por defecto, la dirección del punto final del token se descubre añadiendo una ruta `/.well-known/openid-configuration` a la configurada `quarkus.oidc-client.auth-server-url`."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "For example, given this Keycloak URL:"
msgstr "Por ejemplo, dada esta URL de Keycloak:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr "`OidcClient` descubrirá que la URL del punto final del token es `&lt;a href=\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\" class=\"bare\"&gt;http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens&lt;/a&gt;`."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, if the discovery endpoint is unavailable or you want to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value. For example:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "Una forma más compacta de configurar la URL del punto final del token sin el descubrimiento es establecer `quarkus.oidc-client.token-path` a una URL absoluta:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Setting `quarkus.oidc-client.auth-server-url` and `quarkus.oidc-client.discovery-enabled` is not required in this case."
msgstr "La configuración de 'quarkus.oidc-client.auth-server-url' y 'quarkus.oidc-client.discovery-enabled' no es necesaria en este caso."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Supported token grants"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The main token grants that `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Client credentials grant"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "Así es como se puede configurar `OidcClient` para utilizar la subvención `client_credentials`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The `client_credentials` grant allows setting extra parameters for the token request by using `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient by using the `audience` parameter:"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Password grant"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "Así es como se puede configurar `OidcClient` para utilizar la subvención `password`:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "It can be further customized by using a `quarkus.oidc-client.grant-options.password` configuration prefix, similar to how the client credentials grant can be customized."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Other grants"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` can also help acquire the tokens by using grants that require some extra input parameters that cannot be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, and two grants which can be used to exchange the current access token, namely, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"If you need to acquire an access token and have posted an existing refresh token to the current Quarkus endpoint, you must use the `refresh_token` grant. This grant employs an out-of-band refresh token to obtain a new token set.\n"
"In this case, configure `OidcClient` as follows:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Then you can use the `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants might be required if you are building a complex microservices application and want to avoid the same `Bearer` token be propagated to and used by more than one service. See xref:token-propagation-reactive[Token Propagation in MicroProfile RestClient Reactive filter] and xref:token-propagation[Token Propagation in MicroProfile RestClient filter] for more details."
msgstr "El uso de la concesión `token exchange` puede ser necesario si está construyendo una aplicación de microservicios compleja y desea evitar que el mismo token `Bearer` sea propagado y utilizado por más de un servicio. Por favor, vea  link:#token-propagation[Propagación de Token en el filtro de cliente RestClient de MicroProfile] para más detalles."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Using `OidcClient` to support the `authorization code` grant might be required if, for some reason, you cannot use the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow, then you can configure `OidcClient` as follows:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` also supports the `urn:openid:params:grant-type:ciba` grant:"
msgstr "`OidcClient` también apoya la subvención `urn:openid:params:grant-type:ciba`:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the `auth_req_id` parameter to exchange the token authorization code."
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Grant scopes"
msgstr "Ámbito de aplicación de la subvención"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"You might need to request that a specific set of scopes be associated with an issued access token.\n"
"Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient directly"
msgstr "Utilizar directamente OidcClient"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "One can use `OidcClient` directly as follows:"
msgstr "Se puede utilizar directamente `OidcClient` de la siguiente manera:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Inject tokens"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can inject `Tokens` that use `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClients"
msgstr "Utilizar OidcClients"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` es un contenedor de `OidcClient`s - incluye un `OidcClient` por defecto y clientes con nombre que pueden ser configurados así:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "In this case, the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr ""

#. type: delimited block =
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], and each OIDC tenant has its own associated `OidcClient`, you can use a Vert.x `RoutingContext` `tenantId` attribute. For example:"
msgstr ""

#. type: delimited block =
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If you need, you can also create a new `OidcClient` programmatically like this:"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Inject named OidcClient and tokens"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "In case of multiple configured `OidcClient` objects, you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "El mismo calificador puede utilizarse para especificar el `OidcClient` utilizado para una inyección de `Tokens`:"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "Utilizar OidcClient en RestClient Reactive ClientFilter"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Add the following Maven Dependency:"
msgstr "Añade la siguiente dependencia de Maven:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "Tenga en cuenta que también traerá `io.quarkus:quarkus-oidc-client`."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr "`quarkus-oidc-client-reactive-filter` La extensión proporciona `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "It works similarly to the way `OidcClientRequestFilter` does (see xref:oidc-client-filter[Use OidcClient in MicroProfile RestClient client filter]) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter that does not block the current IO thread when acquiring or refreshing the tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr "`OidcClientRequestReactiveFilter` retrasa la adquisición de un token inicial hasta que se ejecuta para evitar el bloqueo de un hilo IO y actualmente sólo puede registrarse con la anotación `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either `io.quarkus.oidc.client.reactive.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "Puede registrar selectivamente `OidcClientRequestFilter` utilizando las anotaciones `io.quarkus.oidc.client.filter.OidcClientFilter` o `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "or"
msgstr "o"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "Utilizar OidcClient en RestClient ClientFilter"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` proporciona `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter que utiliza `OidcClient` para adquirir el token de acceso, actualizarlo si es necesario, y establecerlo como un valor del esquema HTTP `Authorization` `Bearer` ."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are unavailable, then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "Puede registrar selectivamente `OidcClientRequestFilter` utilizando las anotaciones `io.quarkus.oidc.client.filter.OidcClientFilter` o `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.\n"
"For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Use a custom RestClient ClientFilter"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If you prefer, you can use your own custom filter and inject `Tokens`:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "El productor de `Tokens` adquirirá y actualizará los tokens, y el filtro personalizado decidirá cómo y cuándo utilizar el token."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can also inject named `Tokens`, see xref:named-oidc-clients[Inject named OidcClient and Tokens]"
msgstr "También se puede inyectar el nombre `Tokens`, ver  link:#named-oidc-clients[Inyectar el nombre OidcClient y Tokens]"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Refreshing access tokens"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n"
"Additionally, the `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example, if this property is set to `3S` and the access token will expire in less than 3 seconds, then this token will be auto-refreshed."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If the access token needs to be refreshed, but no refresh token is available, then an attempt is made to acquire a new token by using a configured grant, such as `client_credentials`."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12, a refresh token will not be returned by default for `client_credentials`. The providers might also restrict the number of times a refresh token can be used."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Revoking access tokens"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If your OpenId Connect provider, such as Keycloak, supports a token revocation endpoint, then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You might want to have the access token revoked if using this token with a REST client fails with an HTTP `401` status code or if the access token has already been used for a long time and you would like to refresh it."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "This can be achieved by requesting a token refresh by using a refresh token. However, if the refresh token is unavailable, you can refresh it by revoking it first and then requesting a new access token."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "OidcClient authentication"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` tiene que autenticarse en el proveedor de OpenID Connect para que la `client_credentials` y otras solicitudes de concesión tengan éxito. Se admiten todas las opciones de link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[autenticación de cliente OIDC] , por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr "`client_secret_jwt`El algoritmo de firma es `HS256`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` con el archivo de claves PEM, el algoritmo de firma es `RS256`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`private_key_jwt` with the keystore file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` con el archivo de almacenamiento de claves, el algoritmo de firma es `RS256`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "El uso de los métodos de autenticación `client_secret_jwt` o `private_key_jwt` garantiza que ningún secreto del cliente pase por el cable."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Additional JWT authentication options"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used, then the JWT signature algorithm, key identifier, audience, subject, and issuer can be customized, for example:"
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account-specific issuer and subject properties."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method, which can be configured as follows:"
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Mutual TLS"
msgstr "TLS mutuo"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Some OpenID Connect Providers require that a client is authenticated as part of the mutual TLS (`mTLS`) authentication process."
msgstr "Algunos proveedores de OpenID Connect pueden exigir que el cliente se autentique como parte del proceso de autenticación de `Mutual TLS` ( `mTLS`)."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr "`quarkus-oidc-client` puede configurarse de la siguiente manera para soportar `mTLS`:"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Testing"
msgstr "Probando"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Start by adding the following dependencies to your test project:"
msgstr "Comience por añadir las siguientes dependencias a su proyecto de prueba:"

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Add the following dependencies to your test project:"
msgstr "Añada las siguientes dependencias a su proyecto de prueba:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Write a Wiremock-based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "Escriba un `QuarkusTestResourceLifecycleManager` basado en Wiremock, por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered OidcClient filter, call the downstream endpoint. This endpoint echoes the token back. For example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "Prepare los puntos finales de prueba REST, puede tener el punto final del frontend de prueba que utiliza el cliente MP REST inyectado con un filtro OidcClient registrado para invocar en el punto final descendente que se hace eco del token de vuelta, por ejemplo, vea el `integration-tests/oidc-client-wiremock` en el repositorio `main` Quarkus."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Set `application.properties`, for example:"
msgstr "Establece `application.properties`, por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "And finally, write the test code. Given the Wiremock-based resource above, the first test invocation should return the `access_token_1` access token, which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return the `access_token_2` access token, which confirms the expired `access_token_1` access token has been refreshed."
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If you work with Keycloak, you can use the same approach described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "How to check the errors in the logs"
msgstr "Cómo comprobar los errores en los registros"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "Por favor, active el registro de nivel `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` para ver más detalles sobre los errores de adquisición y actualización de tokens:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "Por favor, active el registro de nivel `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` para ver más detalles sobre los errores de inicialización de OidcClient:"

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "OIDC request filters"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFiler` implementations, which can update or add new request headers. For example, a filter can analyze the request body and add its digest as a new header value:"
msgstr ""

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Token Propagation Reactive"
msgstr "Propagación de tokens reactiva"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides a RestEasy Reactive Client, `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter`, that simplifies the propagation of authentication information. This client propagates the xref:security-oidc-bearer-token-authentication.adoc[bearer token] present in the currently active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[authorization code flow mechanism] as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr "Puede registrar selectivamente `AccessTokenRequestFilter` utilizando `io.quarkus.oidc.token.propagation.AccessToken` o `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr "Además, `AccessTokenRequestReactiveFilter` puede soportar una aplicación compleja que necesite intercambiar los tokens antes de propagarlos."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or another OIDC provider that supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "Nota: `AccessTokenRequestFilter` utilizará `OidcClient` para intercambiar el token actual y usted puede utilizar `quarkus.oidc-client.grant-options.exchange` para establecer las propiedades de intercambio adicionales esperadas por su proveedor de OpenID Connect."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "Si trabajas con proveedores como `Azure` que  link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[requieren el uso de]  link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] para intercambiar el token actual entonces puedes configurar `AccessTokenRequestReactiveFilter` para intercambiar el token de esta manera:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` utiliza un `OidcClient` por defecto. Se puede seleccionar un nombre `OidcClient` con una propiedad de configuración `quarkus.oidc-token-propagation.client-name`."

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Token Propagation"
msgstr "Propagación de fichas"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"The `quarkus-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.\n"
"`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.\n"
"The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality but, in addition, provides support for JWT tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "When you need to propagate the current Authorization Code Flow access token, then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "However, the direct end-to-end Bearer token propagation should be avoided. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases, `Service B` cannot distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A`, it should be able to assert a new issuer and audience claims."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Additionally, a complex application might need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or completely different set of scopes to access `Service B`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "Las siguientes secciones muestran cómo `AccessTokenRequestFilter` y `JsonWebTokenRequestFilter` pueden ayudar."

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` treats all tokens as Strings, and as such, it can work with both JWT and opaque tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "Puede registrar selectivamente `AccessTokenRequestFilter` utilizando `io.quarkus.oidc.token.propagation.AccessToken` o `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Exchange token before propagation"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr "Si el token de acceso actual necesita ser intercambiado antes de la propagación y trabajas con  link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] u otro proveedor de OpenID Connect que soporte una concesión de token de  link:https://tools.ietf.org/html/rfc8693[intercambio], entonces puedes configurar `AccessTokenRequestFilter` así:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr "Si trabajas con proveedores como `Azure` que  link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[requieren el uso de]  link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] para intercambiar el token actual entonces puedes configurar `AccessTokenRequestFilter` para intercambiar el token de esta manera:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "Nota: `AccessTokenRequestFilter` utilizará `OidcClient` para intercambiar el token actual y usted puede utilizar `quarkus.oidc-client.grant-options.exchange` para establecer las propiedades de intercambio adicionales esperadas por su proveedor de OpenID Connect."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` utiliza un `OidcClient` por defecto. Se puede seleccionar un nombre `OidcClient` con una propiedad de configuración `quarkus.oidc-token-propagation.client-name`."

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims, such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and, therefore, will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol, then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is ensuring that `Service A` has a signing key; it should be provisioned from a secure file system or remote secure storage such as Vault."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "Puede registrar selectivamente `JsonWebTokenRequestFilter` utilizando `io.quarkus.oidc.token.propagation.JsonWebToken` o `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "Alternativamente, `JsonWebTokenRequestFilter` puede registrarse automáticamente con todos los clientes MP Rest o JAX-RS si las propiedades `quarkus.oidc-token-propagation.register-filter` y `quarkus.oidc-token-propagation.json-web-token` se establecen en `true`."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Update token before propagation"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If the injected token needs to have its `iss` (issuer) or `aud` (audience) claims updated and secured again with a new signature, then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "As noted above, use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider, which supports a Token Exchange protocol."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You can generate the tokens as described in xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.\n"
"Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered token propagation filter, call the downstream endpoint. For example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "Puede generar los tokens como se describe en la sección xref:security-oidc-bearer-token-authentication.adoc#integration-testing[Pruebas de integración de tokens de portador de OpenID Connect] . Prepare los puntos finales de prueba REST. Puede hacer que el punto final front-end de prueba, que utiliza el cliente MP REST inyectado con un filtro de propagación de tokens registrado, llame al punto final downstream. Por ejemplo, consulte la página `integration-tests/oidc-token-propagation` en el repositorio `main` Quarkus."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "La extensión `quarkus-oidc-token-propagation-reactive` proporciona `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` que puede utilizarse para propagar los tokens de acceso actuales `Bearer` o `Authorization Code Flow`."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning of the tokens before the propagation.\n"
"However, these features might be added in the future."
msgstr ""

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "GraphQL client integration"
msgstr "Integración del cliente GraphQL"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"The `quarkus-oidc-client-graphql` extension provides a way to integrate an OIDC client into xref:smallrye-graphql-client.adoc[GraphQL clients] paralleling the approach used with REST clients.\n"
"When this extension is active, any GraphQL client configured through properties (rather than programmatically by the builder) will use the OIDC client to acquire an access token, which it will then set as the `Authorization` header value.\n"
"The OIDC client will also refresh expired access tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "To configure which OIDC client should be used by the GraphQL client, select one of the configured OIDC clients with the `quarkus.oidc-client-graphql.client-name` property, for example:"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql\n"
"\n"
"# example declaration of the OIDC client itself\n"
"quarkus.oidc-client.oidc-client-for-graphql.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant.type=password\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.username=${username}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.password=${password}\n"
"quarkus.oidc-client.oidc-client-for-graphql.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.value=${keycloak.credentials.secret}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.method=POST"
msgstr "quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"If you don't specify the `quarkus.oidc-client-graphql.client-name` property,\n"
"GraphQL clients will use the default OIDC client (without an explicit name)."
msgstr "Si no especifica la propiedad `quarkus.oidc-client-graphql.client-name` , los clientes GraphQL utilizarán el cliente OIDC predeterminado (sin nombre explícito)."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"Specifically for type-safe GraphQL clients, you can override this on a\n"
"per-client basis by annotating the `GraphQLClientApi` interface with\n"
"`@io.quarkus.oidc.client.filter.OidcClientFilter`. For example:"
msgstr "Específicamente para los clientes GraphQL de tipo seguro, puede anular esto en función de cada cliente anotando la interfaz `GraphQLClientApi` con `@io.quarkus.oidc.client.filter.OidcClientFilter` . Por ejemplo:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"To be able to use this with a programmatically created GraphQL client, both\n"
"builders (`VertxDynamicGraphQLClientBuilder` and\n"
"`VertxTypesafeGraphQLClientBuilder`) contain a method `dynamicHeader(String,\n"
"Uni<String>`) that allows you to plug in a header that might change for\n"
"every request. To plug an OIDC client into it, use"
msgstr "Para poder utilizarlo con un cliente GraphQL creado mediante programación, ambos constructores ( `VertxDynamicGraphQLClientBuilder` y `VertxTypesafeGraphQLClientBuilder` ) contienen un método `dynamicHeader(String, Uni<String>` ) que le permite enchufar una cabecera que podría cambiar para cada solicitud. Para enchufarle un cliente OIDC, utilice"

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "References"
msgstr "Referencias"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "link:security-oidc-bearer-authentication-concept.html[Autenticación del portador OIDC]"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "link:security-oidc-code-flow-authentication-concept.html[Mecanismo de flujo de código OIDC para proteger las aplicaciones web]"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
"xref:security-overview.adoc\n"
"[Visión general de Quarkus Security]"
