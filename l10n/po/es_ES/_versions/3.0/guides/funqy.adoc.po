# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/funqy.adoc:6
#, no-wrap
msgid "Funqy"
msgstr "Funqy"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:15
msgid "Quarkus Funqy is part of Quarkus's serverless strategy and aims to provide a portable Java API to write functions deployable to various FaaS environments like AWS Lambda, Azure Functions, Google Cloud Functions, Knative, and Knative Events (Cloud Events).  It is also usable as a standalone service."
msgstr "Quarkus Funqy es parte de la estrategia sin servidor de Quarkus y tiene como objetivo proporcionar una API Java portátil para escribir funciones desplegables en varios entornos FaaS como AWS Lambda, Azure Functions, Google Cloud Functions, Knative y Knative Events (Cloud Events). También se puede utilizar como un servicio independiente."

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:21
#, fuzzy
msgid "Because Funqy is an abstraction that spans multiple different cloud/function providers and protocols it has to be a very simple API and thus, might not have all the features you are used to in other remoting abstractions.  A nice side effect though is that Funqy is as optimized and as small as possible.  This means that because Funqy sacrifices a little on flexibility, you'll get a framework that has little to no overhead."
msgstr "Debido a que Funqy es una abstracción que abarca múltiples proveedores de nubes/funciones y protocolos diferentes, tiene que ser una API muy simple y, por lo tanto, puede que no tenga todas las características a las que está acostumbrado en otras abstracciones remotas. Sin embargo, un agradable efecto secundario es que Funqy está tan optimizado y es tan pequeño como es posible. Esto significa que debido a que Funqy sacrifica un poco en flexibilidad, obtendrá un marco de trabajo que tiene poca o ninguna sobrecarga."

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy.adoc:22
#, fuzzy, no-wrap
msgid "Funqy Basics"
msgstr "Funqy Básico"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:26
msgid "The Funqy API is simple.  Annotate a method with `@Funq`.  This method may only have one optional input parameter and may or may not return a response."
msgstr "La API de Funqy es sencilla. Anote un método con `@Funq`. Este método sólo puede tener un parámetro de entrada opcional y puede o no devolver una respuesta."

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:30
#: upstream/_versions/3.0/guides/funqy.adoc:100
#: upstream/_versions/3.0/guides/funqy.adoc:120
#, no-wrap
msgid "import io.quarkus.funqy.Funq;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:37
#, no-wrap
msgid ""
"public class GreetingFunction {\n"
"    @Funq\n"
"    public String greet(String name) {\n"
"       return \"Hello \" + name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:43
msgid "Java classes can also be used as input and output and must follow the Java bean convention and have a default constructor.  The Java type that is declared as the parameter or return type is the type that will be expected by the Funqy runtime.  Funqy does type introspection at build time to speed up boot time, so any derived types will not be noticed by the Funqy marshalling layer at runtime."
msgstr "Las clases Java también pueden ser utilizadas como entrada y salida y deben seguir la convención de Java bean y tener un constructor por defecto. El tipo de Java que se declara como parámetro o tipo de retorno es el tipo que será esperado por el tiempo de ejecución de Funqy. Funqy hace una introspección de tipos en tiempo de construcción para acelerar el tiempo de arranque, por lo que cualquier tipo derivado no será notado por la capa de marshalling de Funqy en tiempo de ejecución."

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:45
#, fuzzy
msgid "Here's an example of using a POJO as input and output types."
msgstr "He aquí un ejemplo de utilización de un POJO como tipos de entrada y salida."

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:51
#, no-wrap
msgid ""
"public class GreetingFunction {\n"
"    public static class Friend {\n"
"        String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:55
#, no-wrap
msgid ""
"        public String getName() { return name; }\n"
"        public void setName(String name) { this.name = name; }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:58
#, no-wrap
msgid ""
"    public static class Greeting {\n"
"        String msg;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:61
#, no-wrap
msgid ""
"        public Greeting() {}\n"
"        public Greeting(String msg) { this.msg = msg }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:65
#, no-wrap
msgid ""
"        public String getMessage() { return msg; }\n"
"        public void setMessage(String msg) { this.msg = msg; }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:71
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend) {\n"
"       return new Greeting(\"Hello \" + friend.getName());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy.adoc:73
#, fuzzy, no-wrap
msgid "Async Reactive Types"
msgstr "Tipos reactivos asíncronos"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:77
msgid "Funqy supports the https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` reactive type as a return type.  The only requirement is that the `Uni` must fill out the generic type."
msgstr "Funqy admite el tipo reactivo https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` como tipo de retorno. El único requisito es que el `Uni` debe rellenar el tipo genérico."

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:82
#, no-wrap
msgid ""
"import io.quarkus.funqy.Funq;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:84
#: upstream/_versions/3.0/guides/funqy.adoc:102
#: upstream/_versions/3.0/guides/funqy.adoc:159
#, no-wrap
msgid "public class GreetingFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:90
#, no-wrap
msgid ""
"    @Funq\n"
"    public Uni<Greeting> reactiveGreeting(String name) {\n"
"       ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy.adoc:92
#, fuzzy, no-wrap
msgid "Function Names"
msgstr "Nombres de las funciones"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:96
#, fuzzy
msgid "The function name defaults to the method name and is case-sensitive.  If you want your function referenced by a different name, parameterize the `@Funq` annotation as follows:"
msgstr "El nombre de la función es por defecto el nombre del método y distingue entre mayúsculas y minúsculas. Si desea que su función sea referenciada por un nombre diferente, parametrice la anotación `@Funq` como sigue:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:108
#, no-wrap
msgid ""
"    @Funq(\"HelloWorld\")\n"
"    public String greet(String name) {\n"
"       return \"Hello \" + name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy.adoc:110
#, no-wrap
msgid "Funqy DI"
msgstr "Funqy DI"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:114
msgid "Each Funqy Java class is a Quarkus Arc component and supports dependency injection through CDI or Spring DI.  Spring DI requires including the `quarkus-spring-di` dependency in your build."
msgstr "Cada clase Java de Funqy es un componente de Quarkus Arc y soporta la inyección de dependencia a través de CDI o Spring DI. Spring DI requiere incluir la dependencia de `quarkus-spring-di` en su construcción."

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:116
#, fuzzy
msgid "The default object lifecycle for a Funqy class is `@Dependent`."
msgstr "El ciclo de vida del objeto por defecto para una clase Funqy es `@Dependent` ."

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:123
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:126
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:129
#, no-wrap
msgid ""
"    @Inject\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:137
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend) {\n"
"        Greeting greeting = new Greeting();\n"
"        greeting.setMessage(service.greet(friend.getName()));\n"
"        return greeting;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy.adoc:139
#, fuzzy, no-wrap
msgid "Context injection"
msgstr "Inyección de contexto"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:145
#, fuzzy
msgid "The Funqy API will usually not allow you to inject or use abstractions that are specific to a protocol (i.e. HTTP) or function API (i.e. AWS Lambda).  There are exceptions to the rule though, and you may be able to inject contextual information that is specific to the environment you are deploying in."
msgstr "Por lo general, la API de Funqy no le permitirá inyectar o utilizar abstracciones que sean específicas de un protocolo (es decir, HTTP) o de una función API (es decir, AWS Lambda). Sin embargo, hay excepciones a la regla y es posible que pueda inyectar información contextual que sea específica del entorno en el que está desplegando."

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:147
msgid "We do not recommend injecting contextual information specific to a runtime.  Keep your functions portable."
msgstr "No recomendamos inyectar información contextual específica de un tiempo de ejecución. Mantenga sus funciones portátiles."

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:151
msgid "Contextual information is injected via the `@Context` annotation which can be used on a function parameter or a class field.  A good example is the `io.quarkus.funqy.knative.events.CloudEvent` interface that comes with our Funqy Knative Cloud Events integration:"
msgstr "La información contextual se inyecta a través de la anotación `@Context`, que puede utilizarse en un parámetro de función o en un campo de clase. Un buen ejemplo es la interfaz `io.quarkus.funqy.knative.events.CloudEvent` que viene con nuestra integración Funqy Knative Cloud Events:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:157
#, no-wrap
msgid ""
"import io.quarkus.funqy.Funq;\n"
"import io.quarkus.funqy.Context;\n"
"import io.quarkus.funqy.knative.events.CloudEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:163
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend, @Context CloudEvent eventInfo) {\n"
"        System.out.println(\"Received greeting request from: \" eventInfo.getSource());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy.adoc:169
#, no-wrap
msgid ""
"        Greeting greeting = new Greeting();\n"
"        greeting.setMessage(\"Hello \" + friend.getName()));\n"
"        return greeting;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy.adoc:171
#, no-wrap
msgid "Should I Use Funqy?"
msgstr "¿Debo usar Funqy?"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:184
#, fuzzy, no-wrap
msgid ""
"REST over HTTP has become a very common way to write services over the past decade.  While Funqy\n"
"has an HTTP binding it is not a replacement for REST.  Because Funqy has to work across a variety\n"
"of protocols and function cloud platforms, it is very minimalistic and constrained.  For example, if you\n"
"use Funqy you lose the ability to link (think URIs) to the data your functions spit out.  You also\n"
"lose the ability to leverage cool HTTP features like `cache-control` and conditional GETs.  Many\n"
"developers will be ok with that as many won't be using these REST/HTTP features or styles. You'll\n"
"have to make the decision on what camp you are in.  Quarkus does support REST integration (through JAX-RS,\n"
" Spring MVC, Vert.x Web, and Servlet) with\n"
"various cloud/function providers, but there are some disadvantages of using that approach as well.  For example,\n"
"if you want to do xref:amazon-lambda-http.adoc[HTTP with AWS Lambda], this requires you to use the AWS API Gateway which may\n"
"slow down deployment and cold start time or even cost you more.\n"
msgstr "REST sobre HTTP se ha convertido en una forma muy común de escribir servicios en la última década. Mientras Funqy tiene un enlace HTTP no es un sustituto de REST. Debido a que Funqy tiene que trabajar a través de una variedad de protocolos y plataformas de nube de funciones, es muy minimalista y restringido. Por ejemplo, si utiliza Funqy pierde la capacidad de enlazar (piense en URIs) a los datos que sus funciones escupen. También pierde la capacidad de aprovechar funciones HTTP geniales como `cache-control` y GET condicionales. Muchos desarrolladores estarán de acuerdo con eso ya que muchos no utilizarán estas características o estilos REST/HTTP. Usted tendrá que decidir en qué bando se encuentra. Quarkus sí admite la integración REST (a través de JAX-RS, Spring MVC, Vert.x Web y Servlet) con varios proveedores de nubes/funciones, pero también hay algunas desventajas al utilizar ese enfoque. Por ejemplo, si desea hacer HTTP xref:amazon-lambda-http.adoc[con AWS Lambda] , esto requiere que usted utilice el AWS API Gateway que puede ralentizar el despliegue y el tiempo de arranque en frío o incluso costarle más."

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy.adoc:190
msgid "The purpose of Funqy is to allow you to write cross-provider functions so that you can move off of your current function provider if, for instance, they start charging you a lot more for their service.  Another reason you might not want to use Funqy is if you need access specific APIs of the target function environment.  For example, developers often want access to the AWS Context on Lambda.  In this case, we tell them they may be better off using the xref:amazon-lambda.adoc[Quarkus Amazon Lambda] integration instead."
msgstr "El propósito de Funqy es permitirte escribir funciones entre proveedores para que puedas dejar tu actual proveedor de funciones si, por ejemplo, empiezan a cobrarte mucho más por su servicio. Otra razón por la que podría no querer usar Funqy es si necesita acceder a APIs específicas del entorno de funciones de destino. Por ejemplo, los desarrolladores suelen querer acceder al Contexto de AWS en Lambda. En este caso, les decimos que puede ser mejor utilizar la integración de xref:amazon-lambda.html[Quarkus Amazon Lambda] en su lugar."
