# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:6
#, fuzzy, no-wrap
msgid "Simplified Hibernate Reactive with Panache"
msgstr "Hibernate Reactivo Simplificado con Panache"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:16
msgid "link:https://hibernate.org/reactive/[Hibernate Reactive] is the only reactive JPA implementation and offers you the full breadth of an Object Relational Mapper allowing you to access your database over reactive drivers.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate Reactive with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:17
#, fuzzy, no-wrap
msgid "First: an example"
msgstr "Primero: un ejemplo"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:20
#, fuzzy
msgid "What we're doing in Panache allows you to write your Hibernate Reactive entities like this:"
msgstr "Lo que hacemos en Panache es permitirte escribir tus entidades Hibernate Reactive de esta manera:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:28
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:175
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:257
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:32
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:261
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:36
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:265
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:41
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:270
#, no-wrap
msgid ""
"    public static Uni<Long> deleteStefs(){\n"
"        return delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:45
#, fuzzy
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr "¿Se ha dado cuenta de que el código es mucho más compacto y legible? ¿Le parece interesante? Siga leyendo."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:47
#, fuzzy
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "el método `list()` puede resultar sorprendente al principio. Toma fragmentos de consultas HQL (JP-QL) y contextualiza el resto. Eso hace que el código sea muy conciso pero a la vez legible."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:50
#, fuzzy
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "Lo descrito anteriormente es esencialmente el patrón de registro link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[activo] , a veces denominado simplemente patrón de entidad. Hibernate con Panache también permite utilizar el patrón de link:https://martinfowler.com/eaaCatalog/repository.html[repositorio] más clásico a través de `PanacheRepository` ."

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:51
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solución"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:55
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Le recomendamos que siga las instrucciones de las siguientes secciones y cree la aplicación paso a paso. Sin embargo, puede ir directamente al ejemplo completado."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:57
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clone el repositorio Git: `git clone {quickstarts-clone-url}` o descargue un {quickstarts-archive-url}[archivo]."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:59
#, fuzzy
msgid "The solution is located in the `hibernate-reactive-panache-quickstart` {quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directory]."
msgstr "La solución se encuentra en `hibernate-reactive-panache-quickstart` {quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directorio]."

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:63
#, fuzzy
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr "Si su proyecto ya está configurado para utilizar otros procesadores de anotaciones, tendrá que añadir adicionalmente el procesador de anotaciones Panache:"

#. type: Block title
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:65
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:109
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:855
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:971
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:82
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"        <parameters>${maven.compiler.parameters}</parameters>\n"
"        <annotationProcessorPaths>\n"
"            <!-- Your existing annotation processor(s)... -->\n"
"            <path>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-panache-common</artifactId>\n"
"                <version>${quarkus.platform.version}</version>\n"
"            </path>\n"
"        </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:85
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:125
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:865
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:981
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:88
#, no-wrap
msgid "annotationProcessor(\"io.quarkus:quarkus-panache-common\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:91
#, fuzzy, no-wrap
msgid "Setting up and configuring Hibernate Reactive with Panache"
msgstr "Instalación y configuración de Hibernate Reactive con Panache"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:94
#, fuzzy
msgid "To get started:"
msgstr "Para empezar:"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:96
#, fuzzy
msgid "add your settings in `{config-file}`"
msgstr "añada su configuración en `{config-file}`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:97
#, fuzzy
msgid "annotate your entities with `@Entity`"
msgstr "anotar sus entidades con `@Entity`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:98
#, fuzzy
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "haga que sus entidades extiendan `PanacheEntity` (opcional si está utilizando el patrón de repositorio)"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:100
#, fuzzy
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "Siga la  link:hibernate-orm.html#setting-up-and-configuring-hibernate-orm[guía de instalación de Hibernate para toda la configuración]."

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:102
#, fuzzy
msgid "In your `pom.xml`, add the following dependencies:"
msgstr "En su `pom.xml`, añada las siguientes dependencias:"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:104
#, fuzzy
msgid "the Hibernate Reactive with Panache extension"
msgstr "la extensión Hibernate Reactive with Panache"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:105
#, fuzzy
msgid "your reactive driver extension (`quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"
msgstr "su extensión de controlador reactivo ( `quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:107
#, fuzzy
msgid "For instance:"
msgstr "Por ejemplo:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:116
#, no-wrap
msgid ""
"<!-- Hibernate Reactive dependency -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-reactive-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:122
#, no-wrap
msgid ""
"<!-- Reactive SQL client for PostgreSQL -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:129
#, no-wrap
msgid ""
"// Hibernate Reactive dependency\n"
"implementation(\"io.quarkus:quarkus-hibernate-reactive-panache\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:132
#, no-wrap
msgid ""
"Reactive SQL client for PostgreSQL\n"
"implementation(\"io.quarkus:quarkus-reactive-pg-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:135
#, fuzzy
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "A continuación, añada las propiedades de configuración pertinentes en `{config-file}`."

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:143
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.reactive.url = vertx-reactive:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:146
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:148
#, fuzzy, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "Solución 1: utilizar el patrón de registro activo"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:150
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:275
#, fuzzy, no-wrap
msgid "Defining your entity"
msgstr "Definir su entidad"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:154
#, fuzzy
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr "Para definir una entidad Panache, simplemente extienda `PanacheEntity` , anótela con `@Entity` y añada sus columnas como campos públicos:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:163
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:167
#, fuzzy
msgid "You can put all your JPA column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "Puede poner todas sus anotaciones de columna JPA en los campos públicos. Si necesita que un campo no sea persistido, utilice la anotación `@Transient` en él. Si necesita escribir accessors, puede hacerlo:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:180
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:186
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:191
#, fuzzy
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "Y gracias a nuestra reescritura de accesos a campos, cuando sus usuarios lean `person.name` llamarán en realidad a su accesor `getName()` , y de forma similar para las escrituras de campos y el setter. Esto permite un encapsulamiento adecuado en tiempo de ejecución, ya que todas las llamadas a los campos serán sustituidas por las correspondientes llamadas al getter/setter."

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:192
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:358
#, fuzzy, no-wrap
msgid "Most useful operations"
msgstr "Operaciones más útiles"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:195
#, fuzzy
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "Una vez que haya escrito su entidad, estas son las operaciones más comunes que podrá realizar:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:203
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:206
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:209
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:375
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:215
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:218
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:221
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = Person.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:224
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:227
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:230
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:233
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteAliveOperation = Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:236
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:239
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = Person.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:242
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:244
#, fuzzy, no-wrap
msgid "Adding entity methods"
msgstr "Añadir métodos de entidad"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:249
#, fuzzy
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "Añada consultas personalizadas sobre sus entidades dentro de las propias entidades. De ese modo, usted y sus colaboradores podrán encontrarlas fácilmente, y las consultas estarán ubicadas junto al objeto sobre el que operan. Añadirlas como métodos estáticos en su clase de entidad es la manera Panache Active Record."

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:272
#, fuzzy, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "Solución 2: utilizar el patrón de repositorio"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:278
#, fuzzy
msgid "When using the repository pattern, you can define your entities as regular JPA entities."
msgstr "Al utilizar el patrón de repositorio, puede definir sus entidades como entidades JPA normales."

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:287
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:313
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:317
#, fuzzy
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "Si no quiere molestarse en definir getters/setters para sus entidades, puede hacer que extiendan `PanacheEntityBase` y Quarkus los generará por usted. Incluso puede extender `PanacheEntity` y aprovechar el ID por defecto que proporciona."

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:318
#, fuzzy, no-wrap
msgid "Defining your repository"
msgstr "Definir el repositorio"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:322
#, fuzzy
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr "Cuando utilice Repositorios, obtendrá exactamente los mismos métodos convenientes que con el patrón de registro activo, inyectados en su Repositorio, haciendo que implementen `PanacheRepository` :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:327
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:329
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:333
#, no-wrap
msgid ""
"   public Uni<Person> findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:337
#, no-wrap
msgid ""
"   public Uni<List<Person>> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:342
#, no-wrap
msgid ""
"   public Uni<Long> deleteStefs(){\n"
"       return delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:346
#, fuzzy
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "Todas las operaciones que se definen en `PanacheEntityBase` están disponibles en su repositorio, por lo que utilizarlo es exactamente igual que utilizar el patrón de registro activo, salvo que necesita inyectarlo:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:351
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:356
#, no-wrap
msgid ""
"@GET\n"
"public Uni<Long> count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:361
#, fuzzy
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "Una vez que haya escrito su repositorio, estas son las operaciones más comunes que podrá realizar:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:369
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:372
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:381
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:384
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:387
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = personRepository.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:390
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:393
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:396
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:399
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteLivingOperation = personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:402
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:405
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = personRepository.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:408
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:413
#, fuzzy
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "El resto de la documentación muestra usos basados únicamente en el patrón de registro activo, pero tenga en cuenta que también pueden realizarse con el patrón de repositorio. Los ejemplos del patrón de repositorio se han omitido por brevedad."

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:414
#, fuzzy, no-wrap
msgid "Advanced Query"
msgstr "Consulta avanzada"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:416
#, fuzzy, no-wrap
msgid "Paging"
msgstr "Paging"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:420
#, fuzzy
msgid "You should only use the `list` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "Sólo debe utilizar los métodos `list` si su tabla contiene conjuntos de datos lo suficientemente pequeños. Para conjuntos de datos más grandes puede utilizar los equivalentes del método `find` , que devuelven un `PanacheQuery` sobre el que puede realizar la paginación:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:425
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:461
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:428
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:431
#, no-wrap
msgid ""
"// get the first page\n"
"Uni<List<Person>> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:434
#, no-wrap
msgid ""
"// get the second page\n"
"Uni<List<Person>> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:437
#, no-wrap
msgid ""
"// get page 7\n"
"Uni<List<Person>> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:440
#, no-wrap
msgid ""
"// get the number of pages\n"
"Uni<Integer> numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:443
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"Uni<Long> count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:449
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"Uni<List<Person>> persons = Person.find(\"status\", Status.Alive)\n"
"        .page(Page.ofSize(25))\n"
"        .nextPage()\n"
"        .list();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:452
#, fuzzy
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "El tipo `PanacheQuery` tiene muchos otros métodos para tratar la paginación y la devolución de flujos."

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:453
#, fuzzy, no-wrap
msgid "Using a range instead of pages"
msgstr "Utilizar un rango en lugar de páginas"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:456
#, fuzzy
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` también permite realizar consultas basadas en rangos."

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:464
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:467
#, no-wrap
msgid ""
"// get the range\n"
"Uni<List<Person>> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:470
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"Uni<List<Person>> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:476
#, fuzzy
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "No puede mezclar rangos y páginas: si utiliza un rango, todos los métodos que dependan de tener una página actual lanzarán un `UnsupportedOperationException` ; puede volver a la paginación utilizando `page(Page)` o `page(int, int)` ."

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:478
#, fuzzy, no-wrap
msgid "Sorting"
msgstr "Clasificación"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:481
#, fuzzy
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "Todos los métodos que aceptan una cadena de consulta también aceptan la siguiente forma de consulta simplificada:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:485
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:488
#, fuzzy
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "Pero estos métodos también aceptan un parámetro opcional `Sort`, que permite abstraer la ordenación:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:492
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:495
#, no-wrap
msgid ""
"// and with more restrictions\n"
"Uni<List<Person>> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:498
#, no-wrap
msgid ""
"// and list first the entries with null values in the field \"birth\"\n"
"Uni<List<Person>> persons = Person.list(Sort.by(\"birth\", Sort.NullPrecedence.NULLS_FIRST));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:501
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr "La clase `Sort` tiene muchos métodos para añadir columnas y especificar la dirección de la ordenación."

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:502
#, fuzzy, no-wrap
msgid "Simplified queries"
msgstr "Consultas simplificadas"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:506
#, fuzzy
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr "Normalmente, las consultas HQL tienen esta forma: `from EntityName [where …​] [order by …​]` , con elementos opcionales al final."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:508
#, fuzzy
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "Si su consulta de selección no comienza con `from`, admitimos las siguientes formas adicionales:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:510
#, fuzzy
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by …​` que se ampliará a `from EntityName order by …​`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:511
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`&amp;lt;singleColumnName&amp;gt;` (y un solo parámetro) que se expandirá a `from EntityName where &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:512
#, fuzzy
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`&amp;lt;query&amp;gt;` se ampliará a `from EntityName where &amp;lt;query&amp;gt;`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:514
#, fuzzy
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "Si su consulta de actualización no comienza con `update`, admitimos las siguientes formas adicionales:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:516
#, fuzzy
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr "`from EntityName …​` que se ampliará a `update from EntityName …​`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:517
#, fuzzy
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr "`set? &amp;lt;singleColumnName&amp;gt;` (y un solo parámetro) que se expandirá a `update from EntityName set &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:518
#, fuzzy
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr "`set? &amp;lt;update-query&amp;gt;` se ampliará a `update from EntityName set &amp;lt;update-query&amp;gt;`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:520
#, fuzzy
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "Si su consulta de eliminación no empieza por `delete`, admitimos las siguientes formas adicionales:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:522
#, fuzzy
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName …​` que se ampliará a `delete from EntityName …​`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:523
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr "`&amp;lt;singleColumnName&amp;gt;` (y un solo parámetro) que se expandirá a `delete from EntityName where &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:524
#, fuzzy
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`&amp;lt;query&amp;gt;` se ampliará a `delete from EntityName where &amp;lt;query&amp;gt;`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:527
#, fuzzy
msgid "You can also write your queries in plain link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]:"
msgstr "También puede escribir sus consultas en link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL] simple:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:532
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update from Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:534
#, fuzzy, no-wrap
msgid "Named queries"
msgstr "Consultas con nombre"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:537
#, fuzzy
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "Puede hacer referencia a una consulta con nombre en lugar de una consulta HQL (simplificada) anteponiendo a su nombre el carácter \"#\". También puede utilizar consultas con nombre para las consultas de recuento, actualización y eliminación."

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:551
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQueries({\n"
"    @NamedQuery(name = \"Person.getByName\", query = \"from Person where name = ?1\"),\n"
"    @NamedQuery(name = \"Person.countByStatus\", query = \"select count(*) from Person p where p.status = :status\"),\n"
"    @NamedQuery(name = \"Person.updateStatusById\", query = \"update Person p set p.status = :status where p.id = :id\"),\n"
"    @NamedQuery(name = \"Person.deleteById\", query = \"delete from Person p where p.id = ?1\")\n"
"})\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:555
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:559
#, no-wrap
msgid ""
"    public static Uni<Long> countByStatus(Status status) {\n"
"        return count(\"#Person.countByStatus\", Parameters.with(\"status\", status).map());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:563
#, no-wrap
msgid ""
"    public static Uni<Long> updateStatusById(Status status, Long id) {\n"
"        return update(\"#Person.updateStatusById\", Parameters.with(\"status\", status).and(\"id\", id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:568
#, no-wrap
msgid ""
"    public static Uni<Long> deleteById(Long id) {\n"
"        return delete(\"#Person.deleteById\", id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:574
#, fuzzy
msgid "Named queries can only be defined inside your JPA entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr "Las consultas con nombre sólo pueden definirse dentro de sus clases de entidad JPA (ya sea la clase de entidad Panache, o el tipo parametrizado del repositorio), o en una de sus superclases."

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:576
#, fuzzy, no-wrap
msgid "Query parameters"
msgstr "Parámetros de consulta"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:579
#, fuzzy
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "Puede pasar los parámetros de consulta por índice (basado en 1) como se muestra a continuación:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:583
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:586
#, fuzzy
msgid "Or by name using a `Map`:"
msgstr "O por el nombre utilizando un `Map`:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:593
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:596
#, fuzzy
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "O utilizando la clase de conveniencia `Parameters` ya sea tal cual o para construir un `Map`:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:602
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:606
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:609
#, fuzzy
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "Cada operación de consulta acepta el paso de parámetros por índice ( `Object…​`), o por nombre ( `Map&amp;lt;String,Object&amp;gt;` o `Parameters`)."

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:610
#, fuzzy, no-wrap
msgid "Query projection"
msgstr "Proyección de la consulta"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:613
#, fuzzy
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "La proyección de la consulta puede realizarse con el método `project(Class)` sobre el objeto `PanacheQuery` que es devuelto por los métodos `find()`."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:615
#, fuzzy
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "Puede utilizarlo para restringir los campos que devolverá la base de datos."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:619
#, fuzzy
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]"
msgstr "Hibernate utilizará la *proyección DTO* y generará una cláusula SELECT con los atributos de la clase de proyección. Esto también se denomina *instanciación dinámica* o *expresión* del constructor, puede encontrar más información en la guía de Hibernate: link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select] clause"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:622
#, fuzzy
msgid "The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr "La clase de proyección debe ser un Java Bean válido y tener un constructor que contenga todos sus atributos, este constructor se utilizará para instanciar el DTO de proyección en lugar de utilizar la clase de entidad. Este debe ser el único constructor de la clase."

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:626
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:685
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:630
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:635
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:638
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:640
#, fuzzy
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "La anotación `@RegisterForReflection` indica a Quarkus que mantenga la clase y sus miembros durante la compilación nativa. Se pueden encontrar más detalles sobre la anotación `@RegisterForReflection` en la página de  link:writing-native-applications-tips.html#registerForReflection[consejos para aplicaciones] nativas."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:641
#, fuzzy
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "Aquí utilizamos campos públicos, pero puedes utilizar campos privados y getters/setters si lo prefieres."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:642
#, fuzzy
msgid "This constructor will be used by Hibernate, and it must have a matching constructor with all the class attributes as parameters."
msgstr "Este constructor será utilizado por Hibernate, y debe tener un constructor coincidente con todos los atributos de la clase como parámetros."

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:649
#, fuzzy
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr "La implementación del método `project(Class)` utiliza los nombres de los parámetros del constructor para construir la cláusula select de la consulta, por lo que el compilador debe estar configurado para almacenar los nombres de los parámetros dentro de la clase compilada. Esto está habilitado por defecto si está utilizando el arquetipo Quarkus Maven. Si no lo está utilizando, añada la propiedad `<maven.compiler.parameters>true</maven.compiler.parameters>` a su pom.xml."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:652
#, fuzzy
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "Si en el objeto de proyección DTO tiene un campo de una entidad referenciada, puede utilizar la anotación `@ProjectedFieldName` para proporcionar la ruta para la sentencia SELECT."

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:663
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    public Double weight;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:668
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:674
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:676
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:678
#, fuzzy
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "El parámetro del constructor `ownerName` DTO se cargará desde la propiedad HQL `owner.name`."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:681
#, fuzzy
msgid "It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor matching the values returned by the select clause:"
msgstr "También es posible especificar una consulta HQL con una cláusula select. En este caso, la clase de proyección debe tener un constructor que coincida con los valores devueltos por la cláusula select:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:690
#, no-wrap
msgid ""
"@RegisterForReflection \n"
"public class RaceWeight {\n"
"    public final String race;\n"
"    public final Double weight\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:694
#, no-wrap
msgid ""
"    public RaceWeight(String race) {\n"
"        this(race, null);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:700
#, no-wrap
msgid ""
"    public RaceWeight(String race, Double weight) { // <1>\n"
"        this.race = race;\n"
"        this.weight = weight;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:703
#, no-wrap
msgid ""
"// Only the race and the average weight will be loaded\n"
"PanacheQuery<RaceWeight> query = Person.find(\"select d.race, AVG(d.weight) from Dog d group by d.race).project(RaceWeight.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:705
#, fuzzy
msgid "Hibernate Reactive will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr "Hibernate Reactive utilizará este constructor. Cuando la consulta tiene una cláusula select, es posible tener múltiples constructores."

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:709
#, fuzzy
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr "No es posible tener una consulta HQL `select new` y `.project(Class)` al mismo tiempo - tiene que elegir un enfoque."

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:711
#, fuzzy
msgid "For example, this will fail:"
msgstr "Por ejemplo, esto fallará:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:714
#, no-wrap
msgid "PanacheQuery<RaceWeight> query = Person.find(\"select new MyView(d.race, AVG(d.weight)) from Dog d group by d.race).project(AnotherView.class);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:717
#, fuzzy, no-wrap
msgid "Multiple Persistence Units"
msgstr "Unidades de persistencia múltiple"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:720
#, fuzzy
msgid "Hibernate Reactive in Quarkus currently does not support multiple persistence units."
msgstr "Hibernate Reactive en Quarkus actualmente no soporta múltiples unidades de persistencia."

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:721
#, fuzzy, no-wrap
msgid "Transactions"
msgstr "Transacciones"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:727
#, fuzzy
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@ReactiveTransactional` will do that for you and make that method a transaction boundary. Alternatively, you can use `Panache.withTransaction()` for the same effect. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "Asegúrese de envolver los métodos que modifican su base de datos (por ejemplo `entity.persist()` ) dentro de una transacción. Marcar un método CDI bean `@ReactiveTransactional` lo hará por usted y convertirá ese método en un límite de transacción. Alternativamente, puede utilizar `Panache.withTransaction()` para el mismo efecto. Le recomendamos que lo haga en los límites de los puntos de entrada de su aplicación, como los controladores de sus puntos finales REST."

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:731
msgid "You cannot use `@Transactional` with Hibernate Reactive for your transactions: you must use `@ReactiveTransactional`, and your annotated method must return a `Uni` to be non-blocking. Otherwise, it needs be called from a non-`VertxThread` thread and will become blocking."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:737
msgid "JPA batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.  This is usually a good thing as it is more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when JPA send those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:739
#, fuzzy
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "He aquí un ejemplo del uso del método de descarga para permitir realizar una acción específica en caso de `PersistenceException`:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:753
#, no-wrap
msgid ""
"@ReactiveTransactional\n"
"public Uni<Void> create(Person person){\n"
"    //Here I use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"    return person.persistAndFlush()\n"
"            .onFailure(PersistenceException.class)\n"
"            .recoverWithItem(() -> {\n"
"                LOG.error(\"Unable to create the parameter\", pe);\n"
"                //in case of error, I save it to disk\n"
"                diskPersister.save(person);\n"
"                return null;\n"
"            });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:761
#, fuzzy
msgid "The `@ReactiveTransactional` annotation will also work for testing.  This means that changes done during the test will be propagated to the database.  If you want any changes made to be rolled back at the end of the test you can use the `io.quarkus.test.TestReactiveTransaction` annotation.  This will run the test method in a transaction, but roll it back once the test method is complete to revert any database changes."
msgstr "La anotación `@ReactiveTransactional` también funcionará para las pruebas. Esto significa que los cambios realizados durante la prueba se propagarán a la base de datos. Si desea que los cambios realizados se reviertan al final de la prueba, puede utilizar la anotación `io.quarkus.test.TestReactiveTransaction` . Esto ejecutará el método de prueba en una transacción, pero lo revertirá una vez que el método de prueba haya finalizado para revertir cualquier cambio realizado en la base de datos."

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:762
#, fuzzy, no-wrap
msgid "Lock management"
msgstr "Gestión de cerraduras"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:765
#, fuzzy
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panache proporciona soporte directo para el bloqueo de la base de datos con su entidad/repositorio, utilizando `findById(Object, LockModeType)` o `find().withLock(LockModeType)`."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:767
#, fuzzy
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "Los siguientes ejemplos son para el patrón de registro activo, pero se puede utilizar lo mismo con los repositorios."

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:768
#, fuzzy, no-wrap
msgid "First: Locking using findById()."
msgstr "Primero: Bloqueo mediante findById()."

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:773
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:791
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:784
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByIdForUpdate(Long id){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>findById(id, LockModeType.PESSIMISTIC_WRITE)\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:786
#, fuzzy, no-wrap
msgid "Second: Locking in a find()."
msgstr "Segundo: Bloqueo en un find()."

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:801
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByNameForUpdate(String name){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).firstResult()\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:803
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:806
#, fuzzy
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be called within a transaction."
msgstr "Hay que tener en cuenta que los bloqueos se liberan cuando la transacción termina, por lo que el método que invoca la consulta de bloqueo debe ser llamado dentro de una transacción."

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:807
#, fuzzy, no-wrap
msgid "Custom IDs"
msgstr "Identificaciones personalizadas"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:811
#, fuzzy
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr "Las identificaciones suelen ser un tema delicado, y no todo el mundo está dispuesto a dejar que las maneje el marco, una vez más le tenemos cubierto."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:814
#, fuzzy
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr "Puede especificar su propia estrategia de ID ampliando `PanacheEntityBase` en lugar de `PanacheEntity` . A continuación, sólo tiene que declarar el ID que desee como campo público:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:819
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:828
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:831
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:835
#, fuzzy
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr "Si utiliza repositorios, entonces querrá ampliar `PanacheRepositoryBase` en lugar de `PanacheRepository` y especificar su tipo de ID como un parámetro de tipo adicional:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:842
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:844
#, fuzzy, no-wrap
msgid "Mocking"
msgstr "Burlándose de"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:846
#, fuzzy, no-wrap
msgid "Using the active record pattern"
msgstr "Uso del patrón de registro activo"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:851
#, fuzzy
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "Si está utilizando el patrón de registro activo, no puede utilizar Mockito directamente, ya que no admite la burla de métodos estáticos, pero puede utilizar el módulo `quarkus-panache-mock` , que le permite utilizar Mockito para burlarse de todos los métodos estáticos proporcionados, incluidos los suyos propios."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:853
#, fuzzy
msgid "Add this dependency to your build file:"
msgstr "Añada esta dependencia a su archivo de compilación:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:862
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:868
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-panache-mock\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:871
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:987
#, fuzzy
msgid "Given this simple entity:"
msgstr "Dada esta simple entidad:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:876
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:878
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:883
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:886
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1014
#, fuzzy
msgid "You can write your mocking test like this:"
msgstr "Puedes escribir tu prueba de burla así:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:891
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:895
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:898
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:902
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(23l));\n"
"        Assertions.assertEquals(23, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:906
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(42l));\n"
"        Assertions.assertEquals(42, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:910
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:913
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:919
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"        Assertions.assertSame(p, Person.findById(12l).await().indefinitely());\n"
"        Assertions.assertNull(Person.findById(42l).await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:927
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException());\n"
"        try {\n"
"            Person.findById(12l);\n"
"            Assertions.fail();\n"
"        } catch (WebApplicationException x) {\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:931
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Uni.createFrom().item(Collections.emptyList()));\n"
"        Assertions.assertTrue(Person.findOrdered().await().indefinitely().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:937
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:940
#, fuzzy
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "Asegúrese de llamar a sus métodos `verify` y `do*` en `PanacheMock` en lugar de `Mockito` , de lo contrario no sabrá qué objeto simulado pasar."

#. type: Title ====
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:941
#, fuzzy, no-wrap
msgid "Mocking `Mutiny.Session` and entity instance methods"
msgstr "Mocking `Mutiny.Session` y métodos de instancia de entidad"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:944
#, fuzzy
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate Reactive `Mutiny.Session` object:"
msgstr "Si necesita imitar métodos de instancia de entidad, como `persist()` , puede hacerlo imitando el objeto Hibernate Reactive `Mutiny.Session` :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:949
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMockingTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:952
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Mutiny.Session session;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:959
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheSessionMocking() {\n"
"        Person p = new Person();\n"
"        // mocked via Mutiny.Session mocking\n"
"        p.persist().await().indefinitely();\n"
"        Assertions.assertNull(p.id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:963
#, no-wrap
msgid ""
"        Mockito.verify(session, Mockito.times(1)).persist(Mockito.any());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:965
#, fuzzy, no-wrap
msgid "Using the repository pattern"
msgstr "Uso del patrón de repositorio"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:969
#, fuzzy
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "Si está utilizando el patrón de repositorio puede utilizar Mockito directamente, utilizando el módulo `quarkus-junit5-mockito` , lo que hace que mocking beans sea mucho más fácil:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:978
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:984
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-junit5-mockito\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:992
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:996
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:999
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1002
#, fuzzy
msgid "And this repository:"
msgstr "Y este depósito:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1011
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1021
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1026
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1030
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(23l));\n"
"        Assertions.assertEquals(23, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1034
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(42l));\n"
"        Assertions.assertEquals(42, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1038
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1041
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(mockablePersonRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1047
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(mockablePersonRepository.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"        Assertions.assertSame(p, mockablePersonRepository.findById(12l).await().indefinitely());\n"
"        Assertions.assertNull(mockablePersonRepository.findById(42l).await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1055
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(mockablePersonRepository.findById(12l)).thenThrow(new WebApplicationException());\n"
"        try {\n"
"            mockablePersonRepository.findById(12l);\n"
"            Assertions.fail();\n"
"        } catch (WebApplicationException x) {\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1059
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(Uni.createFrom().item(Collections.emptyList()));\n"
"        Assertions.assertTrue(mockablePersonRepository.findOrdered().await().indefinitely().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1066
#, no-wrap
msgid ""
"        Mockito.verify(mockablePersonRepository).findOrdered();\n"
"        Mockito.verify(mockablePersonRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verify(mockablePersonRepository).persist(Mockito.<Person> any());\n"
"        Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1068
#, fuzzy, no-wrap
msgid "How and why we simplify Hibernate Reactive mappings"
msgstr "Cómo y por qué simplificamos los mapeos de Hibernate Reactive"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1072
#, fuzzy
msgid "When it comes to writing Hibernate Reactive entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "Cuando se trata de escribir entidades Hibernate Reactive, hay una serie de cosas molestas con las que los usuarios se han acostumbrado a lidiar a regañadientes, tales como:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1075
#, fuzzy
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really relevant to your model."
msgstr "Duplicar la lógica del ID: la mayoría de las entidades necesitan un ID, a la mayoría de la gente no le importa cómo se establece, porque no es realmente relevante para su modelo."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1078
#, fuzzy
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr "Getters y setters tontos: como Java carece de soporte para propiedades en el lenguaje, tenemos que crear campos y luego generar getters y setters para esos campos, aunque en realidad no hagan nada más que leer/escribir los campos."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1084
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "Los patrones EE tradicionales aconsejan dividir la definición de la entidad (el modelo) de las operaciones que puede hacer sobre ellas (DAOs, Repositorios), pero realmente eso requiere una división antinatural entre el estado y sus operaciones aunque nunca haríamos algo así para objetos normales en la arquitectura Orientada a Objetos, donde el estado y los métodos están en la misma clase. Además, esto requiere dos clases por entidad, y requiere la inyección de la DAO o Repositorio donde necesite hacer operaciones de entidad, lo que rompe su flujo de edición y requiere que salga del código que está escribiendo para establecer un punto de inyección antes de volver a utilizarlo."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1086
#, fuzzy
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "Las consultas de Hibernate son superpotentes, pero excesivamente prolijas para las operaciones comunes, lo que le obliga a escribir consultas incluso cuando no necesita todas las partes."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1088
#, fuzzy
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr "Hibernate es muy polivalente, pero no permite realizar las operaciones triviales que constituyen el 90% del uso de nuestro modelo."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1090
#, fuzzy
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Con Panache, adoptamos un enfoque de opinión para abordar todos estos problemas:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1093
#, fuzzy
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "Haga que sus entidades extiendan `PanacheEntity` : tiene un campo ID que se genera automáticamente. Si necesita una estrategia de ID personalizada, puede extender `PanacheEntityBase` en su lugar y gestionar el ID usted mismo."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1096
#, fuzzy
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "Utilice campos públicos. Deshágase de los getter y setters tontos. Bajo el capó, generaremos todos los getters y setters que falten, y reescribiremos todos los accesos a estos campos para que utilicen los métodos accessor. De esta forma podrá seguir escribiendo accesores _útiles_ cuando los necesite, que se utilizarán aunque los usuarios de su entidad sigan utilizando accesos a campos."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1099
#, fuzzy
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "Con el patrón de registro activo: ponga toda su lógica de entidad en métodos estáticos en su clase de entidad y no cree DAOs. Su superclase de entidad viene con un montón de métodos estáticos superútiles, y usted puede añadir los suyos propios en su clase de entidad. Los usuarios pueden simplemente empezar a utilizar su entidad `Person` escribiendo `Person.` y obteniendo la finalización de todas las operaciones en un único lugar."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1102
#, fuzzy
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr "No escriba partes de la consulta que no necesite: escriba `Person.find(\"order by name\")` o `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` o incluso mejor `Person.find(\"name\", \"stef\")` ."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1104
#, fuzzy
msgid "That's all there is to it: with Panache, Hibernate Reactive has never looked so trim and neat."
msgstr "Eso es todo: con Panache, Hibernate Reactive nunca ha tenido un aspecto tan cuidado."

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1105
#, fuzzy, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "Definición de entidades en proyectos o tarros externos"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1108
#, fuzzy
msgid "Hibernate Reactive with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "Hibernate Reactive with Panache se basa en mejoras de código de bytes en tiempo de compilación para sus entidades."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1114
#, fuzzy
msgid "It attempts to identify archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "Intenta identificar los archivos con entidades Panache (y los consumidores de entidades Panache) por la presencia del archivo marcador `META-INF/panache-archive.marker` . Panache incluye un procesador de anotaciones que creará automáticamente este archivo en los archivos que dependan de Panache (incluso indirectamente). Si ha desactivado los procesadores de anotación, es posible que tenga que crear este archivo manualmente en algunos casos."

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1118
#, fuzzy
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr "Si incluye el procesador de anotaciones jpa-modelgen, éste excluirá por defecto el procesador de anotaciones Panache. Si lo hace, deberá crear usted mismo el archivo de marcadores o añadir también `quarkus-panache-common` , como se muestra a continuación:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-reactive-panache.adoc:1139
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""
