# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:6
#, fuzzy, no-wrap
msgid "Mutiny - Async for bare mortal"
msgstr "Motín - Async para el mortal desnudo"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:12
#, fuzzy
msgid "https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, reactive programming library.  It is the primary model to write reactive applications with Quarkus."
msgstr "link:https://smallrye.io/smallrye-mutiny[Mutiny] es una biblioteca de programación intuitiva y reactiva. Es el modelo principal para escribir aplicaciones reactivas con Quarkus."

#. type: Title ==
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:13
#, fuzzy, no-wrap
msgid "An event-driven reactive programming API"
msgstr "Una API de programación reactiva basada en eventos"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:19
#, fuzzy
msgid "Mutiny is very different from the other reactive programming libraries.  It takes a different approach to design your program.  With Mutiny everything is event-driven: you receive events, and you react to them.  This event-driven aspect embraces the asynchronous nature of distributed systems and provides an elegant and precise way to express continuation."
msgstr "Mutiny es muy diferente de las demás bibliotecas de programación reactiva. Adopta un enfoque diferente para diseñar su programa. Con Mutiny todo está dirigido por eventos: usted recibe eventos y reacciona a ellos. Este aspecto dirigido por eventos abarca la naturaleza asíncrona de los sistemas distribuidos y proporciona una forma elegante y precisa de expresar la continuación."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:21
#, fuzzy
msgid "Mutiny offers two types that are both event-driven and lazy:"
msgstr "Mutiny ofrece dos tipos que se basan en eventos y son perezosos:"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:25
#, fuzzy
msgid "A `Uni` emits a single event (an item or a failure).  Unis are convenient to represent asynchronous actions that return 0 or 1 result.  A good example is the result of sending a message to a message broker queue."
msgstr "Un `Uni` emite un único evento (un resultado o un fallo). Los unis son convenientes para representar acciones asíncronas que devuelven 0 o 1 resultado. Un buen ejemplo es el resultado de enviar un mensaje a la cola de un corredor de mensajes."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:28
#, fuzzy
msgid "A `Multi` emits multiple events (n items, 1 failure or 1 completion).  Multis can represent streams of items, potentially unbounded.  A good example is receiving messages from a message broker queue."
msgstr "Un `Multi` emite múltiples eventos (n ítems, 1 fallo o 1 finalización). Los multis pueden representar flujos de elementos, potencialmente ilimitados. Un buen ejemplo es la recepción de mensajes de una cola de intermediarios de mensajes."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:34
#, fuzzy
msgid "These two types allow representing any type of interactions.  They are event sources.  You observe them (_subscription_) and you get notified when they emit an item, a failure, or, in the case of a bounded Multi, a completion event.  When you (the subscriber) receive the event, you can process it (e.g., transform it, filter it).  With Mutiny, you are going to write code like _onX().action()_, which reads as “on item X do action”."
msgstr "Estos dos tipos permiten representar cualquier tipo de interacciones. Son fuentes de eventos. Usted las observa ( _suscripción_ ) y recibe una notificación cuando emiten un elemento, un fallo o, en el caso de un Multi delimitado, un evento de finalización. Cuando usted (el suscriptor) recibe el evento, puede procesarlo (por ejemplo, transformarlo, filtrarlo). Con Mutiny, va a escribir código como _onX().action()_ , que se lee como \"en el elemento X realizar una acción\"."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:36
#, fuzzy
msgid "If you want to know more about Mutiny, and the concepts behind it, check https://smallrye.io/smallrye-mutiny/latest/reference/why-is-asynchronous-important[the Mutiny Reference documentation]."
msgstr "Si quiere saber más sobre el motín y los conceptos que lo sustentan, consulte  link:https://smallrye.io/smallrye-mutiny/pages/philosophy[la filosofía del motín]."

#. type: Title ==
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:37
#, fuzzy, no-wrap
msgid "Mutiny in Quarkus"
msgstr "Motín en Quarkus"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:41
#, fuzzy
msgid "Mutiny is the primary API when dealing with the reactive features from Quarkus.  It means that most extensions support Mutiny either by exposing an API returning Unis and Multis (such as reactive data sources or rest clients) or understanding when your methods return a Uni or a Multi (such as RESTEasy Reactive or Reactive Messaging)."
msgstr "Mutiny es la API principal cuando se trata de las características reactivas de Quarkus. Significa que la mayoría de las extensiones soportan Mutiny ya sea exponiendo una API que devuelva Unis y Multis (como las fuentes de datos reactivas o los clientes rest) o entendiendo cuando sus métodos devuelven un Uni o un Multi (como RESTEasy Reactive o Reactive Messaging)."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:44
#, fuzzy
msgid "These integrations make Mutiny a prominent and cohesive model for every reactive application developed with Quarkus.  In addition, Mutiny architecture allows fine-grain dead-code elimination which improves the memory usage when compiled to native (such as with Quarkus native mode or GraalVM native image compiler)."
msgstr "Estas integraciones hacen de Mutiny un modelo destacado y cohesivo para toda aplicación reactiva desarrollada con Quarkus. Además, la arquitectura de Mutiny permite la eliminación de código muerto de grano fino, lo que mejora el uso de memoria cuando se compila a nativo (como con el modo nativo de Quarkus o el compilador de imágenes nativo GraalVM)."

#. type: Title ==
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:45
#, fuzzy, no-wrap
msgid "Why another reactive programming API?"
msgstr "¿Por qué otra API de programación reactiva?"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:49
#, fuzzy
msgid "Seasoned reactive developers may wonder why Quarkus introduced yet another reactive programming APIs while there are existing ones.  Mutiny is taking a very different angle:"
msgstr "Los desarrolladores reactivos experimentados quizá se pregunten por qué Quarkus ha introducido otra API de programación reactiva cuando ya existen otras. Mutiny adopta un punto de vista muy diferente:"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:54
#, fuzzy, no-wrap
msgid ""
"**Event-Driven** -\n"
"Mutiny places events at the core of its design.\n"
"With Mutiny, you observe events, react to them, and create elegant and readable processing pipelines.\n"
"A Ph.D. in functional programming is not required.\n"
msgstr "*Impulsado por eventos* - Mutiny sitúa los eventos en el centro de su diseño. Con Mutiny, usted observa los eventos, reacciona ante ellos y crea tuberías de procesamiento elegantes y legibles. No se requiere un doctorado en programación funcional."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:57
#, fuzzy, no-wrap
msgid ""
"**Navigable** - Even with intelligent code completion, classes with hundreds of methods are confusing.\n"
"Mutiny provides a navigable and explicit API driving you towards the operator you need.\n"
msgstr "*Navegable* - Incluso con el completado inteligente de código, las clases con cientos de métodos resultan confusas. Mutiny proporciona una API navegable y explícita que le conduce hacia el operador que necesita."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:60
#, fuzzy, no-wrap
msgid ""
"**Non-Blocking I/O** - Mutiny is the perfect companion to tame the asynchronous nature of applications with non-blocking I/O (which powers xref:quarkus-reactive-architecture.adoc[Quarkus]).\n"
"Declaratively compose operations, transform data, enforce progress, recover from failures, and more.\n"
msgstr "*E/S* sin bloqueo - Mutiny es el compañero perfecto para domar la naturaleza asíncrona de las aplicaciones con E/S sin bloqueo (que potencia xref:quarkus-reactive-architecture.adoc[Quarkus] ). Componga operaciones de forma declarativa, transforme datos, imponga el progreso, recupérese de fallos y mucho más."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:62
#, fuzzy, no-wrap
msgid "**Made for an asynchronous world** - Mutiny can be used in any asynchronous application such as event-driven microservices, message-based applications, network utilities, data stream processing, and of course... reactive applications!\n"
msgstr "*Hecho para un mundo asíncrono* - Mutiny puede utilizarse en cualquier aplicación asíncrona, como microservicios impulsados por eventos, aplicaciones basadas en mensajes, utilidades de red, procesamiento de flujos de datos y, por supuesto... ¡aplicaciones reactivas!"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:65
#, fuzzy, no-wrap
msgid ""
"**Reactive Streams and Converters Built-In** - Mutiny is based on the https://www.reactive-streams.org/[Reactive Streams] specification, and so it can be integrated with any other reactive programming library.\n"
"In addition, it proposes converters to interact with other popular libraries.\n"
msgstr "link:https://www.reactive-streams.org/[Streams] *reactivos y convertidores incorporados* - Mutiny se basa en la especificación link:https://www.reactive-streams.org/[Reactive Streams] , por lo que puede integrarse con cualquier otra biblioteca de programación reactiva. Además, propone conversores para interactuar con otras bibliotecas populares."

#. type: Title ==
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:66
#, fuzzy, no-wrap
msgid "Mutiny and the I/O Threads"
msgstr "El motín y los hilos de E/S"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:72
#, fuzzy
msgid "Quarkus is powered by a xref:quarkus-reactive-architecture.adoc#engine[reactive engine], and when developing a reactive application, your code is executed on one of the few I/O threads.  Remember, you must never block these threads, and the model would collapse if you do.  So, you can't use blocking I/O.  Instead, you need to schedule the I/O operation and pass a continuation."
msgstr "Quarkus funciona con un xref:quarkus-reactive-architecture.adoc#engine[motor reac] tivo, y al desarrollar una aplicación reactiva, su código se ejecuta en uno de los pocos hilos de E/S. Recuerde, nunca debe bloquear estos hilos, y el modelo se colapsaría si lo hace. Por lo tanto, no puede utilizar E/S de bloqueo. En su lugar, necesita programar la operación de E/S y pasar una continuación."

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:73
#, fuzzy, no-wrap
msgid "Reactive"
msgstr "Reactivo"

#. type: Target for macro image
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:73
#, no-wrap
msgid "reactive-thread.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:79
#, fuzzy
msgid "The Mutiny event-driven paradigm is tailored for this.  When the I/O operation completes successfully, the Uni that represents it emits an item event.  When it fails, it emits a failure event.  The continuation is simply and naturally expressed using the event-driven API."
msgstr "El paradigma Mutiny basado en eventos está hecho a medida para ello. Cuando la operación de E/S se completa con éxito, la Uni que la representa emite un evento de elemento. Cuando falla, emite un evento de fallo. La continuación se expresa de forma sencilla y natural utilizando la API basada en eventos."

#. type: Title ==
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:80
#, fuzzy, no-wrap
msgid "Mutiny through Examples"
msgstr "El motín a través de los ejemplos"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:83
#, fuzzy
msgid "Many Quarkus extensions expose Mutiny APIs. In this section, we use the MongoDB extension to illustrate how to use Mutiny."
msgstr "Muchas extensiones de Quarkus exponen las APIs de Mutiny. En esta sección, utilizamos la extensión MongoDB para ilustrar cómo utilizar Mutiny."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:85
#, fuzzy
msgid "Let's imagine a simple structure representing an element from the https://en.wikipedia.org/wiki/Periodic_table[periodic table]:"
msgstr "Imaginemos una estructura sencilla que represente un elemento de la  link:https://en.wikipedia.org/wiki/Periodic_table[tabla periódica]:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:89
#, no-wrap
msgid "public class Element {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:93
#, no-wrap
msgid ""
"   public String name;\n"
"   public String symbol;\n"
"   public int position;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:99
#, no-wrap
msgid ""
"   public Element(String name, String symbol, int position) {\n"
"       this.name = name;\n"
"       this.symbol = symbol;\n"
"       this.position = position;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:104
#, no-wrap
msgid ""
"   public Element() {\n"
"        // Use by JSON mappers\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:108
#, fuzzy
msgid "This structure contains the name, symbol, and position of the element.  To retrieve and store elements into a Mongo collection, you can use the following code:"
msgstr "Esta estructura contiene el nombre, el símbolo y la posición del elemento. Para recuperar y almacenar elementos en una colección Mongo, puede utilizar el código siguiente:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:113
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ElementService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:115
#, no-wrap
msgid "   final ReactiveMongoCollection<Element> collection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:121
#, no-wrap
msgid ""
"   @Inject\n"
"   ElementService(ReactiveMongoClient client) {\n"
"       collection = client.getDatabase(\"quarkus\")\n"
"               .getCollection(\"elements\", Element.class);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:130
#, no-wrap
msgid ""
"   public void add(Element element) {\n"
"       Uni<InsertOneResult> insertion = collection.insertOne(element);\n"
"       insertion\n"
"           .onItem().transform(r -> r.getInsertedId().asString())\n"
"           .subscribe().with(\n"
"               result -> System.out.println(\"inserted \" + result),\n"
"               failure -> System.out.println(\"D'oh\" + failure));\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:139
#, no-wrap
msgid ""
"   public void getAll() {\n"
"       collection.find()\n"
"           .subscribe().with(\n"
"              element -> System.out.println(\"Element: \" + element),\n"
"             failure -> System.out.println(\"D'oh! \" + failure),\n"
"             () -> System.out.println(\"No more elements\")\n"
"       );\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:141
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:146
#, fuzzy
msgid "First, the Mongo client is injected.  Note that it uses the reactive variant (`io.quarkus.mongodb.reactive.ReactiveMongoClient`).  In the initialize method, we retrieve and store the collection in which elements will be inserted."
msgstr "En primer lugar, se inyecta el cliente Mongo. Observe que utiliza la variante reactiva ( `io.quarkus.mongodb.reactive.ReactiveMongoClient` ). En el método initialize, recuperamos y almacenamos la colección en la que se insertarán los elementos."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:159
#, fuzzy
msgid "The `add` method inserts an element in the collection.  It receives the element as a parameter and uses the reactive API of the collection.  Interacting with the database involves I/Os.  The reactive principles forbid blocking while waiting for the interaction to complete.  Instead, we schedule the operation and pass a continuation.  The `insertOne` method returns a Uni, i.e., an asynchronous operation.  That's the scheduled I/O. We now need to express the continuation, which is done using the `.onItem()` method.  `.onItem()` allows configuring what needs to happen when the observed Uni emits an item, in our case when the scheduled I/Os completes.  In this example, we extract the inserted document id.  The final step is the subscription.  Without it, nothing would ever happen. Subscribing triggers the operation.  The subscription method can also define handlers: the `id` value on success, or a failure when the insertion fails."
msgstr "El método `add` inserta un elemento en la colección. Recibe el elemento como parámetro y utiliza la API reactiva de la colección. La interacción con la base de datos implica E/S. Los principios reactivos prohíben el bloqueo mientras se espera a que se complete la interacción. En su lugar, programamos la operación y le pasamos una continuación. El método `insertOne` devuelve una Uni, es decir, una operación asíncrona. Esa es la E/S programada. Ahora necesitamos expresar la continuación, lo que se hace utilizando el método `.onItem()` . `.onItem()` permite configurar lo que debe ocurrir cuando el Uni observado emite un elemento, en nuestro caso cuando finaliza la E/S programada. En este ejemplo, extraemos el id del documento insertado. El último paso es la suscripción. Sin ella, nunca ocurriría nada. La suscripción desencadena la operación. El método de suscripción también puede definir manejadores: el valor `id` en caso de éxito, o un fallo cuando la inserción fracasa."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:167
#, fuzzy
msgid "Let's now look at the second method.  It retrieves all the stored elements.  In this case, it returns multiple items (one per stored element), so we are using a `Multi`.  As for the insertion, getting the stored elements involves I/Os.  The `find` is our operation.  As for Uni, you need to subscribe to trigger the operation.  The subscriber receives item events, a failure event, or a completion event when all the elements have been received."
msgstr "Veamos ahora el segundo método. Éste recupera todos los elementos almacenados. En este caso, devuelve varios elementos (uno por elemento almacenado), por lo que estamos utilizando un `Multi` . En cuanto a la inserción, obtener los elementos almacenados implica E/S. La `find` es nuestra operación. En cuanto a la Uni, necesita suscribirse para desencadenar la operación. El suscriptor recibe eventos de elementos, un evento de fallo o un evento de finalización cuando se han recibido todos los elementos."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:171
#, fuzzy
msgid "Subscribing to a Uni or a Multi is essential, as without it, the operation is never executed.  In Quarkus some extensions deal with the subscription for you.  For example, in RESTEasy Reactive your HTTP methods can return a Uni or a Multi, and RESTEasy Reactive handles the subscription."
msgstr "La suscripción a una Uni o a un Multi es esencial, ya que sin ella, la operación nunca se ejecuta. En Quarkus, algunas extensiones se ocupan de la suscripción por usted. Por ejemplo, en RESTEasy Reactive sus métodos HTTP pueden devolver un Uni o un Multi, y RESTEasy Reactive se encarga de la suscripción."

#. type: Title ==
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:172
#, fuzzy, no-wrap
msgid "Mutiny Patterns"
msgstr "Patrones de motín"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:176
#, fuzzy
msgid "The example from the last section was simplistic on purpose.  Let's have a look at a few common patterns."
msgstr "El ejemplo de la última sección era simplista a propósito. Echemos un vistazo a algunos patrones comunes."

#. type: Title ===
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:177
#, fuzzy, no-wrap
msgid "Observing events"
msgstr "Observación de eventos"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:180
#, fuzzy
msgid "You can observe the various kind of events using:"
msgstr "Puedes observar los distintos tipos de eventos utilizando:"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:182
#, fuzzy
msgid "`on{event}().invoke(ev -> System.out.println(ev));`"
msgstr "`on{event}().invoke(ev → System.out.println(ev));`"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:185
#, fuzzy
msgid "For example, for items use: `onItem().invoke(item -> ...);`"
msgstr "Por ejemplo, para el uso de artículos: `onItem().invoke(item → …​);`"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:188
#, fuzzy
msgid "For failure, use: `onFailure().invoke(failure -> ...)`"
msgstr "En caso de fallo, utilice: `onFailure().invoke(failure → …​)`"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:193
#, fuzzy
msgid "The `invoke` method is synchronous.  Sometimes you need to execute an asynchronous action.  In this case use `call`, as in: `onItem().call(item -> someAsyncAction(item))`.  Note that `call` does not change the item, it just calls an asynchronous action, and when this one completes, it emits the original item downstream."
msgstr "El método `invoke` es síncrono. A veces necesita ejecutar una acción asíncrona. En este caso utilice `call` , como en: `onItem().call(item → someAsyncAction(item))` . Observe que `call` no cambia el elemento, sólo llama a una acción asíncrona, y cuando ésta finaliza, emite el elemento original en sentido descendente."

#. type: Title ===
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:194
#, fuzzy, no-wrap
msgid "Transforming item"
msgstr "Elemento transformador"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:198
#, fuzzy
msgid "The first instrumental pattern consists of transforming the item events you receive.  As we have seen in the previous section, it could indicate the successful insertion, or the elements stored in the database."
msgstr "El primer patrón instrumental consiste en transformar los eventos de elementos que recibe. Como hemos visto en la sección anterior, puede indicar el éxito de la inserción, o los elementos almacenados en la base de datos."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:200
#, fuzzy
msgid "Transforming an item is done using: `onItem().transform(item -> ....)`."
msgstr "La transformación de un elemento se realiza mediante: `onItem().transform(item → …​.)`."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:202
#, fuzzy
msgid "More details about transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items/[Mutiny documentation]."
msgstr "Puede encontrar más detalles sobre la transformación en la  link:https://smallrye.io/smallrye-mutiny/getting-started/transforming-items[documentación de Mutiny]."

#. type: Title ===
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:203
#, fuzzy, no-wrap
msgid "Sequential composition"
msgstr "Composición secuencial"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:207
#, fuzzy
msgid "Sequential composition allows chaining dependent asynchronous operations. This is achieved using `onItem().transformToUni(item -> ...)`.  Unlike `transform`, the function passed to `transformToUni` returns a Uni."
msgstr "La composición secuencial permite encadenar operaciones asíncronas dependientes. Esto se consigue utilizando `onItem().transformToUni(item → …​)` . A diferencia de `transform` , la función pasada a `transformToUni` devuelve un Uni."

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:213
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onItem().transformtoUni(item -> anotherAsynchronousAction(item));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:216
#, fuzzy
msgid "More details about asynchronous transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items-asynchronously/[Mutiny documentation]."
msgstr "Puede encontrar más detalles sobre la transformación asíncrona en la  link:https://smallrye.io/smallrye-mutiny/getting-started/transforming-items-async[documentación de Mutiny]."

#. type: Title ===
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:217
#, fuzzy, no-wrap
msgid "Failure handling"
msgstr "Gestión de fallos"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:220
#, fuzzy
msgid "So far we only handle the item events, but handling failure is essential. You can handle failures using `onFailure()`."
msgstr "Hasta ahora sólo manejamos los eventos de los artículos, pero manejar los fallos es esencial. Puedes manejar los fallos usando `onFailure()`."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:222
#, fuzzy
msgid "For example, you can recover with a fallback item using `onFailure().recoverWithItem(fallback)`:"
msgstr "Por ejemplo, puede recuperarse con un elemento de reserva utilizando `onFailure().recoverWithItem(fallback)`:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:228
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onFailure().recoverWithItem(“my fallback value”);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:231
#, fuzzy
msgid "You can also retry the operation such as in:"
msgstr "También puedes reintentar la operación como en:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:237
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onFailure().retry().atMost(5);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:240
#, fuzzy
msgid "More info about failure recovery can be found on https://smallrye.io/smallrye-mutiny/latest/tutorials/handling-failures/[the handling failure documentation] and https://smallrye.io/smallrye-mutiny/latest/tutorials/retrying/[the retrying on failures documentation]."
msgstr "Puede encontrar más información sobre la recuperación de fallos en  link:https://smallrye.io/smallrye-mutiny/getting-started/handling-failures[la documentación sobre gestión de fallos] y en la  link:https://smallrye.io/smallrye-mutiny/getting-started/retry[documentación sobre reintentos]."

#. type: Title ==
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:241
#, fuzzy, no-wrap
msgid "Events and Actions"
msgstr "Eventos y acciones"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:244
#, fuzzy
msgid "The following tables list the events that you can receive for Uni and Multi. Each of them is associated with its own group (onX). The second table lists the classic action you can do upon an event. Note that some groups offer more possibilities."
msgstr "Las siguientes tablas enumeran los eventos que se pueden recibir para Uni y Multi. Cada uno de ellos está asociado a su propio grupo (onX). La segunda tabla enumera la acción clásica que puede realizar ante un evento. Tenga en cuenta que algunos grupos ofrecen más posibilidades."

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:248
#, fuzzy, no-wrap
msgid "Events from the upstream"
msgstr "Acontecimientos de la corriente ascendente"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:250
#, fuzzy, no-wrap
msgid "Events from the downstream"
msgstr "Eventos de la corriente descendente"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:251
#, fuzzy, no-wrap
msgid "Uni"
msgstr "Uni"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:252
#, fuzzy, no-wrap
msgid "Subscription (1), Item (0..1), failure (0..1)"
msgstr "Suscripción (1), Artículo (0..1), fallo (0..1)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:254
#, fuzzy, no-wrap
msgid "Cancellation"
msgstr "Anulación"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:255
#, fuzzy, no-wrap
msgid "Multi"
msgstr "Multi"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:256
#, fuzzy, no-wrap
msgid "Subscription (1), Item (0..n), failure (0..1), completion (0..1)"
msgstr "Suscripción (1), Artículo (0..n), fracaso (0..1), finalización (0..1)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:257
#, fuzzy, no-wrap
msgid "Cancellation, Request"
msgstr "Anulación, solicitud"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:260
#, fuzzy
msgid "Check the full list of events on https://smallrye.io/smallrye-mutiny/latest/tutorials/observing-events/[the event documentation]."
msgstr "Consulte la lista completa de eventos en  link:https://smallrye.io/smallrye-mutiny/getting-started/observing-events[la documentación del evento]."

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:262
#, fuzzy, no-wrap
msgid "Action"
msgstr "Acción"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:262
#, fuzzy, no-wrap
msgid "API"
msgstr "API"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:264
#, fuzzy, no-wrap
msgid "Comment"
msgstr "Comentario"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:264
#, fuzzy, no-wrap
msgid "transform"
msgstr "transformar"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:264
#, fuzzy, no-wrap
msgid "`onItem().transform(Function<I, O> function);`"
msgstr "`onItem().transform(Function&amp;lt;I, O&amp;gt; function);`"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:266
#, fuzzy, no-wrap
msgid ""
"Transform the event into another event using a synchronous function.\n"
"The downstream receives the result of the function (or a failure if the transformation failed)."
msgstr "Transformar el evento en otro evento mediante una función sincrónica. El flujo descendente recibe el resultado de la función (o un fallo si la transformación ha fallado)."

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:266
#, fuzzy, no-wrap
msgid "transformToUni"
msgstr "transformToUni"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:266
#, fuzzy, no-wrap
msgid "`onItem().transformToUni(Function<I, Uni<O>> function);`"
msgstr "`onItem().transformToUni(Function&amp;lt;I, Uni&amp;lt;O&amp;gt;&amp;gt; function);`"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:267
#, fuzzy, no-wrap
msgid "Transform the event into another event using an asynchronous function. The downstream receives the item emitted by the produced Uni (or a failure if the transformation failed). If the produced Uni emits a failure, that failure is passed to the downstream."
msgstr "Transforma el evento en otro evento utilizando una función asíncrona. El flujo descendente recibe el elemento emitido por la Uni producida (o un fallo si la transformación ha fallado). Si la Uni producida emite un fallo, ese fallo se transmite al flujo descendente."

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:267
#, fuzzy, no-wrap
msgid "invoke"
msgstr "invocar"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:267
#, fuzzy, no-wrap
msgid "`onItem().invoke(Consumer<I> consumer)`"
msgstr "`onItem().invoke(Consumer&amp;lt;I&amp;gt; consumer)`"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:268
#, fuzzy, no-wrap
msgid "Invokes the synchronous consumer. This is particularly convenient to execute side effects actions. The downstream receives the original event, or a failure if the consumer throws an exception"
msgstr "Invoca al consumidor sincrónico. Esto es particularmente conveniente para ejecutar acciones de efectos secundarios. El flujo descendente recibe el evento original, o un fallo si el consumidor lanza una excepción"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:268
#, fuzzy, no-wrap
msgid "call"
msgstr "llame a"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:268
#, fuzzy, no-wrap
msgid "`onItem().call(Function<I, Uni<?>>)`"
msgstr "`onItem().call(Function&amp;lt;I, Uni&amp;lt;?&amp;gt;&amp;gt;)`"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:269
#, fuzzy, no-wrap
msgid "Invokes the asynchronous function. This is particularly convenient to execute asynchronous side effect actions.The downstream receives the original event, or a failure if the consumer throws an exception or if the produced Uni emits a failure."
msgstr "Invoca la función asíncrona. Esto es particularmente conveniente para ejecutar acciones asíncronas de efecto secundario.El flujo descendente recibe el evento original, o un fallo si el consumidor lanza una excepción o si la Uni producida emite un fallo."

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:269
#, fuzzy, no-wrap
msgid "fail"
msgstr "falla"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:269
#, fuzzy, no-wrap
msgid "`onItem().failWith(Function<I, Throwable>)`"
msgstr "`onItem().failWith(Function&amp;lt;I, Throwable&amp;gt;)`"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:270
#, fuzzy, no-wrap
msgid "Emits a failure when it receives the event."
msgstr "Emite un fallo cuando recibe el evento."

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:270
#, fuzzy, no-wrap
msgid "complete (Multi only)"
msgstr "completo (sólo para Multi)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:270
#, fuzzy, no-wrap
msgid "`onItem().complete()`"
msgstr "`onItem().complete()`"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:271
#, fuzzy, no-wrap
msgid "Emits the completion event when it receives the event."
msgstr "Emite el evento de finalización cuando recibe el evento."

#. type: Title ===
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:273
#, fuzzy, no-wrap
msgid "Other patterns"
msgstr "Otros modelos"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:277
#, fuzzy
msgid "Mutiny provides lots of other features.  Head over to the https://smallrye.io/smallrye-mutiny[Mutiny documentation] to see many more examples, including the whole list of events and how to handle them."
msgstr "Mutiny proporciona muchas otras funciones. Diríjase a la link:https://smallrye.io/smallrye-mutiny[documentación] de Mutiny para ver muchos más ejemplos, incluyendo toda la lista de eventos y cómo manejarlos."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:279
#, fuzzy
msgid "Some frequently asked guides are the following:"
msgstr "Algunas de las guías más frecuentes son las siguientes:"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:281
#, fuzzy
msgid "merge vs. concatenation - https://smallrye.io/smallrye-mutiny/latest/guides/merging-and-concatenating-streams/"
msgstr "fusión vs. concatenación -  https://smallrye.io/smallrye-mutiny/guides/merge-concat"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:282
#, fuzzy
msgid "controlling the emission thread - https://smallrye.io/smallrye-mutiny/latest/guides/emit-on-vs-run-subscription-on/"
msgstr "control del hilo de emisión -  https://smallrye.io/smallrye-mutiny/guides/emit-subscription"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:283
#, fuzzy
msgid "explicit blocking - https://smallrye.io/smallrye-mutiny/latest/guides/imperative-to-reactive/"
msgstr "bloqueo explícito - https://smallrye.io/smallrye-mutiny/latest/guides/imperative-to-reactive/"

#. type: Title ==
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:284
#, fuzzy, no-wrap
msgid "Shortcuts"
msgstr "Atajos"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:288
#, fuzzy
msgid "When using Uni, having to write `onItem()` can be cumbersome.  Fortunately, Mutiny provides a set of shortcut to make your code more concise:"
msgstr "Cuando se utiliza Uni, tener que escribir `onItem()` puede resultar engorroso. Afortunadamente, Mutiny proporciona un conjunto de atajos para hacer su código más conciso:"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:291
#, fuzzy, no-wrap
msgid "Shortcut"
msgstr "Atajo"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:293
#, fuzzy, no-wrap
msgid "Equivalent"
msgstr "Equivalente"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:294
#, fuzzy, no-wrap
msgid "`uni.map(x -> y)`"
msgstr "uni.map(x → y)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:296
#, fuzzy, no-wrap
msgid "`uni.onItem().transform(x -> y)`"
msgstr "uni.onItem().transform(x → y)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:297
#, fuzzy, no-wrap
msgid "`uni.flatMap(x -> uni2)`"
msgstr "uni.flatMap(x → uni2)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:299
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:302
#, fuzzy, no-wrap
msgid "`uni.onItem().transformToUni(x -> uni2)`"
msgstr "uni.onItem().transformToUni(x → uni2)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:300
#, fuzzy, no-wrap
msgid "`uni.chain(x -> uni2)`"
msgstr "uni.chain(x → uni2)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:303
#, no-wrap
msgid "`uni.then(() -> uni2)`"
msgstr ""

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:305
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:323
#, fuzzy, no-wrap
msgid "`uni.onItem().transformToUni(ignored -> uni2)`"
msgstr "uni.onItem().transformToUni(ignorado → uni2)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:306
#, fuzzy, no-wrap
msgid "`uni.invoke(x -> System.out.println(x))`"
msgstr "uni.invoke(x → System.out.println(x))"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:308
#, fuzzy, no-wrap
msgid "`uni.onItem().invoke(x -> System.out.println(x))`"
msgstr "uni.onItem().invoke(x → System.out.println(x))"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:309
#, fuzzy, no-wrap
msgid "`uni.call(x -> uni2)`"
msgstr "uni.call(x → uni2)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:311
#, fuzzy, no-wrap
msgid "`uni.onItem().call(x -> uni2)`"
msgstr "uni.onItem().call(x → uni2)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:312
#, fuzzy, no-wrap
msgid "`uni.eventually\\(() -> System.out.println(\"eventually\"))`"
msgstr "uni.eventualmente) → System.out.println(\"eventualmente\""

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:314
#, fuzzy, no-wrap
msgid "`uni.onItemOrFailure().invoke\\((ignoredItem, ignoredException) -> System.out.println(\"eventually\"))`"
msgstr "uni.onItemOrFailure().invokeignoredItem, ignoredException) → System.out.println(\"eventualmente\""

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:315
#, fuzzy, no-wrap
msgid "`uni.eventually(() -> uni2)`"
msgstr "uni.eventualmente(() → uni2)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:317
#, fuzzy, no-wrap
msgid "`uni.onItemOrFailure().call((ignoredItem, ignoredException) -> uni2)`"
msgstr "uni.onItemOrFailure().call((ignoredItem, ignoredException) → uni2)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:318
#, fuzzy, no-wrap
msgid "`uni.replaceWith(x)`"
msgstr "`uni.replaceWith(x)`"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:320
#, fuzzy, no-wrap
msgid "`uni.onItem().transform(ignored -> x)`"
msgstr "uni.onItem().transformToUni(ignorado → uni2)"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:321
#, fuzzy, no-wrap
msgid "`uni.replaceWith(uni2)`"
msgstr "`uni.replaceWith(uni2)`"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:324
#, fuzzy, no-wrap
msgid "`uni.replaceIfNullWith(x)`"
msgstr "`uni.replaceIfNullWith(x)`"

#. type: Table
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:325
#, fuzzy, no-wrap
msgid "`uni.onItem().ifNull().continueWith(x)`"
msgstr "`uni.onItem().ifNull().continueWith(x)`"

#. type: Title ==
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:327
#, fuzzy, no-wrap
msgid "Reactive Streams"
msgstr "Flujos reactivos"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:335
#, fuzzy
msgid "Mutiny uses https://www.reactive-streams.org/[Reactive Streams].  `Multi` implements `Publisher` and enforces the back-pressure protocol.  Emissions are constrained by the request emitted from the downstream subscribers.  Thus, it does not overload the subscribers.  Note that in some cases, you can’t follow this protocol (because the Multi emits events that can’t be controlled, such as time, or measures sensors).  In this case, Mutiny provides a way to control the overflow using `onOverflow()`."
msgstr "Mutiny utiliza link:https://www.reactive-streams.org/[flujos reactivos] . `Multi` implementa `Publisher` y aplica el protocolo de contrapresión. Las emisiones están limitadas por la solicitud emitida desde los abonados descendentes. Así, no sobrecarga a los abonados. Tenga en cuenta que, en algunos casos, no puede seguir este protocolo (porque el Multi emite eventos que no se pueden controlar, como el tiempo, o mide los sensores). En este caso, Mutiny proporciona una forma de controlar el desbordamiento utilizando `onOverflow()` ."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:338
#, fuzzy
msgid "`Uni` does not implement Reactive Streams `Publisher`.  A `Uni` can only emit one event, so subscribing to the `Uni` is enough to express your intent to use the result and does not need the request protocol ceremony."
msgstr "`Uni` no implementa Reactive Streams `Publisher` . Un `Uni` sólo puede emitir un evento, por lo que suscribirse al `Uni` es suficiente para expresar su intención de utilizar el resultado y no necesita la ceremonia del protocolo de solicitud."

#. type: Title ==
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:339
#, fuzzy, no-wrap
msgid "Mutiny and Vert.x"
msgstr "Motín y Vert.x"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:344
#, fuzzy
msgid "Vert.x is a toolkit to build reactive applications and systems.  It provides a huge ecosystem of libraries following the reactive principles (i.e., non-blocking and asynchronous).  Vert.x is an essential part of Quarkus, as it provides its reactive capabilities."
msgstr "Vert.x es un conjunto de herramientas para construir aplicaciones y sistemas reactivos. Proporciona un enorme ecosistema de bibliotecas que siguen los principios reactivos (es decir, no bloqueantes y asíncronos). Vert.x es una parte esencial de Quarkus, ya que proporciona sus capacidades reactivas."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:347
#, fuzzy
msgid "In addition, the whole Vert.x API can be used with Quarkus.  To provide a cohesive experience, the Vert.x API is also available using a Mutiny variant, i.e., returns Uni and Multi."
msgstr "Además, toda la API Vert.x puede utilizarse con Quarkus. Para proporcionar una experiencia cohesiva, la API Vert.x también está disponible utilizando una variante Mutiny, es decir, devuelve Uni y Multi."

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:349
#, fuzzy
msgid "More details about this API can be found on: https://quarkus.io/blog/mutiny-vertx/."
msgstr "Puede encontrar más detalles sobre esta API en:  https://quarkus.io/blog/mutiny-vertx/"

#. type: Title ==
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:350
#, fuzzy, no-wrap
msgid "Mutiny Integration in Quarkus"
msgstr "Integración del motín en Quarkus"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:354
#, fuzzy
msgid "The integration of Mutiny in Quarkus goes beyond just the library.  Mutiny exposes hooks that allow Quarkus and Mutiny to be closely integrated:"
msgstr "La integración de Mutiny en Quarkus va más allá de la biblioteca. Mutiny expone ganchos que permiten que Quarkus y Mutiny estén estrechamente integrados:"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:356
#, fuzzy
msgid "Calling `await` or `toIterable` would fail if you are running on an I/O thread, preventing blocking the I/O thread;"
msgstr "Llamar a `await` o `toIterable` fallaría si se está ejecutando en un hilo de E/S, evitando el bloqueo del hilo de E/S;"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:357
#, fuzzy
msgid "The `log()` operator use the Quarkus logger;"
msgstr "El operador `log()` utiliza el registrador Quarkus;"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:358
#, fuzzy
msgid "The default Mutiny thread pool is the Quarkus worker thread pool;"
msgstr "El pool de hilos por defecto de Mutiny es el pool de hilos de trabajadores de Quarkus;"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:359
#, fuzzy
msgid "Context Propagation is enabled by default when using Mutiny Uni and Multi"
msgstr "La Propagación de Contexto está activada por defecto cuando se utiliza Mutiny Uni y Multi"

#. type: Plain text
#: upstream/_versions/3.0/guides/mutiny-primer.adoc:361
#, fuzzy
msgid "More details about the infrastructure integration can be found on https://smallrye.io/smallrye-mutiny/latest/guides/framework-integration/."
msgstr "Puede encontrar más detalles sobre la integración de la infraestructura en  https://smallrye.io/smallrye-mutiny/guides/infrastructure"
