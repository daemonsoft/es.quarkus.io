# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/transaction.adoc:6
#, fuzzy, no-wrap
msgid "Using Transactions in Quarkus"
msgstr "Uso de transacciones en Quarkus"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:15
#, fuzzy
msgid "Quarkus comes with a Transaction Manager and uses it to coordinate and expose transactions to your applications.  Each extension dealing with persistence will integrate with it for you.  And you will explicitly interact with transactions via CDI.  This guide will walk you through all that."
msgstr ""
"Quarkus viene con un Gestor de Transacciones y lo utiliza para coordinar y exponer las transacciones a sus aplicaciones.\n"
"Cada extensión que se ocupe de la persistencia se integrará con él por usted.\n"
"E interactuará explícitamente con las transacciones a través de CDI.\n"
"Esta guía le guiará a través de todo ello."

#. type: Title ==
#: upstream/_versions/3.0/guides/transaction.adoc:16
#, fuzzy, no-wrap
msgid "Setting it up"
msgstr "Cómo se prepara"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:20
#, fuzzy
msgid "You don't need to worry about setting it up most of the time as extensions needing it will simply add it as a dependency.  Hibernate ORM for example will include the transaction manager and set it up properly."
msgstr "No tendrá que preocuparse de configurarlo la mayoría de las veces, ya que las extensiones que lo necesiten simplemente lo añadirán como dependencia. Hibernate ORM, por ejemplo, incluirá el gestor de transacciones y lo configurará correctamente."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:23
#, fuzzy
msgid "You might need to add it as a dependency explicitly if you are using transactions directly without Hibernate ORM for example.  Add the following to your build file:"
msgstr "Puede que necesite añadirlo como dependencia explícitamente si está utilizando transacciones directamente sin Hibernate ORM, por ejemplo. Añada lo siguiente a su archivo de compilación:"

#. type: Block title
#: upstream/_versions/3.0/guides/transaction.adoc:25
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:31
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-narayana-jta</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/transaction.adoc:34
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:37
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-narayana-jta\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/transaction.adoc:39
#, fuzzy, no-wrap
msgid "Starting and stopping transactions: defining your boundaries"
msgstr "Iniciar y detener las transacciones: definir los límites"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:43
#, fuzzy
msgid "You can define your transaction boundaries either declaratively with `@Transactional` or programmatically with `QuarkusTransaction`. You can also use the JTA `UserTransaction` API directly, however this is less user-friendly than `QuarkusTransaction`."
msgstr "Puede definir los límites de sus transacciones de forma declarativa con `@Transactional` o de forma programática con `QuarkusTransaction` . También puede utilizar directamente la API JTA `UserTransaction` , aunque es menos fácil de usar que `QuarkusTransaction` ."

#. type: Title ===
#: upstream/_versions/3.0/guides/transaction.adoc:44
#, fuzzy, no-wrap
msgid "Declarative approach"
msgstr "Enfoque declarativo"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:47
#, fuzzy
msgid "The easiest way to define your transaction boundaries is to use the `@Transactional` annotation on your entry method (`jakarta.transaction.Transactional`)."
msgstr "La forma más sencilla de definir los límites de la transacción es utilizar la anotación `@Transactional` en su método de entrada ( `javax.transaction.Transactional`)."

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:52
#: upstream/_versions/3.0/guides/transaction.adoc:100
#: upstream/_versions/3.0/guides/transaction.adoc:259
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SantaClausService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:55
#, no-wrap
msgid ""
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:68
#, no-wrap
msgid ""
"    @Transactional // <1>\n"
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"        if (gift == null) {\n"
"            throw new OMGGiftNotRecognizedException(); // <2>\n"
"        }\n"
"        else {\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:71
#, fuzzy
msgid "This annotation defines your transaction boundaries and will wrap this call within a transaction."
msgstr "Esta anotación define los límites de su transacción y envolverá esta llamada dentro de una transacción."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:72
#, fuzzy
msgid "A `RuntimeException` crossing the transaction boundaries will roll back the transaction."
msgstr "Un `RuntimeException` que cruce los límites de la transacción revertirá la transacción."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:75
#, fuzzy
msgid "`@Transactional` can be used to control transaction boundaries on any CDI bean at the method level or at the class level to ensure every method is transactional.  That includes REST endpoints."
msgstr "`@Transactional` puede utilizarse para controlar los límites de las transacciones en cualquier frijol CDI a nivel de método o a nivel de clase para garantizar que cada método sea transaccional. Eso incluye los puntos finales REST."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:77
#, fuzzy
msgid "You can control whether and how the transaction is started with parameters on `@Transactional`:"
msgstr "Puede controlar si la transacción se inicia, y cómo, con parámetros en `@Transactional`:"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:79
#, fuzzy
msgid "`@Transactional(REQUIRED)` (default): starts a transaction if none was started, stays with the existing one otherwise."
msgstr "`@Transactional(REQUIRED)` (por defecto): inicia una transacción si no se ha iniciado ninguna, se queda con la existente en caso contrario."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:80
#, fuzzy
msgid "`@Transactional(REQUIRES_NEW)`: starts a transaction if none was started ; if an existing one was started, suspends it and starts a new one for the boundary of that method."
msgstr "`@Transactional(REQUIRES_NEW)`: inicia una transacción si no se ha iniciado ninguna; si se ha iniciado una existente, la suspende e inicia una nueva para el límite de ese método."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:81
#, fuzzy
msgid "`@Transactional(MANDATORY)`: fails if no transaction was started ; works within the existing transaction otherwise."
msgstr "`@Transactional(MANDATORY)`falla si no se ha iniciado ninguna transacción; en caso contrario, funciona dentro de la transacción existente."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:82
#, fuzzy
msgid "`@Transactional(SUPPORTS)`: if a transaction was started, joins it ; otherwise works with no transaction."
msgstr "`@Transactional(SUPPORTS)`Si se ha iniciado una transacción, se une a ella; en caso contrario, funciona sin transacción."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:83
#, fuzzy
msgid "`@Transactional(NOT_SUPPORTED)`: if a transaction was started, suspends it and works with no transaction for the boundary of the method ; otherwise works with no transaction."
msgstr "`@Transactional(NOT_SUPPORTED)`Si se ha iniciado una transacción, la suspende y trabaja sin transacción durante el tiempo que dure el método; en caso contrario, trabaja sin transacción."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:84
#, fuzzy
msgid "`@Transactional(NEVER)`: if a transaction was started, raises an exception ; otherwise works with no transaction."
msgstr "`@Transactional(NEVER)`Si se ha iniciado una transacción, lanza una excepción; en caso contrario, funciona sin transacción."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:88
#, fuzzy
msgid "`REQUIRED` or `NOT_SUPPORTED` are probably the most useful ones.  This is how you decide whether a method is to be running within or outside a transaction.  Make sure to check the JavaDoc for the precise semantic."
msgstr "`REQUIRED` o `NOT_SUPPORTED` son probablemente los más útiles. Así es como se decide si un método debe ejecutarse dentro o fuera de una transacción. Asegúrese de consultar el JavaDoc para conocer la semántica precisa."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:92
#, fuzzy
msgid "The transaction context is propagated to all calls nested in the `@Transactional` method as you would expect (in this example `childDAO.addToGiftList()` and `santaDAO.addToSantaTodoList()`).  The transaction will commit unless a runtime exception crosses the method boundary.  You can override whether an exception forces the rollback or not by using `@Transactional(dontRollbackOn=SomeException.class)` (or `rollbackOn`)."
msgstr "El contexto de la transacción se propaga a todas las llamadas anidadas en el método `@Transactional` como cabría esperar (en este ejemplo `childDAO.addToGiftList()` y `santaDAO.addToSantaTodoList()` ). La transacción se confirmará a menos que una excepción en tiempo de ejecución cruce el límite del método. Puede anular si una excepción fuerza la reversión o no utilizando `@Transactional(dontRollbackOn=SomeException.class)` (o `rollbackOn` )."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:95
#, fuzzy
msgid "You can also programmatically ask for a transaction to be marked for rollback.  Inject a `TransactionManager` for this."
msgstr "También puede pedir mediante programación que se marque una transacción para rollback. Inyecte un `TransactionManager` para ello."

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:104
#, no-wrap
msgid ""
"    @Inject TransactionManager tm; // <1>\n"
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:117
#, no-wrap
msgid ""
"    @Transactional\n"
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"        if (gift == null) {\n"
"            tm.setRollbackOnly(); // <2>\n"
"        }\n"
"        else {\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:120
#, fuzzy
msgid "Inject the `TransactionManager` to be able to activate `setRollbackOnly` semantic."
msgstr "Inyectar la `TransactionManager` para poder activar la semántica `setRollbackOnly`."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:121
#, fuzzy
msgid "Programmatically decide to set the transaction for rollback."
msgstr "Decide programar la transacción para su reversión."

#. type: Title ===
#: upstream/_versions/3.0/guides/transaction.adoc:123
#, fuzzy, no-wrap
msgid "Transaction Configuration"
msgstr "Configuración de transacciones"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:126
#, fuzzy
msgid "Advanced configuration of the transaction is possible with the use of the `@TransactionConfiguration` annotation that is set in addition to the standard `@Transactional` annotation on your entry method or at the class level."
msgstr "La configuración avanzada de la transacción es posible con el uso de la anotación `@TransactionConfiguration` que se establece además de la anotación estándar `@Transactional` en su método de entrada o a nivel de clase."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:128
#, fuzzy
msgid "The `@TransactionConfiguration` annotation allows to set a timeout property, in seconds, that applies to transactions created within the annotated method."
msgstr "La anotación `@TransactionConfiguration` permite establecer una propiedad de tiempo de espera, en segundos, que se aplica a las transacciones creadas dentro del método anotado."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:131
#, fuzzy
msgid "This annotation may only be placed on the top level method delineating the transaction.  Annotated nested methods once a transaction has started will throw an exception."
msgstr "Esta anotación sólo puede colocarse en el método de nivel superior que delimita la transacción. Los métodos anidados anotados una vez iniciada la transacción lanzarán una excepción."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:134
#, fuzzy
msgid "If defined on a class, it is equivalent to defining it on all the methods of the class marked with `@Transactional`.  The configuration defined on a method takes precedence over the configuration defined on a class."
msgstr "Si se define sobre una clase, equivale a definirla sobre todos los métodos de la clase marcados con `@Transactional` . La configuración definida sobre un método tiene prioridad sobre la configuración definida sobre una clase."

#. type: Title ===
#: upstream/_versions/3.0/guides/transaction.adoc:135
#, fuzzy, no-wrap
msgid "Reactive extensions"
msgstr "Extensiones reactivas"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:138
#, fuzzy
msgid "If your `@Transactional`-annotated method returns a reactive value, such as:"
msgstr "Si su método `@Transactional`-anotado devuelve un valor reactivo, como:"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:140
#, fuzzy
msgid "`CompletionStage` (from the JDK)"
msgstr "`CompletionStage` (del JDK)"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:141
#, fuzzy
msgid "`Publisher` (from Reactive-Streams)"
msgstr "`Publisher` (de Reactive-Streams)"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:142
#, fuzzy
msgid "Any type which can be converted to one of the two previous types using Reactive Type Converters"
msgstr "Cualquier tipo que se pueda convertir en uno de los dos tipos anteriores utilizando Convertidores de Tipo Reactivos"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:147
#, fuzzy
msgid "then the behaviour is a bit different, because the transaction will not be terminated until the returned reactive value is terminated. In effect, the returned reactive value will be listened to and if it terminates exceptionally the transaction will be marked for rollback, and will be committed or rolled-back only at termination of the reactive value."
msgstr "entonces el comportamiento es un poco diferente, porque la transacción no se terminará hasta que el valor reactivo devuelto se termine. En efecto, el valor reactivo devuelto será escuchado y si termina excepcionalmente la transacción será marcada para rollback, y será cometida o rollback sólo a la terminación del valor reactivo."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:150
#, fuzzy
msgid "This allows your reactive methods to keep on working on the transaction asynchronously until their work is really done, and not just until the reactive method returns."
msgstr "Esto permite a sus métodos reactivos seguir trabajando en la transacción de forma asíncrona hasta que su trabajo esté realmente hecho, y no sólo hasta que el método reactivo retorne."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:153
#, fuzzy
msgid "If you need to propagate your transaction context across your reactive pipeline, please see the xref:context-propagation.adoc[Context Propagation guide]."
msgstr "Si necesita propagar el contexto de su transacción a través de su canalización reactiva, consulte la xref:context-propagation.adoc[guía Propagación del contexto] ."

#. type: Title ===
#: upstream/_versions/3.0/guides/transaction.adoc:154
#, no-wrap
msgid "Programmatic Approach"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:159
#, fuzzy
msgid "You can use static methods on `QuarkusTransaction` to define transaction boundaries. This provides two different options, a functional approach that allows you to run a lambda within the scope of a transaction, or by using explicit `begin`, `commit` and `rollback` methods."
msgstr "Puede utilizar métodos estáticos en `QuarkusTransaction` para definir los límites de las transacciones. Esto proporciona dos opciones diferentes, un enfoque funcional que le permite ejecutar una lambda dentro del ámbito de una transacción, o mediante el uso explícito de los métodos `begin` , `commit` y `rollback` ."

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:164
#, no-wrap
msgid ""
"import io.quarkus.narayana.jta.QuarkusTransaction;\n"
"import io.quarkus.narayana.jta.RunOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:166
#, no-wrap
msgid "public class TransactionExample {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:171
#, no-wrap
msgid ""
"    public void beginExample() {\n"
"        QuarkusTransaction.begin();\n"
"        //do work\n"
"        QuarkusTransaction.commit();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:177
#, no-wrap
msgid ""
"        QuarkusTransaction.begin(QuarkusTransaction.beginOptions()\n"
"                .timeout(10));\n"
"        //do work\n"
"        QuarkusTransaction.rollback();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:185
#, no-wrap
msgid ""
"    public void runnerExample() {\n"
"        QuarkusTransaction.requiringNew().run(() -> {\n"
"            //do work\n"
"        });\n"
"        QuarkusTransaction.joiningExisting().run(() -> {\n"
"            //do work\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:200
#, no-wrap
msgid ""
"        int result = QuarkusTransaction.requiringNew()\n"
"                .timeout(10)\n"
"                .exceptionHandler((throwable) -> {\n"
"                    if (throwable instanceof SomeException) {\n"
"                        return RunOptions.ExceptionResult.COMMIT;\n"
"                    }\n"
"                    return RunOptions.ExceptionResult.ROLLBACK;\n"
"                })\n"
"                .call(() -> {\n"
"                    //do work\n"
"                    return 0;\n"
"                });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:203
#, fuzzy
msgid "The above example shows a few different ways the API can be used."
msgstr "El ejemplo anterior muestra algunas formas diferentes de utilizar la API."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:209
#, fuzzy
msgid "The first method simply calls begin, does some work and commits it.  This created transaction is tied to the CDI request scope, so if it is still active when the request scope is destroyed then it will be automatically rolled back. This removes the need to explicitly catch exceptions and call `rollback`, and acts as a safety net against inadvertent transaction leaks, however it does mean that this can only be used when the request scope is active. The second example in the method calls begin with a timeout option, and then rolls back the transaction."
msgstr "El primer método simplemente llama a begin, realiza algún trabajo y lo consigna. Esta transacción creada está vinculada al ámbito de la solicitud CDI, por lo que si sigue activa cuando se destruya el ámbito de la solicitud, se revertirá automáticamente. Esto elimina la necesidad de capturar explícitamente las excepciones y llamar a `rollback` , y actúa como una red de seguridad contra fugas inadvertidas de transacciones, sin embargo, significa que esto sólo se puede utilizar cuando el ámbito de la solicitud está activo. El segundo ejemplo en las llamadas al método comienza con una opción de tiempo de espera, y luego hace retroceder la transacción."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:215
#, fuzzy
msgid "The second method shows the use of lambda scoped transactions with `QuarkusTransaction.runner(...)`; the first example just runs a `Runnable` within a new transaction, the second does the same but joining the existing transaction (if any), and the third calls a `Callable` with some specific options.  In particular the `exceptionHandler` method can be used to control if the transaction is rolled back or not on exception."
msgstr "El segundo método muestra el uso de transacciones de ámbito lambda con `QuarkusTransaction.runner(…​)` ; el primer ejemplo sólo ejecuta un `Runnable` dentro de una nueva transacción, el segundo hace lo mismo pero uniéndose a la transacción existente (si la hay), y el tercero llama a un `Callable` con algunas opciones específicas. En particular, el método `exceptionHandler` puede utilizarse para controlar si la transacción se revierte o no en caso de excepción."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:217
#, fuzzy
msgid "The following semantics are supported:"
msgstr "Se admiten las siguientes semánticas:"

#. type: Labeled list
#: upstream/_versions/3.0/guides/transaction.adoc:219
#, fuzzy, no-wrap
msgid "`QuarkusTransaction.disallowingExisting()`/`DISALLOW_EXISTING`"
msgstr "`QuarkusTransaction.disallowingExisting()`/ `DISALLOW_EXISTING`"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:223
#, fuzzy
msgid "If a transaction is already associated with the current thread a `QuarkusTransactionException` will be thrown, otherwise a new transaction is started, and follows all the normal lifecycle rules."
msgstr "Si una transacción ya está asociada con el hilo actual se lanzará un `QuarkusTransactionException` , de lo contrario se inicia una nueva transacción, y sigue todas las reglas normales del ciclo de vida."

#. type: Labeled list
#: upstream/_versions/3.0/guides/transaction.adoc:224
#, fuzzy, no-wrap
msgid "`QuarkusTransaction.joiningExisting()`/`JOIN_EXISTING`"
msgstr "`QuarkusTransaction.joiningExisting()`/ `JOIN_EXISTING`"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:233
#, fuzzy
msgid "If no transaction is active then a new transaction will be started, and committed when the method ends.  If an exception is thrown the exception handler registered by `#exceptionHandler(Function)` will be called to decide if the TX should be committed or rolled back.  If an existing transaction is active then the method is run in the context of the existing transaction. If an exception is thrown the exception handler will be called, however a result of `ExceptionResult#ROLLBACK` will result in the TX marked as rollback only, while a result of `ExceptionResult#COMMIT` will result in no action being taken."
msgstr "Si no hay ninguna transacción activa, se iniciará una nueva y se confirmará cuando finalice el método. Si se lanza una excepción, se llamará al gestor de excepciones registrado por `#exceptionHandler(Function)` para decidir si la TX debe ser confirmada o revertida. Si hay una transacción activa, el método se ejecutará en el contexto de la transacción existente. Si se lanza una excepción se llamará al manejador de excepciones, sin embargo un resultado de `ExceptionResult#ROLLBACK` resultará en la TX marcada como rollback solamente, mientras que un resultado de `ExceptionResult#COMMIT` resultará en que no se tome ninguna acción."

#. type: Labeled list
#: upstream/_versions/3.0/guides/transaction.adoc:234
#, fuzzy, no-wrap
msgid "`QuarkusTransaction.requiringNew()`/`REQUIRE_NEW`"
msgstr "`QuarkusTransaction.requiringNew()`/ `REQUIRE_NEW`"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:240
#, fuzzy
msgid "If an existing transaction is already associated with the current thread then the transaction is suspended, then a new transaction is started which follows all the normal lifecycle rules, and when it's complete the original transaction is resumed.  Otherwise, a new transaction is started, and follows all the normal lifecycle rules."
msgstr "Si una transacción existente ya está asociada al hilo actual, entonces se suspende la transacción, se inicia una nueva transacción que sigue todas las reglas normales del ciclo de vida y, cuando se completa, se reanuda la transacción original. En caso contrario, se inicia una nueva transacción, que sigue todas las reglas normales del ciclo de vida."

#. type: Labeled list
#: upstream/_versions/3.0/guides/transaction.adoc:241
#, fuzzy, no-wrap
msgid "`QuarkusTransaction.suspendingExisting()`/`SUSPEND_EXISTING`"
msgstr "`QuarkusTransaction.suspendingExisting()`/ `SUSPEND_EXISTING`"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:248
#, fuzzy
msgid "If no transaction is active then these semantics are basically a no-op.  If a transaction is active then it is suspended, and resumed after the task is run.  The exception handler will never be consulted when these semantics are in use, specifying both an exception handler and these semantics are considered an error.  These semantics allows for code to easily be run outside the scope of a transaction."
msgstr "Si no hay ninguna transacción activa entonces esta semántica es básicamente un no-op. Si hay una transacción activa entonces se suspende, y se reanuda después de que se ejecute la tarea. El manejador de excepciones nunca será consultado cuando estas semánticas estén en uso, especificar tanto un manejador de excepciones como estas semánticas se considera un error. Esta semántica permite que el código se ejecute fácilmente fuera del ámbito de una transacción."

#. type: Title ===
#: upstream/_versions/3.0/guides/transaction.adoc:251
#, fuzzy, no-wrap
msgid "Legacy API approach"
msgstr "Enfoque de la API heredada"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:254
#, fuzzy
msgid "The less easy way is to inject a `UserTransaction` and use the various transaction demarcation methods."
msgstr "La forma menos fácil es inyectar un `UserTransaction` y utilizar los distintos métodos de demarcación de transacciones."

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:263
#, no-wrap
msgid ""
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
"    @Inject UserTransaction transaction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:278
#, no-wrap
msgid ""
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        try {\n"
"            transaction.begin();\n"
"            Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"            transaction.commit();\n"
"        }\n"
"        catch(SomeException e) {\n"
"            // do something on Tx failure\n"
"            transaction.rollback();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/transaction.adoc:283
#, fuzzy
msgid "You cannot use `UserTransaction` in a method having a transaction started by a `@Transactional` call."
msgstr "No se puede utilizar `UserTransaction` en un método que tenga una transacción iniciada por una llamada a `@Transactional`."

#. type: Title ==
#: upstream/_versions/3.0/guides/transaction.adoc:285
#, fuzzy, no-wrap
msgid "Configuring the transaction timeout"
msgstr "Configurar el tiempo de espera de la transacción"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:287
#, fuzzy
msgid "You can configure the default transaction timeout, the timeout that applies to all transactions managed by the transaction manager, via the property `quarkus.transaction-manager.default-transaction-timeout`, specified as a duration."
msgstr "Puede configurar el tiempo de espera de la transacción por defecto, el tiempo de espera que se aplica a todas las transacciones gestionadas por el gestor de transacciones, a través de la propiedad `quarkus.transaction-manager.default-transaction-timeout`, especificada como una duración."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:291
#, fuzzy
msgid "The default value is 60 seconds."
msgstr "El valor por defecto es de 60 segundos."

#. type: Title ==
#: upstream/_versions/3.0/guides/transaction.adoc:292
#, fuzzy, no-wrap
msgid "Configuring transaction node name identifier"
msgstr "Configuración del identificador del nombre del nodo de la transacción"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:296
#, fuzzy
msgid "Narayana, as the underlying transaction manager, has a concept of a unique node identifier.  This is important if you consider using XA transactions that involve multiple resources."
msgstr "Narayana, como gestor de transacciones subyacente, tiene un concepto de identificador de nodo único. Esto es importante si se plantea utilizar transacciones XA que impliquen múltiples recursos."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:302
#, fuzzy
msgid "The node name identifier plays a crucial part in the identification of a transaction.  The node name identifier is forged into the transaction id when the transaction is created.  Based on the node name identifier, the transaction manager is capable of recognizing the XA transaction counterparts created in database or JMS broker. The identifier makes possible for the transaction manager to roll back the transaction counterparts during recovery."
msgstr "El identificador del nombre del nodo desempeña un papel crucial en la identificación de una transacción. El identificador de nombre de nodo se forja en el identificador de transacción cuando se crea la transacción. Basándose en el identificador de nombre de nodo, el gestor de transacciones es capaz de reconocer las transacciones XA homólogas creadas en la base de datos o en el broker JMS. El identificador hace posible que el gestor de transacciones haga retroceder las transacciones homólogas durante la recuperación."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:305
#, fuzzy
msgid "The node name identifier needs to be unique per transaction manager deployment.  And the node identifier needs to be stable over the transaction manager restarts."
msgstr "El identificador del nombre del nodo tiene que ser único por cada despliegue del gestor de transacciones. Y el identificador de nodo necesita ser estable a lo largo de los reinicios del gestor de transacciones."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:307
#, fuzzy
msgid "The node name identifier may be configured via the property `quarkus.transaction-manager.node-name`."
msgstr "El identificador del nombre del nodo puede configurarse mediante la propiedad `quarkus.transaction-manager.node-name`."

#. type: Title ==
#: upstream/_versions/3.0/guides/transaction.adoc:309
#, fuzzy, no-wrap
msgid "Using `@TransactionScoped` to bind CDI beans to the transaction lifecycle"
msgstr "Uso de `@TransactionScoped` para vincular beans CDI al ciclo de vida de la transacción"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:313
#, fuzzy
msgid "You can define beans that live for as long as a transaction, and through CDI lifecycle events perform actions when a transaction starts and ends."
msgstr "Puede definir beans que vivan tanto tiempo como una transacción, y que a través de los eventos del ciclo de vida CDI realicen acciones cuando una transacción comienza y termina."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:315
#, fuzzy
msgid "Just assign the transaction xref:cdi.adoc#bean-scope[scope] to such beans using the `@TransactionScoped` annotation:"
msgstr "Basta con asignar el  link:cdi.html#bean-scope[ámbito de] la transacción a dichos beans utilizando la anotación `@TransactionScoped`:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:320
#, no-wrap
msgid ""
"@TransactionScoped\n"
"public class MyTransactionScopedBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:324
#, no-wrap
msgid ""
"    // The bean's state is bound to a specific transaction,\n"
"    // and restored even after suspending then resuming the transaction.\n"
"    int myData;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:329
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    void onBeginTransaction() {\n"
"        // This gets invoked after a transaction begins.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:335
#, no-wrap
msgid ""
"    @PreDestroy\n"
"    void onBeforeEndTransaction() {\n"
"        // This gets invoked before a transaction ends (commit or rollback).\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:340
#, fuzzy
msgid "Alternatively, if you don't necessarily need to hold state during the transaction, and just want to react to transaction start/end events, you can simply declare event listeners in a differently scoped bean:"
msgstr "Alternativamente, si no necesita necesariamente mantener el estado durante la transacción, y sólo quiere reaccionar a los eventos de inicio/fin de la transacción, puede simplemente declarar escuchadores de eventos en un bean de ámbito diferente:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:345
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyTransactionEventListeningBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:349
#, no-wrap
msgid ""
"    void onBeginTransaction(@Observes @Initialized(TransactionScoped.class) Object event) {\n"
"        // This gets invoked when a transaction begins.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:353
#, no-wrap
msgid ""
"    void onBeforeEndTransaction(@Observes @BeforeDestroyed(TransactionScoped.class) Object event) {\n"
"        // This gets invoked before a transaction ends (commit or rollback).\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/transaction.adoc:358
#, no-wrap
msgid ""
"    void onAfterEndTransaction(@Observes @Destroyed(TransactionScoped.class) Object event) {\n"
"        // This gets invoked after a transaction ends (commit or rollback).\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:361
#, fuzzy
msgid "The `event` object represents the transaction ID, and defines `toString()`/`equals()`/`hashCode()` accordingly."
msgstr "El objeto `event` representa el ID de la transacción, y define `toString()`/ `equals()`/ `hashCode()` en consecuencia."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:364
#, fuzzy
msgid "In listener methods, you can access more information about the transaction in progress by accessing the `TransactionManager`, which is a CDI bean and can be ``@Inject``ed."
msgstr "En los métodos de escucha, puede acceder a más información sobre la transacción en curso accediendo al `TransactionManager` , que es un bean CDI y puede ser `@Inject` ed."

#. type: Title ==
#: upstream/_versions/3.0/guides/transaction.adoc:365
#, fuzzy, no-wrap
msgid "Why always having a transaction manager?"
msgstr "¿Por qué tener siempre un gestor de transacciones?"

#. type: Labeled list
#: upstream/_versions/3.0/guides/transaction.adoc:367
#, fuzzy, no-wrap
msgid "Does it work everywhere I want to?"
msgstr "¿Funciona en todos los lugares que quiero?"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:374
#, fuzzy
msgid "Yep, it works in your Quarkus application, in your IDE, in your tests, because all of these are Quarkus applications.  JTA has some bad press for some people.  I don't know why.  Let's just say that this is not your grandpa's JTA implementation.  What we have is perfectly embeddable and lean."
msgstr "Sí, funciona en su aplicación Quarkus, en su IDE, en sus pruebas, porque todas ellas son aplicaciones Quarkus. JTA tiene mala prensa para algunas personas. No sé por qué. Digamos que ésta no es la implementación JTA de su abuelo. Lo que tenemos es perfectamente integrable y esbelto."

#. type: Labeled list
#: upstream/_versions/3.0/guides/transaction.adoc:375
#, fuzzy, no-wrap
msgid "Does it do 2 Phase Commit and slow down my app?"
msgstr "¿Hace 2 Phase Commit y ralentiza mi aplicación?"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:379
#, fuzzy
msgid "No, this is an old folk tale.  Let's assume it essentially comes for free and let you scale to more complex cases involving several datasources as needed."
msgstr "No, esto es un viejo cuento popular. Partamos de la base de que, en esencia, es gratuito y le permite escalar a casos más complejos en los que intervienen varias fuentes de datos, según sea necesario."

#. type: Labeled list
#: upstream/_versions/3.0/guides/transaction.adoc:380
#, fuzzy, no-wrap
msgid "I don't need transaction when I do read only operations, it's faster."
msgstr "No necesito la transacción cuando hago operaciones de sólo lectura, es más rápido."

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:392
#, fuzzy
msgid "Wrong. + First off, just disable the transaction by marking your transaction boundary with `@Transactional(NOT_SUPPORTED)` (or `NEVER` or `SUPPORTS` depending on the semantic you want). + Second, it's again fairy tale that not using transaction is faster.  The answer is, it depends on your DB and how many SQL SELECTs you are making.  No transaction means the DB does have a single operation transaction context anyway. + Third, when you do several SELECTs, it's better to wrap them in a single transaction because they will all be consistent with one another.  Say your DB represents your car dashboard, you can see the number of kilometers remaining and the fuel gauge level.  By reading it in one transaction, they will be consistent.  If you read one and the other from two different transactions, then they can be inconsistent.  It can be more dramatic if you read data related to rights and access management for example."
msgstr ""
"Incorrecto.\n"
"\n"
" En primer lugar, basta con desactivar la transacción marcando el límite de la misma con `@Transactional(NOT_SUPPORTED)` (o `NEVER` o `SUPPORTS` según la semántica que desee).\n"
"\n"
" En segundo lugar, vuelve a ser un cuento de hadas que no usar transacción sea más rápido. La respuesta es que depende de su BD y de cuántas SELECTs SQL esté realizando. Sin transacción significa que la BD tiene un contexto de transacción de operación única de todos modos.\n"
"\n"
" En tercer lugar, cuando realice varios SELECT, es mejor envolverlos en una única transacción porque todos serán coherentes entre sí. Digamos que su BD representa el salpicadero de su coche, puede ver el número de kilómetros restantes y el nivel del indicador de combustible. Si los lee en una sola transacción, serán coherentes. Si lee uno y otro en dos transacciones diferentes, entonces pueden ser incoherentes. Puede ser más dramático si lee datos relacionados con la gestión de derechos y accesos, por ejemplo."

#. type: Labeled list
#: upstream/_versions/3.0/guides/transaction.adoc:393
#, fuzzy, no-wrap
msgid "Why do you prefer JTA vs Hibernate's transaction management API"
msgstr "¿Por qué prefiere JTA frente a la API de gestión de transacciones de Hibernate?"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:397
#, fuzzy
msgid "Managing the transactions manually via `entityManager.getTransaction().begin()` and friends lead to a butt ugly code with tons of try catch finally that people get wrong.  Transactions are also about JMS and other database access, so one API makes more sense."
msgstr "Gestionar las transacciones manualmente a través de `entityManager.getTransaction().begin()` y amigos conduce a un código feo como el culo con toneladas de try catch al final que la gente se equivoca. Las transacciones también tienen que ver con JMS y otros accesos a bases de datos, por lo que una API tiene más sentido."

#. type: Labeled list
#: upstream/_versions/3.0/guides/transaction.adoc:398
#, fuzzy, no-wrap
msgid "It's a mess because I don't know if my JPA persistence unit is using `JTA` or `Resource-level` Transaction"
msgstr "Es un lío porque no sé si mi unidad de persistencia JPA utiliza `JTA` o `Resource-level` Transaction"

#. type: Plain text
#: upstream/_versions/3.0/guides/transaction.adoc:403
msgid "It's not a mess in Quarkus :)  Resource-level was introduced to support JPA in a non managed environment.  But Quarkus is both lean and a managed environment, so we can safely always assume we are in JTA mode.  The end result is that the difficulties of running Hibernate ORM + CDI + a transaction manager in Java SE mode are solved by Quarkus."
msgstr ""
