# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/vertx.adoc:6
#, fuzzy, no-wrap
msgid "Using Eclipse Vert.x API from a Quarkus Application"
msgstr "Uso de la API de Eclipse Vert.x desde una aplicación Quarkus"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:13
#, fuzzy
msgid "https://vertx.io[Vert.x] is a toolkit for building reactive applications.  As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr "Vert. link:https://vertx.io[x] es un conjunto de herramientas para construir aplicaciones reactivas. Como se describe en la xref:quarkus-reactive-architecture.adoc[Arquitectura Reactiva de Quarkus] , Quarkus utiliza Vert.x por debajo."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/3.0/guides/vertx.adoc:14
#, no-wrap
msgid "Quarkus Reactive Core"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/3.0/guides/vertx.adoc:14
#, no-wrap
msgid "quarkus-reactive-core.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:17
#, fuzzy
msgid "Quarkus applications can access and use the Vert.x APIs."
msgstr "Las aplicaciones de Quarkus pueden acceder y utilizar las API de Vert.x."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:19
#, fuzzy
msgid "This guide presents how you can build a Quarkus application using:"
msgstr "Esta guía presenta cómo se puede construir una aplicación Quarkus utilizando:"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:21
#, fuzzy
msgid "the managed instance of Vert.x"
msgstr "la instancia gestionada de Vert.x"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:22
#, fuzzy
msgid "the Vert.x event bus"
msgstr "el bus de eventos Vert.x"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:23
#, fuzzy
msgid "the Vert.x Web Client"
msgstr "el cliente web Vert.x"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:26
#, fuzzy
msgid "It's an introductory guide.  The xref:vertx-reference.adoc[Vert.x reference guide] covers more advanced features such as verticles, and native transports."
msgstr "Es una guía introductoria. La xref:vertx-reference.adoc[guía de referencia Vert.x] cubre características más avanzadas como los vértices y los transportes nativos."

#. type: Title ==
#: upstream/_versions/3.0/guides/vertx.adoc:27
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "Arquitectura"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:30
#, fuzzy
msgid "We are going to build a simple application exposing four HTTP endpoints:"
msgstr "Vamos a construir una aplicación sencilla que exponga cuatro endpoints HTTP:"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:32
#, fuzzy
msgid "`/vertx/lorem` returns the content from a small file"
msgstr "`/vertx/lorem` devuelve el contenido de un pequeño archivo"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:33
#, fuzzy
msgid "`/vertx/book` returns the content from a large file (a book)"
msgstr "`/vertx/book` devuelve el contenido de un archivo grande (un libro)"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:34
#, fuzzy
msgid "`/vertx/hello` uses the Vert.x event bus to produce the response"
msgstr "`/vertx/hello` utiliza el bus de eventos de Vert.x para producir la respuesta"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:35
#, fuzzy
msgid "`/vertx/web` uses the Vert.x Web Client to retrieve data from Wikipedia"
msgstr "`/vertx/web` utiliza el cliente web Vert.x para recuperar datos de Wikipedia"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/3.0/guides/vertx.adoc:36
#, no-wrap
msgid "Architecture of the Vert.x guide"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/3.0/guides/vertx.adoc:36
#, no-wrap
msgid "quarkus-vertx-guide-architecture.png"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/vertx.adoc:38
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solución"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:42
#, fuzzy
msgid "We recommend that you follow the instructions in the following sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Le recomendamos que siga las instrucciones de las secciones siguientes y cree la aplicación paso a paso. No obstante, puede ir directamente al ejemplo completado."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clone el repositorio Git: `git clone {quickstarts-clone-url}` o descargue un {quickstarts-archive-url}[archivo]."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:46
#, fuzzy
msgid "The solution is located in the `vertx-quickstart` {quickstarts-tree-url}/vertx-quickstart[directory]."
msgstr "La solución se encuentra en `vertx-quickstart` {quickstarts-tree-url}/vertx-quickstart[directory]."

#. type: Block title
#: upstream/_versions/3.0/guides/vertx.adoc:48
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "Motín"

#. type: delimited block =
#: upstream/_versions/3.0/guides/vertx.adoc:52
#, fuzzy
msgid "This guide uses the Mutiny API.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive, reactive programming library]."
msgstr "Esta guía utiliza la API Mutiny. Si no está familiarizado con Mutiny, consulte xref:mutiny-primer.adoc[Mutiny: una biblioteca de programación intuitiva y reactiva] ."

#. type: Title ==
#: upstream/_versions/3.0/guides/vertx.adoc:55
#, fuzzy, no-wrap
msgid "Bootstrapping the application"
msgstr "Arranque de la aplicación"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:59
#, fuzzy
msgid "Click on https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=resteasy-reactive-jackson&e=vertx[this link] to configure your application.  It selected a few extensions:"
msgstr "Haga clic en link:https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=resteasy-reactive-jackson&e=vertx[este] enlace para configurar su aplicación. Ha seleccionado algunas extensiones:"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:61
#, fuzzy
msgid "`resteasy-reactive-jackson`, which also brings `resteasy-reactive`. We are going to use it to expose our HTTP endpoints."
msgstr "`resteasy-reactive-jackson`, que también trae `resteasy-reactive`. Vamos a utilizarlo para exponer nuestros puntos finales HTTP."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:62
#, fuzzy
msgid "`vertx`, which provides access to the underlying managed Vert.x"
msgstr "`vertx`que proporciona acceso al Vert gestionado subyacente.x"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:65
#, fuzzy
msgid "Click on the `Generate your application` button, download the zip file and unzip it.  Then, open the project in your favorite IDE."
msgstr "Haga clic en el botón `Generate your application` , descargue el archivo zip y descomprímalo. A continuación, abra el proyecto en su IDE favorito."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:67
#, fuzzy
msgid "If you open the generated build file, you can see the selected extensions:"
msgstr "Si abre el archivo de construcción generado, podrá ver las extensiones seleccionadas:"

#. type: Block title
#: upstream/_versions/3.0/guides/vertx.adoc:69
#: upstream/_versions/3.0/guides/vertx.adoc:91
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:79
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/vertx.adoc:82
#: upstream/_versions/3.0/guides/vertx.adoc:100
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:86
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-resteasy-reactive-jackson\")\n"
"implementation(\"io.quarkus:quarkus-vertx\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:89
#, fuzzy
msgid "While you are in your build file, add the following dependency:"
msgstr "Mientras está en su archivo de construcción, añada la siguiente dependencia:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:97
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:103
#, no-wrap
msgid "implementation(\"io.smallrye.reactive:smallrye-mutiny-vertx-web-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:106
#, fuzzy
msgid "This dependency provides the Vert.x Web Client, which we will be using to implement the `/web` endpoint."
msgstr "Esta dependencia proporciona el cliente web Vert.x, que utilizaremos para implementar el punto final `/web`."

#. type: Title ==
#: upstream/_versions/3.0/guides/vertx.adoc:108
#, fuzzy, no-wrap
msgid "Accessing the managed Vert.x instance"
msgstr "Acceso a la instancia gestionada de Vert.x"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:112
#, fuzzy
msgid "Create the `src/main/java/org/acme/VertxResource.java` file.  It will contain our HTTP endpoints."
msgstr "Cree el archivo `src/main/java/org/acme/VertxResource.java` . Contendrá nuestros puntos finales HTTP."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:114
#, fuzzy
msgid "In this file, copy the following code:"
msgstr "En este archivo, copie el siguiente código:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:118
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:121
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:123
#, no-wrap
msgid "import java.nio.charset.StandardCharsets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:127
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:130
#, no-wrap
msgid ""
"@Path(\"/vertx\")                        // <1>\n"
"public class VertxResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:132
#, no-wrap
msgid "    private final Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:138
#, no-wrap
msgid ""
"    @Inject                             // <2>\n"
"    public VertxResource(Vertx vertx) { // <3>\n"
"        this.vertx = vertx;             // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:140
#, fuzzy
msgid "Declare the root HTTP path."
msgstr "Declara la ruta HTTP raíz."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:141
#, fuzzy
msgid "We use constructor injection to receive the managed Vert.x instance. Field injection works too."
msgstr "Utilizamos la inyección del constructor para recibir la instancia gestionada de Vert.x. La inyección de campos también funciona."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:142
#, fuzzy
msgid "Receives the Vert.x instance as a constructor parameter"
msgstr "Recibe la instancia de Vert.x como parámetro del constructor"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:143
#, fuzzy
msgid "Store the managed Vert.x instance into a field."
msgstr "Almacena la instancia gestionada de Vert.x en un campo."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:145
#, fuzzy
msgid "With this, we can start implementing the endpoints."
msgstr "Con esto, podemos empezar a implementar los puntos finales."

#. type: Title ==
#: upstream/_versions/3.0/guides/vertx.adoc:146
#, fuzzy, no-wrap
msgid "Using Vert.x Core API"
msgstr "Uso de la API central de Vert.x"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:151
#, fuzzy
msgid "The injected Vert.x instance provides a set of APIs you can use.  The one we are going to use in this section is the Vert.x File System.  It provides a non-blocking API to access files."
msgstr "La instancia Vert.x inyectada proporciona un conjunto de APIs que puede utilizar. La que vamos a utilizar en esta sección es el Sistema de Archivos Vert.x. Proporciona una API no bloqueante para acceder a los archivos."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:154
#, fuzzy
msgid "In the `src/main/resource` directory, create a `lorem.txt` file with the following content:"
msgstr "En el directorio `src/main/resource`, cree un archivo `lorem.txt` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:158
#, no-wrap
msgid "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:161
#, fuzzy
msgid "Then, in the `VertxResource` file add the following method:"
msgstr "A continuación, en el archivo `VertxResource` añada el siguiente método:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:170
#, no-wrap
msgid ""
"@GET                                                                                   // <1>\n"
"@Path(\"/lorem\")\n"
"public Uni<String> readShortFile() {                                                   // <2>\n"
"    return vertx.fileSystem().readFile(\"lorem.txt\")                                    // <3>\n"
"            .onItem().transform(content -> content.toString(StandardCharsets.UTF_8));  // <4>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:172
#, fuzzy
msgid "This endpoint handles HTTP `GET` request on path `/lorem` (so the full path will be `vertx/lorem`)"
msgstr "Este endpoint gestiona la petición HTTP `GET` en la ruta `/lorem` (por lo que la ruta completa será `vertx/lorem`)"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:173
#, fuzzy
msgid "As the Vert.x API is asynchronous, our method returns a `Uni`. The content is written into the HTTP response when the asynchronous operation represented by the Uni completes."
msgstr "Como la API de Vert.x es asíncrona, nuestro método devuelve un `Uni`. El contenido se escribe en la respuesta HTTP cuando se completa la operación asíncrona representada por la Uni."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:174
#, fuzzy
msgid "We use the Vert.x file system API to read the created file"
msgstr "Utilizamos la API del sistema de archivos Vert.x para leer el archivo creado"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:175
#, fuzzy
msgid "Once the file is read, the content is stored in an in-memory buffer.  We transform this buffer into a String."
msgstr "Una vez leído el archivo, el contenido se almacena en un buffer en memoria. Transformamos este búfer en un String."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:177
#, fuzzy
msgid "In a terminal, navigate to the root of the project and run:"
msgstr "En un terminal, navegue hasta la raíz del proyecto y ejecute:"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:181
#, fuzzy
msgid "In another terminal, run:"
msgstr "En otra terminal, ejecute:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:185
#, no-wrap
msgid "> curl http://localhost:8080/vertx/lorem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:188
#, fuzzy
msgid "You should see the content of the file printed in the console."
msgstr "Debería ver el contenido del archivo impreso en la consola."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:190
#, fuzzy
msgid "Quarkus provides other ways to serve static files. This is an example made for the guide."
msgstr "Quarkus proporciona otras formas de servir archivos estáticos. Este es un ejemplo hecho para la guía."

#. type: Title ==
#: upstream/_versions/3.0/guides/vertx.adoc:191
#, fuzzy, no-wrap
msgid "Using Vert.x stream capability"
msgstr "Uso de la capacidad de flujo de Vert.x"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:195
#, fuzzy
msgid "Reading a file and storing the content in memory works for small files, but not big ones.  In this section, we will see how you can use Vert.x streaming capability."
msgstr "Leer un archivo y almacenar su contenido en la memoria funciona para archivos pequeños, pero no para los grandes. En esta sección, veremos cómo puede utilizar la capacidad de transmisión de Vert.x."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:199
#, fuzzy
msgid "First, download https://www.gutenberg.org/files/2600/2600-0.txt[War and Peace] and store it in `src/main/resources/book.txt`.  It's a 3.2 Mb file, which, while not being huge, illustrates the purpose of streams.  This time, we will not accumulate the file's content in memory and write it in one batch, but read it chunk by chunk and write these chunks into the HTTP response one by one."
msgstr "En primer lugar, descargue link:https://www.gutenberg.org/files/2600/2600-0.txt[Guerra y] Paz y guárdelo en `src/main/resources/book.txt` . Se trata de un archivo de 3,2 Mb que, aunque no es enorme, ilustra el propósito de los flujos. Esta vez, no acumularemos el contenido del archivo en la memoria y lo escribiremos en un lote, sino que lo leeremos trozo a trozo y escribiremos estos trozos en la respuesta HTTP uno a uno."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:201
#, fuzzy
msgid "So, you should have the following files in your project:"
msgstr "Por lo tanto, debe tener los siguientes archivos en su proyecto:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:222
#, no-wrap
msgid ""
".\n"
"├── mvnw\n"
"├── mvnw.cmd\n"
"├── pom.xml\n"
"├── README.md\n"
"├── src\n"
"│  └── main\n"
"│     ├── docker\n"
"│     │  ├── ...\n"
"│     ├── java\n"
"│     │  └── org\n"
"│     │     └── acme\n"
"│     │        └── VertxResource.java\n"
"│     └── resources\n"
"│        ├── application.properties\n"
"│        ├── book.txt\n"
"│        └── lorem.txt\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:224
#, fuzzy
msgid "Add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr "Añade el siguiente método a la clase `VertxResource`:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:230
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.vertx.core.file.OpenOptions;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:234
#, fuzzy
msgid "Add the following method to the `VertxResource` class:"
msgstr "Añade el siguiente método a la clase `VertxResource`:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:247
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/book\")\n"
"public Multi<String> readLargeFile() {                                               // <1>\n"
"    return vertx.fileSystem().open(\"book.txt\",                                       // <2>\n"
"                    new OpenOptions().setRead(true)\n"
"            )\n"
"            .onItem().transformToMulti(file -> file.toMulti())                       // <3>\n"
"            .onItem().transform(content -> content.toString(StandardCharsets.UTF_8) // <4>\n"
"                    + \"\\n------------\\n\");                                           // <5>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:249
#, fuzzy
msgid "This time, we return a Multi as we want to stream the chunks"
msgstr "Esta vez, devolvemos un Multi ya que queremos transmitir los trozos"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:250
#, fuzzy
msgid "We open the file using the `open` method. It returns a `Uni<AsyncFile>`"
msgstr "Abrimos el archivo con el método `open`. Éste devuelve un `Uni&amp;lt;AsyncFile&amp;gt;`"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:251
#, fuzzy
msgid "When the file is opened, we retrieve a `Multi` which will contain the chunks."
msgstr "Cuando se abre el archivo, recuperamos un `Multi` que contendrá los chunks."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:252
#, fuzzy
msgid "For each chunk, we produce a String"
msgstr "Para cada trozo, producimos una cadena"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:253
#, fuzzy
msgid "To visually see the chunks in the response, we append a separator"
msgstr "Para ver los trozos en la respuesta, añadimos un separador"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:255
#, fuzzy
msgid "Then, in a terminal, run:"
msgstr "Luego, en un terminal, ejecute:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:259
#, no-wrap
msgid "> curl http://localhost:8080/vertx/book\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:263
#, fuzzy
msgid "It should retrieve the book content.  In the output you should see the separator like:"
msgstr "Debería recuperar el contenido del libro. En la salida debería ver el separador como:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:268
#, no-wrap
msgid ""
"...\n"
"The little princess had also left the tea table and followed Hélène.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:270
#, no-wrap
msgid "“Wait a moment, I’ll get my work.... Now then, what\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:275
#, no-wrap
msgid ""
" are you\n"
"thinking of?” she went on, turning to Prince Hippolyte. “Fetch me my\n"
"workbag.”\n"
"...\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/vertx.adoc:277
#, fuzzy, no-wrap
msgid "Using the event bus"
msgstr "Uso del bus de eventos"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:287
#, fuzzy
msgid "One of the core features of Vert.x is the https://vertx.io/docs/vertx-core/java/#event_bus[event bus].  It provides a message-based backbone to your application.  So, you can have components interacting using asynchronous message passing, and so decouple your components.  You can send a message to a single consumer, or dispatch to multiple consumers, or implement a request-reply interaction, where you send a message (request) and expect a response.  This is what we are going to use in this section.  Our `VertxResource` will send a message containing a name to the `greetings` address.  Another component will receive the message and produce the \"hello $name\" response.  The `VertxResource` will receive the response and return it as the HTTP response."
msgstr "Una de las características centrales de Vert.x es el link:https://vertx.io/docs/vertx-core/java/#event_bus[bus de eventos] . Proporciona una columna vertebral basada en mensajes a su aplicación. Así, puede tener componentes interactuando mediante el paso asíncrono de mensajes, y desacoplar así sus componentes. Puede enviar un mensaje a un único consumidor, o despachar a múltiples consumidores, o implementar una interacción petición-respuesta, en la que envía un mensaje (petición) y espera una respuesta. Esto es lo que vamos a utilizar en esta sección. Nuestro `VertxResource` enviará un mensaje con un nombre a la dirección `greetings` . Otro componente recibirá el mensaje y producirá la respuesta \"hola $nombre\". El `VertxResource` recibirá la respuesta y la devolverá como respuesta HTTP."

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:289
msgid "So, first, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:291
#: upstream/_versions/3.0/guides/vertx.adoc:372
#: upstream/_versions/3.0/guides/vertx.adoc:436
msgid "[source, java]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:295
msgid "import io.vertx.mutiny.core.eventbus.EventBus; import jakarta.ws.rs.QueryParam;"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:299
#, fuzzy, no-wrap
msgid "Next, let's extend our `VertxResource` class with the following code:\n"
msgstr "A continuación, ampliemos nuestra clase `VertxResource` con el siguiente código:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:302
#: upstream/_versions/3.0/guides/vertx.adoc:322
#: upstream/_versions/3.0/guides/vertx.adoc:384
#: upstream/_versions/3.0/guides/vertx.adoc:401
#, no-wrap
msgid "[source, java]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:305
#, no-wrap
msgid ""
"@Inject\n"
"EventBus bus;                                                   // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:312
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/hello\")\n"
"public Uni<String> hello(@QueryParam(\"name\") String name) {     // <2>\n"
"    return bus.<String>request(\"greetings\", name)               // <3>\n"
"            .onItem().transform(response -> response.body());   // <4>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:317
#, no-wrap
msgid ""
"<1> Inject the event bus. Alternatively you can use `vertx.eventBus()`.\n"
"<2> We receive a _name_ as a query parameter\n"
"<3> We use the `request` method to initiate the request-reply interaction. We send the name to the \"greetings\" address.\n"
"<4> When the response is received, we extract the body and return it as the HTTP response\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:320
#, fuzzy, no-wrap
msgid ""
"Now, we need the other side: the component receiving the name and replying.\n"
"Create the `src/main/java/org/acme/GreetingService.java` file with the following content:\n"
msgstr "Ahora necesitamos la otra parte: el componente que recibe el nombre y responde. Cree el archivo `src/main/java/org/acme/GreetingService.java` con el siguiente contenido:"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:324
msgid "package org.acme;"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:326
msgid "import io.quarkus.vertx.ConsumeEvent;"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:328
msgid "import jakarta.enterprise.context.ApplicationScoped;"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:331
#, no-wrap
msgid ""
"@ApplicationScoped                          // <1>\n"
"public class GreetingService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:337
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greetings\")              // <2>\n"
"    public String hello(String name) {      // <3>\n"
"        return \"Hello \" + name;             // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:342
#, no-wrap
msgid ""
"<1> Declaring a CDI Bean in the Application scope. Quarkus will create a single instance of this class.\n"
"<2> Use the `@ConsumeEvent` annotation to declare a consumer. It is possible to use the Vert.x API https://vertx.io/docs/vertx-core/java/#_acknowledging_messages_sending_replies[directly] too.\n"
"<3> Receive the message payload as a method parameter. The returned object will be the reply.\n"
"<4> Return the response. This response is sent back to the `VertxResource` class\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:345
#, fuzzy, no-wrap
msgid ""
"Let's try this.\n"
"In a terminal, run:\n"
msgstr "Intentemos esto. En un terminal, ejecute"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:348
#: upstream/_versions/3.0/guides/vertx.adoc:421
#, no-wrap
msgid "[source, bash]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:350
msgid "curl \"http://localhost:8080/vertx/hello?name=bob\""
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:353
#, fuzzy, no-wrap
msgid "You should get the expected `Hello bob` message back.\n"
msgstr "Debería recibir de vuelta el mensaje `Hello bob` esperado."

#. type: Title ==
#: upstream/_versions/3.0/guides/vertx.adoc:354
#, fuzzy, no-wrap
msgid "Using Vert.x Clients"
msgstr "Uso de clientes Vert.x"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:360
#, fuzzy
msgid "So far, we have used the Vert.x Core API.  Vert.x offers much more.  It provides a vast ecosystem.  In this section, we will see how you can use the Vert.x Web Client, a reactive HTTP client."
msgstr "Hasta ahora, hemos utilizado la API básica de Vert.x. Vert.x ofrece mucho más. Proporciona un vasto ecosistema. En esta sección, veremos cómo puede utilizar el Cliente Web Vert.x, un cliente HTTP reactivo."

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:364
#, fuzzy
msgid "Note that some Quarkus extensions are wrapping Vert.x clients and manage them for you.  That's the case for the reactive data sources, Redis, mail...  That's not the case with the Web Client."
msgstr "Tenga en cuenta que algunas extensiones de Quarkus envuelven a los clientes Vert.x y los gestionan por usted. Es el caso de las fuentes de datos reactivas, Redis, correo... No es el caso del Cliente Web."

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:367
#, fuzzy
msgid "Remember, at the beginning of the guide, we added the `smallrye-mutiny-vertx-web-client` dependency to our `pom.xml` file.  It's now time to use it."
msgstr "Recuerde que, al principio de la guía, añadimos la dependencia `smallrye-mutiny-vertx-web-client` a nuestro archivo `pom.xml` . Ahora es el momento de utilizarla."

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:370
msgid "First, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:377
msgid "import io.vertx.core.json.JsonArray; import io.vertx.mutiny.ext.web.client.HttpResponse; import io.vertx.mutiny.ext.web.client.WebClient;"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:382
#, fuzzy, no-wrap
msgid ""
"Next, we need to create an instance of `WebClient`.\n"
"Extend the `VertxResource` class with the `client` field and the creation of the web client in the constructor:\n"
msgstr "A continuación, necesitamos crear una instancia de `WebClient` . Amplíe la clase `VertxResource` con el campo `client` y la creación del cliente web en el constructor:"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:387
#, no-wrap
msgid ""
"private final Vertx vertx;\n"
"private final WebClient client;            // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:393
#, no-wrap
msgid ""
"@Inject\n"
"public VertxResource(Vertx vertx) {\n"
"    this.vertx = vertx;\n"
"    this.client = WebClient.create(vertx); // <2>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:396
#, no-wrap
msgid ""
"<1> Store the `WebClient`, so we will be able to use it in our HTTP endpoint\n"
"<2> Create the `WebClient`. Be sure to use the `io.vertx.mutiny.ext.web.client.WebClient` class\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:399
#, fuzzy, no-wrap
msgid ""
"Let's now implement a new HTTP endpoint that queries the Wikipedia API to retrieve the pages about Quarkus in the different languages.\n"
"Add the following method to the `VertxResource` class:\n"
msgstr "Implementemos ahora un nuevo punto final HTTP que consulte la API de Wikipedia para recuperar las páginas sobre Quarkus en los distintos idiomas. Añada el siguiente método a la clase `VertxResource` :"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:403
msgid "private static final String URL = \"https://en.wikipedia.org/w/api.php?action=parse&page=Quarkus&format=json&prop=langlinks\";"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:412
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/web\")\n"
"public Uni<JsonArray> retrieveDataFromWikipedia() {                     // <1>\n"
"    return client.getAbs(URL).send()                                    // <2>\n"
"            .onItem().transform(HttpResponse::bodyAsJsonObject)         // <3>\n"
"            .onItem().transform(json -> json.getJsonObject(\"parse\")     // <4>\n"
"                                        .getJsonArray(\"langlinks\"));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:417
#, no-wrap
msgid ""
"<1> This endpoint returns a JSON Array. Vert.x provides a convenient way to manipulate JSON Object and Array. More details about these in xref:vertx-reference.adoc#using-vert-x-json[the reference guide].\n"
"<2> Send a `GET` request to the Wikipedia API\n"
"<3> Once the response is received, extract it as a JSON Object\n"
"<4> Extract the `langlinks` array from the response.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:419
#, fuzzy, no-wrap
msgid "Then, invoke the endpoint using:\n"
msgstr "A continuación, invoque el punto final utilizando:"

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:423
msgid "curl http://localhost:8080/vertx/web"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:427
#, fuzzy, no-wrap
msgid "The response indicates that, in addition to the English page, there are a German and a French page about Quarkus on wikipedia.\n"
msgstr "La respuesta indica que, además de la página en inglés, hay una página en alemán y otra en francés sobre Quarkus en la wikipedia."

#. type: Title ==
#: upstream/_versions/3.0/guides/vertx.adoc:428
#, fuzzy, no-wrap
msgid "Executing Asynchronous Code From a Blocking Thread"
msgstr "Ejecución de Código Asíncrono desde un Hilo Bloqueante"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:434
#, fuzzy
msgid "Sometimes it's necessary to execute an asynchronous code from a blocking thread.  Specifically, to execute the code on a Vert.x thread with an isolated/duplicated Vert.x context.  A typical example is an asynchronous code that needs to leverage the Hibernate Reactive API during application startup.  Quarkus provides the `VertxContextSupport#subscribeAndAwait()` method which subscribes to the supplied `io.smallrye.mutiny.Uni` on a Vert.x duplicated context, then blocks the current thread and waits for the result."
msgstr "A veces es necesario ejecutar un código asíncrono desde un hilo bloqueante. Concretamente, ejecutar el código en un hilo Vert.x con un contexto Vert.x aislado/duplicado. Un ejemplo típico es un código asíncrono que necesita aprovechar la API Reactiva de Hibernate durante el inicio de la aplicación. Quarkus proporciona el método `VertxContextSupport#subscribeAndAwait()` que se suscribe al `io.smallrye.mutiny.Uni` suministrado en un contexto Vert.x duplicado, luego bloquea el hilo actual y espera el resultado."

#. type: Plain text
#: upstream/_versions/3.0/guides/vertx.adoc:442
#, no-wrap
msgid ""
"void onStart(@Observes StartupEvent event, Mutiny.SessionFactory sf) {\n"
"   VertxContextSupport.subscribeAndAwait(() -> {\n"
"      sf.withTransaction(session -> session.persist(new Person())); \n"
"   });\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:445
#, no-wrap
msgid "NOTE: If it's necessary, the CDI request context is activated during execution of the asynchronous code.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:447
#, no-wrap
msgid "CAUTION: `VertxContextSupport#subscribeAndAwait()` must not be called on an event loop!\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/vertx.adoc:449
#, fuzzy, no-wrap
msgid "Going further"
msgstr "Ir más allá"

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:454
#, fuzzy
msgid "This guide introduced how you can use Vert.x APIs from a Quarkus application.  It's just a brief overview.  If you want to know more, check the xref:vertx-reference.adoc[reference guide about Vert.x in Quarkus]."
msgstr "Esta guía presenta cómo puede utilizar las API de Vert.x desde una aplicación Quarkus. Es sólo un breve resumen. Si desea saber más, consulte la xref:vertx-reference.adoc[guía de referencia sobre Vert.x en] Quarkus."

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:458
#, fuzzy
msgid "As we have seen, the event bus is the connecting tissue of Vert.x applications.  Quarkus integrates it so different beans can interact with asynchronous messages.  This part is covered in the xref:reactive-event-bus.adoc[event bus documentation]."
msgstr "Como hemos visto, el bus de eventos es el tejido conectivo de las aplicaciones Vert.x. Quarkus lo integra para que distintos beans puedan interactuar con mensajes asíncronos. Esta parte está cubierta en la xref:reactive-event-bus.adoc[documentación] del bus de eventos."

#. type: delimited block -
#: upstream/_versions/3.0/guides/vertx.adoc:459
msgid "Learn how to implement highly performant, low-overhead database applications on Quarkus with the xref:reactive-sql-clients.adoc[Reactive SQL Clients]."
msgstr ""
