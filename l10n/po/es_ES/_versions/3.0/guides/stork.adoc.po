# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/stork.adoc:6
#, fuzzy, no-wrap
msgid "Getting Started with SmallRye Stork"
msgstr "Primeros pasos con SmallRye Stork"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:17
#, fuzzy
msgid "The essence of distributed systems resides in the interaction between services.  In modern architecture, you often have multiple instances of your service to share the load or improve the resilience by redundancy.  But how do you select the best instance of your service? That's where https://smallrye.io/smallrye-stork[SmallRye Stork] helps.  Stork is going to choose the most appropriate instance.  It offers:"
msgstr "La esencia de los sistemas distribuidos reside en la interacción entre servicios. En la arquitectura moderna, a menudo dispone de varias instancias de su servicio para compartir la carga o mejorar la resistencia mediante la redundancia. Pero, ¿cómo selecciona la mejor instancia de su servicio? Ahí es donde link:https://smallrye.io/smallrye-stork[SmallRye Stork] le ayuda. Stork va a elegir la instancia más adecuada. Le ofrece:"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:19
#, fuzzy
msgid "Extensible service discovery mechanisms"
msgstr "Mecanismos extensibles de descubrimiento de servicios"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:20
#, fuzzy
msgid "Built-in support for Consul and Kubernetes"
msgstr "Soporte integrado para Consul y Kubernetes"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:21
#, fuzzy
msgid "Customizable client load-balancing strategies"
msgstr "Estrategias de equilibrio de carga de clientes personalizables"

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:24
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Requisitos previos"

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:29
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "Arquitectura"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:32
#, fuzzy
msgid "In this guide, we will build an application composed of:"
msgstr "En esta guía, construiremos una aplicación compuesta por:"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:34
#, fuzzy
msgid "A simple blue service exposed on port 9000"
msgstr "Un simple servicio azul expuesto en el puerto 9000"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:35
#, fuzzy
msgid "A simple red service exposed on port 9001"
msgstr "Un simple servicio rojo expuesto en el puerto 9001"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:36
#, fuzzy
msgid "A REST Client calling the blue or red service (the selection is delegated to Stork)"
msgstr "Un cliente REST que llama al servicio azul o rojo (la selección se delega en Stork)"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:37
#, fuzzy
msgid "A REST endpoint using the REST client and calling the services"
msgstr "Un punto final REST utilizando el cliente REST y llamando a los servicios"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:38
#, fuzzy
msgid "The blue and red services are registered in https://www.consul.io/[Consul]."
msgstr "Los servicios azules y rojos están registrados en  link:https://www.consul.io/[Consul]."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/3.0/guides/stork.adoc:39
#, no-wrap
msgid "Architecture of the application"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/3.0/guides/stork.adoc:39
#, no-wrap
msgid "stork-getting-started-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:43
#, fuzzy
msgid "For the sake of simplicity, everything (except Consul) will be running in the same Quarkus application.  Of course, each component will run in its own process in the real world."
msgstr "En aras de la simplicidad, todo (excepto Consul) se ejecutará en la misma aplicación Quarkus. Por supuesto, cada componente se ejecutará en su propio proceso en el mundo real."

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:44
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solución"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:48
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the applications step by step.  However, you can go right to the completed example."
msgstr "Le recomendamos que siga las instrucciones de las siguientes secciones y cree las aplicaciones paso a paso. No obstante, puede ir directamente al ejemplo completado."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:50
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clone el repositorio Git: `git clone {quickstarts-clone-url}` o descargue un {quickstarts-archive-url}[archivo]."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:52
#, fuzzy
msgid "The solution is located in the `stork-quickstart` {quickstarts-tree-url}/stork-quickstart[directory]."
msgstr "La solución se encuentra en `stork-quickstart` {quickstarts-tree-url}/stork-quickstart[directory]."

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:53
#, fuzzy, no-wrap
msgid "Discovery and selection"
msgstr "Descubrimiento y selección"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:56
#, fuzzy
msgid "Before going further, we need to discuss discovery vs. selection."
msgstr "Antes de seguir adelante, tenemos que hablar del descubrimiento frente a la selección."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:59
#, fuzzy
msgid "Service discovery is the process of locating service instances.  It produces a list of service instances that is potentially empty (if no service matches the request) or contains multiple service instances."
msgstr "El descubrimiento de servicios es el proceso de localización de instancias de servicio. Produce una lista de instancias de servicio que puede estar vacía (si ningún servicio coincide con la solicitud) o contener múltiples instancias de servicio."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:62
#, fuzzy
msgid "Service selection, also called load-balancing, chooses the best instance from the list returned by the discovery process.  The result is a single service instance or an exception when no suitable instance can be found."
msgstr "La selección de servicios, también llamada equilibrio de carga, elige la mejor instancia de la lista devuelta por el proceso de descubrimiento. El resultado es una única instancia de servicio o una excepción cuando no se encuentra ninguna instancia adecuada."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:66
#, fuzzy
msgid "Stork handles both discovery and selection.  However, it does not handle the communication with the service but only provides a service instance.  The various integrations in Quarkus extract the location of the service from that service instance."
msgstr "Stork se encarga tanto del descubrimiento como de la selección. Sin embargo, no se ocupa de la comunicación con el servicio, sino que sólo proporciona una instancia de servicio. Las distintas integraciones de Quarkus extraen la ubicación del servicio de esa instancia de servicio."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/3.0/guides/stork.adoc:67
#, no-wrap
msgid "Discovery and Selection of services"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/3.0/guides/stork.adoc:67
#, no-wrap
msgid "stork-process.png"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:69
#, fuzzy, no-wrap
msgid "Bootstrapping the project"
msgstr "Puesta en marcha del proyecto"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:72
#, fuzzy
msgid "Create a Quarkus project importing the quarkus-rest-client-reactive and quarkus-resteasy-reactive extensions using your favorite approach:"
msgstr "Crea un proyecto Quarkus importando las extensiones quarkus-rest-client-reactive y quarkus-resteasy-reactive utilizando tu enfoque favorito:"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:78
#, fuzzy
msgid "In the generated project, also add the following dependencies:"
msgstr "En el proyecto generado, añada también las siguientes dependencias:"

#. type: Block title
#: upstream/_versions/3.0/guides/stork.adoc:80
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:90
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.stork</groupId>\n"
"  <artifactId>stork-service-discovery-consul</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-consul-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/stork.adoc:93
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:97
#, no-wrap
msgid ""
"implementation(\"io.smallrye.stork:stork-service-discovery-consul\")\n"
"implementation(\"io.smallrye.reactive:smallrye-mutiny-vertx-consul-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:101
#, fuzzy
msgid "`stork-service-discovery-consul` provides an implementation of service discovery for Consul.  `smallrye-mutiny-vertx-consul-client` is a Consul client which we will use to register our services in Consul."
msgstr "`stork-service-discovery-consul` proporciona una implementación del descubrimiento de servicios para Consul. `smallrye-mutiny-vertx-consul-client` es un cliente de Consul que utilizaremos para registrar nuestros servicios en Consul."

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:102
#, fuzzy, no-wrap
msgid "The Blue and Red services"
msgstr "Los servicios Azul y Rojo"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:105
#, fuzzy
msgid "Let's start with the very beginning: the service we will discover, select and call."
msgstr "Empecemos por el principio: el servicio que vamos a descubrir, seleccionar y llamar."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:107
#, fuzzy
msgid "Create the `src/main/java/org/acme/services/BlueService.java` with the following content:"
msgstr "Cree el `src/main/java/org/acme/services/BlueService.java` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:111
#: upstream/_versions/3.0/guides/stork.adoc:146
#: upstream/_versions/3.0/guides/stork.adoc:185
#, no-wrap
msgid "package org.acme.services;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:115
#: upstream/_versions/3.0/guides/stork.adoc:150
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:118
#: upstream/_versions/3.0/guides/stork.adoc:153
#: upstream/_versions/3.0/guides/stork.adoc:195
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:121
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class BlueService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:123
#, no-wrap
msgid "    @ConfigProperty(name = \"blue-service-port\", defaultValue = \"9000\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:135
#, no-wrap
msgid ""
"    /**\n"
"     * Start an HTTP server for the blue service.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        vertx.createHttpServer()\n"
"                .requestHandler(req -> req.response().endAndForget(\"Hello from Blue!\"))\n"
"                .listenAndAwait(port);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:139
#, fuzzy
msgid "It creates a new HTTP server (using Vert.x) and implements our simple service when the application starts.  For each HTTP request, it sends a response with \"Hello from Blue!\" as the body."
msgstr "Crea un nuevo servidor HTTP (utilizando Vert.x) e implementa nuestro servicio simple cuando se inicia la aplicación. Para cada solicitud HTTP, envía una respuesta con \"¡Hola desde Azul!\" como cuerpo."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:141
#, fuzzy
msgid "Following the same logic, create the `src/main/java/org/acme/services/RedService.java` with the following content:"
msgstr "Siguiendo la misma lógica, cree el `src/main/java/org/acme/services/RedService.java` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:157
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedService {\n"
"    @ConfigProperty(name = \"red-service-port\", defaultValue = \"9001\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:168
#, no-wrap
msgid ""
"    /**\n"
"     * Start an HTTP server for the red service.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        vertx.createHttpServer()\n"
"                .requestHandler(req -> req.response().endAndForget(\"Hello from Red!\"))\n"
"                .listenAndAwait(port);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:170
#: upstream/_versions/3.0/guides/stork.adoc:292
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:173
#, fuzzy
msgid "This time, it writes \"Hello from Red!\"."
msgstr "Esta vez, escribe \"¡Hola de parte de Red!\"."

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:174
#, fuzzy, no-wrap
msgid "Service registration in Consul"
msgstr "Registro de servicios en Consul"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:177
#, fuzzy
msgid "Now that we have implemented our services, we need to register them into Consul."
msgstr "Ahora que hemos implementado nuestros servicios, tenemos que registrarlos en Consul."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:179
#, fuzzy
msgid "Stork is not limited to Consul and integrates with other service discovery mechanisms."
msgstr "Stork no se limita a Consul y se integra con otros mecanismos de descubrimiento de servicios."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:181
#, fuzzy
msgid "Create the `src/main/java/org/acme/services/Registration.java` file with the following content:"
msgstr "Cree el archivo `src/main/java/org/acme/services/Registration.java` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:192
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.ext.consul.ServiceOptions;\n"
"import io.vertx.mutiny.ext.consul.ConsulClient;\n"
"import io.vertx.ext.consul.ConsulClientOptions;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:198
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Registration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:201
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"consul.host\") String host;\n"
"    @ConfigProperty(name = \"consul.port\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:204
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"red-service-port\", defaultValue = \"9000\") int red;\n"
"    @ConfigProperty(name = \"blue-service-port\", defaultValue = \"9001\") int blue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:212
#, no-wrap
msgid ""
"    /**\n"
"     * Register our two services in Consul.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        ConsulClient client = ConsulClient.create(vertx, new ConsulClientOptions().setHost(host).setPort(port));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:219
#, no-wrap
msgid ""
"        client.registerServiceAndAwait(\n"
"                new ServiceOptions().setPort(red).setAddress(\"localhost\").setName(\"my-service\").setId(\"red\"));\n"
"        client.registerServiceAndAwait(\n"
"                new ServiceOptions().setPort(blue).setAddress(\"localhost\").setName(\"my-service\").setId(\"blue\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:223
#, fuzzy
msgid "When the application starts, it connects to Consul using the Vert.x Consul Client and registers our two instances.  Both registration uses the same name (`my-service`), but different ids to indicate that it's two instances of the same _service_."
msgstr "Cuando la aplicación se inicia, se conecta a Consul utilizando el cliente Consul de Vert.x y registra nuestras dos instancias. Ambos registros utilizan el mismo nombre ( `my-service` ), pero diferentes ids para indicar que se trata de dos instancias del mismo _servicio_ ."

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:224
#, fuzzy, no-wrap
msgid "The REST Client interface and the front end API"
msgstr "La interfaz del cliente REST y la API del front-end"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:227
#, fuzzy
msgid "So far, we didn't use Stork; we just scaffolded the services we will be discovering, selecting, and calling."
msgstr "Hasta ahora, no hemos utilizado Stork, sino que nos hemos limitado a crear un andamiaje de los servicios que vamos a descubrir, seleccionar y llamar."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:230
#, fuzzy
msgid "We will call the services using the Reactive REST Client.  Create the `src/main/java/org/acme/MyService.java` file with the following content:"
msgstr "Llamaremos a los servicios utilizando el cliente REST reactivo. Cree el archivo `src/main/java/org/acme/MyService.java` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:234
#: upstream/_versions/3.0/guides/stork.adoc:269
#: upstream/_versions/3.0/guides/stork.adoc:304
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:236
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:240
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:250
#, no-wrap
msgid ""
"/**\n"
" * The REST Client interface.\n"
" *\n"
" * Notice the `baseUri`. It uses `stork://` as URL scheme indicating that the called service uses Stork to locate and\n"
" * select the service instance. The `my-service` part is the service name. This is used to configure Stork discovery\n"
" * and selection in the `application.properties` file.\n"
" */\n"
"@RegisterRestClient(baseUri = \"stork://my-service\")\n"
"public interface MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:255
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String get();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:262
#, fuzzy
msgid "It's a straightforward REST client interface containing a single method. However, note the `baseUri` attribute.  It starts with `stork://`.  It instructs the REST client to delegate the discovery and selection of the service instances to Stork.  Notice the `my-service` part in the URL.  It is the service name we will be using in the application configuration."
msgstr "Es una interfaz de cliente REST directa que contiene un único método. Sin embargo, observe el atributo `baseUri` . Empieza por `stork://` . Indica al cliente REST que delegue en Stork el descubrimiento y la selección de las instancias de servicio. Observe la parte `my-service` en la URL. Es el nombre del servicio que utilizaremos en la configuración de la aplicación."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:265
#, fuzzy
msgid "It does not change how the REST client is used.  Create the `src/main/java/org/acme/FrontendApi.java` file with the following content:"
msgstr "No cambia la forma de utilizar el cliente REST. Cree el archivo `src/main/java/org/acme/FrontendApi.java` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:271
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:276
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:282
#, no-wrap
msgid ""
"/**\n"
" * A frontend API using our REST Client (which uses Stork to locate and select the service instance on each call).\n"
" */\n"
"@Path(\"/api\")\n"
"public class FrontendApi {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:284
#, no-wrap
msgid "    @RestClient MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:290
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String invoke() {\n"
"        return service.get();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:295
#, fuzzy
msgid "It injects and uses the REST client as usual."
msgstr "Inyecta y utiliza el cliente REST como siempre."

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:296
#, fuzzy, no-wrap
msgid "Stork Filter"
msgstr "Filtro Stork"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:300
msgid "The `baseUri` configured in the REST client will be processed by `StorkClientRequestFilter` class, this is a https://quarkus.io/specs/jaxrs/2.1/index.html#filters[JAX-RS filter].  If you need to process the metadata associated with a message: HTTP headers, query parameters, media type, and other metadata, you can implement another filter to configure what you need.  Let’s implement a custom filter to add logging capability to our service. We create `CustomLoggingFilter` and annotating it with the @Provider annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:309
#, no-wrap
msgid ""
"import io.vertx.core.http.HttpServerRequest;\n"
"import org.jboss.logging.Logger;\n"
"import org.jboss.resteasy.reactive.client.spi.ResteasyReactiveClientRequestContext;\n"
"import org.jboss.resteasy.reactive.client.spi.ResteasyReactiveClientRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:311
#, no-wrap
msgid "import jakarta.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:314
#, no-wrap
msgid ""
"@Provider\n"
"public class CustomLoggingFilter implements ResteasyReactiveClientRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:316
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(CustomLoggingFilter.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:322
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ResteasyReactiveClientRequestContext requestContext) {\n"
"        LOG.infof(\"Resolved address by Stork: %s\",requestContext.getUri().toString());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:327
#, fuzzy
msgid "The order in which filters are executed is defined by https://quarkus.io/specs/jaxrs/2.1/index.html#priorities[Priorities].  Note that `CustomLoggingFilter` is using a default value, so the user-level priority and the `StorkClientRequestFilter` uses the security authentication filter priority. This means that `StorkClientRequestFilter` will be executed before our `CustomLoggingFilter`.  Use `@Priority` annotation to change this behaviour."
msgstr "El orden en que se ejecutan los filtros se define mediante link:https://quarkus.io/specs/jaxrs/2.1/index.html#priorities[Prioridades] . Observe que `CustomLoggingFilter` utiliza un valor por defecto, por lo que la prioridad a nivel de usuario y el `StorkClientRequestFilter` utiliza la prioridad del filtro de autenticación de seguridad. Esto significa que `StorkClientRequestFilter` se ejecutará antes que nuestro `CustomLoggingFilter` . Utilice la anotación `@Priority` para cambiar este comportamiento."

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:329
#, fuzzy, no-wrap
msgid "Stork configuration"
msgstr "Configuración de la cigüeña"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:332
#, fuzzy
msgid "The system is almost complete. We only need to configure Stork and the `Registration` bean."
msgstr "El sistema está casi completo. Sólo falta configurar Stork y el frijol `Registration`."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:334
#, fuzzy
msgid "In the `src/main/resources/application.properties`, add:"
msgstr "En el `src/main/resources/application.properties`, añada:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:339
#, no-wrap
msgid ""
"consul.host=localhost\n"
"consul.port=8500\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:344
#, no-wrap
msgid ""
"quarkus.stork.my-service.service-discovery.type=consul\n"
"quarkus.stork.my-service.service-discovery.consul-host=localhost\n"
"quarkus.stork.my-service.service-discovery.consul-port=8500\n"
"quarkus.stork.my-service.load-balancer.type=round-robin\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:347
#, fuzzy
msgid "The first two lines provide the Consul location used by the `Registration` bean."
msgstr "Las dos primeras líneas proporcionan la ubicación del cónsul utilizada por el frijol `Registration`."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:354
#, fuzzy
msgid "The other properties are related to Stork.  `stork.my-service.service-discovery` indicates which type of service discovery we will be using to locate the `my-service` service.  In our case, it's `consul`.  `quarkus.stork.my-service.service-discovery.consul-host` and `quarkus.stork.my-service.service-discovery.consul-port` configures the access to Consul.  Finally, `quarkus.stork.my-service.load-balancer.type` configures the service selection.  In our case, we use a `round-robin`."
msgstr "Las demás propiedades están relacionadas con Stork. `stork.my-service.service-discovery` indica qué tipo de descubrimiento de servicios utilizaremos para localizar el servicio `my-service` . En nuestro caso, es `consul` . `quarkus.stork.my-service.service-discovery.consul-host` y `quarkus.stork.my-service.service-discovery.consul-port` configuran el acceso a Consul. Por último, `quarkus.stork.my-service.load-balancer.type` configura la selección del servicio. En nuestro caso, utilizamos un `round-robin` ."

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:355
#, fuzzy, no-wrap
msgid "Running the application"
msgstr "Ejecución de la aplicación"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:359
#, fuzzy
msgid "We're done! So, let's see if it works."
msgstr "¡Ya está! Veamos si funciona."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:361
#, fuzzy
msgid "First, start Consul:"
msgstr "En primer lugar, empieza el Cónsul:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:365
#, no-wrap
msgid "docker run --rm --name consul -p 8500:8500 -p 8501:8501 consul:1.7 agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0 --https-port=8501\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:368
#, fuzzy
msgid "If you start Consul differently, do not forget to edit the application configuration."
msgstr "Si inicia Consul de forma diferente, no olvide editar la configuración de la aplicación."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:370
#, fuzzy
msgid "Then, package the application:"
msgstr "A continuación, empaquete la aplicación:"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:374
#, fuzzy
msgid "And run it:"
msgstr "Y ejecútalo:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:378
#, no-wrap
msgid "> java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:381
#, fuzzy
msgid "In another terminal, run:"
msgstr "En otra terminal, ejecute:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:390
#, no-wrap
msgid ""
"> curl http://localhost:8080/api\n"
"...\n"
"> curl http://localhost:8080/api\n"
"...\n"
"> curl http://localhost:8080/api\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:393
#, fuzzy
msgid "The responses alternate between `Hello from Red!` and `Hello from Blue!`."
msgstr "Las respuestas alternan entre `Hello from Red!` y `Hello from Blue!`."

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:395
#, fuzzy
msgid "You can compile this application into a native executable:"
msgstr "Puedes compilar esta aplicación en un ejecutable nativo:"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:399
#, fuzzy
msgid "And start it with:"
msgstr "Y empezarlo con:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork.adoc:403
#, no-wrap
msgid "> ./target/stork-getting-started-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork.adoc:405
#, fuzzy, no-wrap
msgid "Going further"
msgstr "Ir más allá"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:409
#, fuzzy
msgid "This guide has shown how to use SmallRye Stork to discover and select your services.  You can find more about Stork in:"
msgstr "Esta guía le ha mostrado cómo utilizar SmallRye Stork para descubrir y seleccionar sus servicios. Puede encontrar más información sobre Stork en:"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:411
#, fuzzy
msgid "the xref:stork-reference.adoc[Stork reference guide],"
msgstr "la  link:stork-reference.html[guía de referencia de la cigüeña],"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork.adoc:411
#, fuzzy
msgid "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."
msgstr "el  link:https://smallrye.io/smallrye-stork[sitio web de SmallRye Stork]."
